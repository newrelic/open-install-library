---
- debug:
    msg: Install Minikube

- name: Is Minikube installed
  shell: 'minikube version | grep "minikube version:" | wc -l'
  register: is_minikube_installed

- name: Install required packages
  yum:
    name:
      - docker
      - conntrack
    state: present
  become: yes

- block:
    - name: Enable docker service
      shell: "systemctl enable docker.service"
      become: yes
    - name: Enable containerd service
      shell: "systemctl enable containerd.service"
      become: yes
    - name: Start docker service
      shell: "systemctl start docker.service"
      become: yes
    - name: Start containerd service
      shell: "systemctl start containerd.service"
      become: yes

- name: Ensure group "docker" exists
  ansible.builtin.group:
    name: docker
    state: present
  become: yes

- name: adding existing user "{{ ansible_user }}" to group docker
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  become: yes

- name: reset ssh connection for user group change to take effect
  meta: reset_connection

- name: Get docker version
  shell: 'docker version'
  register: docker_output
  retries: 3
  delay: 10
  until: docker_output is not failed

- block:
    - name: Download Minikube
      become: yes
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'

- name: Configure minikube driver
  become: no
  shell: 'minikube config set driver docker'
  environment:
    PATH: "/usr/local/bin/:{{ ansible_env.PATH }}"

- name: Start Minikube as non-root user
  become: no
  shell: 'minikube start --memory 8192 --cpus 4 --kubernetes-version=v1.31.0'
  environment:
    PATH: "/usr/local/bin/:{{ ansible_env.PATH }}"

- name: Create kubectl wrap command
  template:
    src: kubectl.wrap
    dest: "/usr/bin/kubectl"
    force: yes
    mode: '0777'
  become: yes

- name: Set Kubernetes context to Minikube
  shell: 'kubectl config use-context minikube'
  become: no
  environment:
    PATH: "/usr/local/bin/:{{ ansible_env.PATH }}"

- name: Get list of pods
  become: no
  shell: 'kubectl get pods --all-namespaces'
  environment:
    PATH: "/usr/local/bin/:{{ ansible_env.PATH }}"

- name: Download the Helm binary
  shell: 'wget https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz'
  become: yes

- name: Extract the Helm archive
  shell: 'tar -xvf helm-v3.8.0-linux-amd64.tar.gz'
  become: yes

- name: Give all permissions to the Helm binary file
  shell: 'chmod -R 777 /home/ec2-user/linux-amd64'
  become: yes

- name: Move the Helm executable to a system directory
  shell: 'mv linux-amd64/helm /usr/local/bin/'
  become: yes

- name: Update the system's PATH environment variable
  shell: 'echo "export PATH=$PATH:/usr/local/bin/" | tee -a /etc/profile'
  become: yes

- name: Resolve path issues
  shell: 'echo "export PATH=$PATH:/usr/bin/" >> ~/.bashrc'
  become: yes