---
# Parameters:
# recipe_content_url: A recipe URL in a raw format, for example "https://api.github.com/repos/newrelic/open-install-library/contents/recipes/newrelic/infrastructure/awslinux.yml"
# newrelic_personal_api_key: The newrelic personal api key. It typically starts with NRAK-
# newrelic_account_id: (optional) The newrelic account id
# newrelic_region: (optional) The newrelic region. Typically "US".
# newrelic_cli_path: (optional) The newrelic-cli to use instead of using latest published
# command_should_fail: (optional) Should the newrelic install command fail? False by default.
# validate_output: (optional) An array of Strings that must appear in stdout for this test to pass.

- name: Prepare command_should_fail option
  when: command_should_fail is not defined
  set_fact:
    command_should_fail: False

- name: Prepare newrelic_cli_option param
  when: newrelic_cli_option is not defined
  set_fact:
    newrelic_cli_option: ""

- fail:
    msg: "A newrelic_personal_api_key is required. Create this entry in your user config file"
  when: newrelic_personal_api_key is not defined

- fail:
    msg: "A recipe_content_url is required. Create this entry in your deploy config file"
  when: recipe_content_url is not defined

- name: Prepare environment variables for newrelic-cli execution
  set_fact:
    env_vars: "NEW_RELIC_API_KEY={{ newrelic_personal_api_key }}"

- name: Adding newrelic accountId environment variable
  set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_ACCOUNT_ID={{ newrelic_account_id }}"
  when: newrelic_account_id is defined

- name: Adding newrelic region environment variable
  set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_REGION={{ newrelic_region }}"
  when: newrelic_region is defined

- name: Adding sudo user environment variable
  set_fact:
    env_vars: "{{ env_vars }} SUDO_USER={{ ansible_user }}"

- name: Get CLI environment variables
  shell: "/bin/bash -ic 'env' | grep NR_CLI_"
  register: cli_env_vars
  ignore_errors: yes

- set_fact:
    cli_env_dict: "{{ cli_env_dict | default({}) | combine ( { item.split('=')[0]: item.split('=')[1] } ) }}"
  with_items: "{{cli_env_vars.stdout_lines}}"
  when: cli_env_vars is defined

- name: Build final env_vars
  set_fact:
    env_vars: "{{ env_vars }} {{item.key}}={{item.value}}"
  loop: "{{ q('dict', cli_env_dict|default({})) }}"

- name: Prepare newrelic-cli option
  set_fact:
    newrelic_cli_option: "{{ newrelic_cli_option }} -y --debug"

- name: Adding optional local recipes
  set_fact:
    newrelic_cli_option: "{{ newrelic_cli_option }} --localRecipes /home/{{ansible_user}}/open-install-library-recipes/"
  when: local_recipes is defined and (local_recipes | bool == True)

- name: Adding any targeted option
  set_fact:
    newrelic_cli_option: "{{ newrelic_cli_option }} -n {{recipe_targeted}}"
  when: recipe_targeted is defined

- name: Copy all recipes
  ansible.builtin.copy:
    src: "{{ role_path }}/../../../../../../../recipes"
    dest: "/home/{{ansible_user}}/open-install-library-recipes"
    mode: '0777'
  become: true
  when: local_recipes is defined and (local_recipes | bool == True)

- name: Copy newrelic-cli if local exists
  ansible.builtin.copy:
    src: "{{ newrelic_cli_path }}"
    dest: /usr/local/bin/newrelic
    mode: '0777'
  become: true
  when: newrelic_cli_path is defined

- name: ensure tar is installed for script execution yum
  yum:
    pkg:
      - tar
    state: present
  become: yes
  ignore_errors: true

- name: ensure tar is installed for script execution dnf
  dnf:
    name: tar
    state: present
  become: yes
  ignore_errors: true

- name: Install newrelic-cli
  shell: "curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | sudo bash"
  when: newrelic_cli_path is not defined

- name: Display CLI version
  shell: "/usr/local/bin/newrelic version"
  become: true

- name: Export NEW_RELIC_EMAIL_CONTINUE
  shell: "echo export NEW_RELIC_EMAIL_CONTINUE=N >> ~/.bashrc"

- block:
  - name: Run recipe, expect failure
    shell: "sudo -E {{ env_vars }} /usr/local/bin/newrelic install {{newrelic_cli_option}} -c {{ recipe_content_url }}"
    async: 600
    register: output
    become: true
    ignore_errors: true
  - fail:
      msg: "The recipe installed when it was expected to fail:{{ output.stderr }}"
    when: output is not failed
  - fail:
      msg: "Failed to validate that {{ validate_output }} is in output:{{ output.stderr }}"
    when: validate_output is defined and output.stderr is not search(validate_output)
  when: command_should_fail == True

- block:
  - name: Run recipe, expect success
    shell: "sudo -E {{ env_vars }} /usr/local/bin/newrelic install {{newrelic_cli_option}} -c {{ recipe_content_url }}"
    register: output
    async: 600
    become: true
    ignore_errors: true
  - fail:
      msg: "The recipe failed to install when it was expected to succeed:{{ output.stdout }}"
    when: output is failed
  - fail:
      msg: "Failed to validate that {{ validate_output }} is in output:{{ output.stdout }}"
    when: validate_output is defined and output.stdout is not search(validate_output)
  when: command_should_fail == False