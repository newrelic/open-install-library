---
# Parameters:
# nrql_query: A query to run against the NRQL database through the Graphql API to see if an entity is reporting
# newrelic_personal_api_key: The newrelic personal api key. It typically starts with NRAK-
# newrelic_api_url: (optional) the URL for the newrelic REST API, default to main us URL

# Testing with EU
# - set_fact:
#     newrelic_api_url: "api.eu.newrelic.com"

- fail:
    msg: "A newrelic_personal_api_key is required. Create this entry in your user config file"
  when: newrelic_personal_api_key is not defined

- fail:
    msg: "A nrql_query is required. Create this entry in your deploy config file"
  when: nrql_query is not defined

- name: Get Hostname
  set_fact:
    hostname_value: "{{ansible_hostname}}"

- name: Set hostname if required
  set_fact:
    nrql_query: "{{ nrql_query | replace('HOSTNAME', hostname_value) }}"
  when: '"HOSTNAME" in nrql_query'

- name: Set default newrelic api url
  set_fact:
    newrelic_api_url: "api.newrelic.com"
  when: newrelic_api_url is undefined
- name: Ensure https api url
  set_fact:
    newrelic_api_url: "https://{{ newrelic_api_url }}"
  when: not newrelic_api_url | regex_search('^https', ignorecase=True)

- debug:
    msg: "Using newrelic_api_url:{{ newrelic_api_url }}"

# Query if entity is reporting
- block:
  - name: Create payload
    template:
      src: entity-search.source.gql
      dest: "{{ playbook_dir }}/entity-search.gql"
  - name: Prepare POST payload for graphql
    set_fact:
      gql_content: "{{ lookup('file', '{{playbook_dir}}/entity-search.gql') | replace('\n', ' ') }}"
  - name: Create payload file
    template:
      src: gql-query.source.json
      dest: "{{ playbook_dir }}/gql-query.json"
  - name: Query entity search
    shell: "curl -sX POST '{{ newrelic_api_url }}/graphql' \
      -H 'Api-Key:{{ newrelic_personal_api_key }}' \
      -L -H 'Content-Type: application/json' \
      -d @{{ playbook_dir }}/gql-query.json"
    register: output
    retries: 10
    delay: 15
    until: output is not failed and (output.stdout | from_json | json_query('data.actor.entitySearch.results.entities[0].reporting') | bool)
  delegate_to: localhost

- name: Parse output
  set_fact: 
    is_reporting: "{{ output.stdout | from_json | json_query(query) }}"
  vars:
    query: "data.actor.entitySearch.results.entities[0].reporting"

- name: Assert entity is reporting
  fail:
    msg: "An entity is NOT reporting with query:'{{ nrql_query }}'"
  when: is_reporting is not defined or is_reporting == "" or is_reporting == false
