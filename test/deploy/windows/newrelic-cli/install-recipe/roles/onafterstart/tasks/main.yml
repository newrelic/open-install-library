---
# Parameters:
# recipe_content_url: A recipe URL in a raw format, for example "https://api.github.com/repos/newrelic/open-install-library/contents/recipes/newrelic/infrastructure/amazonlinux2.yml"
# newrelic_personal_api_key: The newrelic personal api key. It typically starts with NRAK-
# newrelic_account_id: (optional) The newrelic account id
# newrelic_region: (optional) The newrelic region. Typically "US".
# newrelic_cli_path: (optional) The newrelic-cli to use instead of using latest published
# command_should_fail: (optional) Should the newrelic install command fail? False by default.
# validate_output: (optional) An array of Strings that must appear in stdout for this test to pass.

- name: Prepare command_should_fail option
  when: command_should_fail is not defined
  set_fact:
    command_should_fail: False

- fail:
    msg: "A newrelic_personal_api_key is required. Create this entry in your user config file"
  when: newrelic_personal_api_key is not defined

- fail:
    msg: "A recipe_content_url is required. Create this entry in your deploy config file"
  when: recipe_content_url is not defined

- name: Prepare environment variables for newrelic-cli execution
  set_fact:
    env_vars: "$env:NEW_RELIC_API_KEY=\"{{ newrelic_personal_api_key }}\"; $env:NEW_RELIC_CLI_PRERELEASEFEATURES=\"ALLOW\""

- name: Adding newrelic accountId environment variable
  set_fact:
    env_vars: "{{ env_vars }}; $env:NEW_RELIC_ACCOUNT_ID=\"{{ newrelic_account_id }}\""
  when: newrelic_account_id is defined

- name: Adding newrelic region environment variable
  set_fact:
    env_vars: "{{ env_vars }}; $env:NEW_RELIC_REGION=\"{{ newrelic_region|upper }}\""
  when: newrelic_region is defined

- name: Prepare newrelic-cli option
  set_fact:
    newrelic_cli_option: "-y --debug"

- name: Adding optional local recipes
  set_fact:
    newrelic_cli_option: "{{ newrelic_cli_option }} --localRecipes C:\\Temp\\open-install-library-recipes\\"
  when: local_recipes is defined and (local_recipes | bool == True)

- name: Copy all recipes
  ansible.windows.win_copy:
    src: "{{ role_path }}/../../../../../../../recipes"
    dest: "C:\\Temp\\open-install-library-recipes"
    mode: '0777'
  when: local_recipes is defined and (local_recipes | bool == True)

- name: Copy newrelic-cli if local exists
  ansible.windows.win_copy:
    src: "{{ newrelic_cli_path }}"
    dest: '%SystemRoot%\System32\newrelic.exe'
    mode: '0777'
  when: newrelic_cli_path is defined

- name: Install newrelic cli
  win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
    (New-Object System.Net.WebClient).DownloadFile("https://github.com/newrelic/newrelic-cli/releases/latest/download/NewRelicCLIInstaller.msi", "$env:TEMP\NewRelicCLIInstaller.msi");
    msiexec.exe /qn /i "$env:TEMP\NewRelicCLIInstaller.msi" | Out-Null;
  when: newrelic_cli_path is not defined

- block:
  - name: Run recipe, expect failure
    win_shell: |
      {{ env_vars }}; newrelic install {{newrelic_cli_option}} -c {{ recipe_content_url }};
    register: output
    ignore_errors: true
  - fail:
      msg: "The recipe installed when it was expected to fail:{{ output.stderr }}"
    when: output is not failed
  - fail:
      msg: "Failed to validate that {{ validate_output }} is in output:{{ output.stderr }}"
    when: validate_output is defined and output.stderr is not search(validate_output)
  when: command_should_fail == True

- block:
  - name: Run recipe, expect success
    win_shell: |
      {{ env_vars }}; newrelic install {{newrelic_cli_option}} -c {{ recipe_content_url }};
    register: output
    ignore_errors: true
  - fail:
      msg: "The recipe failed to install when it was expected to succeed:{{ output.stdout }}"
    when: output is failed
  - fail:
      msg: "Failed to validate that {{ validate_output }} is in output:{{ output.stdout }}"
    when: validate_output is defined and output.stdout is not search(validate_output)
  when: command_should_fail == False