name: postgres-open-source-integration
displayName: Postgres Open Source Integration
description: New Relic install recipe for default Postgres Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-postgresql

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - postgres

# CLI runs process detection; this is used to filter recipes that are appropriate for matched processes
processMatch:
  - postgres

# Matches partial list of the Log forwarding parameters
logMatch:
  - name: postgresql
    file: /var/log/postgresql/postgresql*.log

validationNrql: "SELECT count(*) from PostgresSample where hostname like '{{.HOSTNAME}}' FACET entityGuid SINCE 10 minutes ago"

inputVars:
  - name: "NR_CLI_USERNAME"
    prompt: "Postgres Username"
  - name: "NR_CLI_PASSWORD"
    prompt: "Postgres Password"
  - name: "NR_CLI_DATABASE"
    prompt: "Postgres Database (default: postgres)"
    default: "postgres"
  - name: "NR_CLI_PORT"
    prompt: "Postgres Port (default: 5432)"
    default: 5432
  - name: "NR_CLI_SSL"
    prompt: "Use SSL to connect? (true/false)"
  - name: "NR_CLI_CERT_AUTH_FILE"
    prompt: "Certificate Authority file (if applicable)"
  - name: "NR_CLI_TRUST_SERVER_CERTIFICATE"
    prompt: "Trust certificate? (true/false)"
  - name: "NR_CLI_CLIENT_CERT_FILE"
    prompt: "Client Certificate file (if applicable)"
  - name: "NR_CLI_CERT_KEY"
    prompt: "PEM key file (if applicable)"

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - taks: assert_pre_req
        - task: setup

    assert_pre_req:
      cmds:
        - |
          SERVICE_EXIST=$(sudo systemctl status newrelic-infra.service | grep "Active" | wc -l)
          if [ $SERVICE_EXIST -eq 0 ]; then
            echo "The newrelic-infra agent service is NOT installed on the host, but is required to install this integration." >> /dev/stderr
            exit 1
          fi

    setup:
      label: "Installing postgresql integration..."
      cmds:
        - |
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
        - |
          sudo apt-get update
        - |
          sudo apt-get install nri-postgresql -y
        - |
          if [ -f /etc/newrelic-infra/integrations.d/postgresql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/postgresql-config.yml;
          fi
        - | 
          sudo tee /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.postgresql

          instances:
            # A name for the collection
            - name: postgres
              command: all_data
              arguments:
                # The username for the postgres instance. Required.
                username: {{.NR_CLI_USERNAME}}
                # The password for the postgres instance. Required.
                password: {{.NR_CLI_PASSWORD}}
                # The hostname for the postgres instance. Defaults to localhost.
                hostname: localhost
                # The database to connect to on the postgres instance. Defaults to postgres.
                database: {{.NR_CLI_DATABASE}}
                # The port of the postgres instance. If PgBouncer is being used,
                # use the port it is running on. Defaults to 5432
                port: {{.NR_CLI_PORT}}
                # Collection List can be either a JSON array, a JSON object, or the string literal 'ALL'.
                #
                # If it is a JSON array, it will be interpreted as a list of database names to
                # collect all related metrics from. This will collect metrics for each database
                # specified, as well as all tables and indexes that belong to that database.
                # Example:
                # collection_list: '["postgres"]'
                #
                # If it is a JSON object, you can more finely tune the entities that are collected.
                # Only the entities that are specified in the object will be collected. No automatic
                # discovery will be performed.
                # The levels of JSON are database name -> schema name -> table name -> index name
                # Example:
                # collection_list: '{"postgres":{"public":{"pg_table1":["pg_index1","pg_index2"],"pg_table2":[]}}}'
                #
                # If it is the string literal 'ALL', it will collect metrics for all databases, schemas, tables, and indexes
                # Example:
                collection_list: 'ALL'
                # True if database lock metrics should be collected
                # Note: requires that the `tablefunc` extension be installed on the public schema
                # of the database where lock metrics will be collected.
                collect_db_lock_metrics: false
                # True if SSL is to be used. Defaults to false.
                enable_ssl: {{.NR_CLI_SSL}}
                # True if the SSL certificate should be trusted without validating.
                # Setting this to true may open up the monitoring service to MITM attacks.
                # Defaults to false.
                trust_server_certificate: {{.NR_CLI_TRUST_SERVER_CERTIFICATE}}
                ssl_root_cert_location: {{.NR_CLI_CERT_AUTH_FILE}}
                ssl_cert_location: {{.NR_CLI_CLIENT_CERT_FILE}}
                ssl_key_location: {{.NR_CLI_CERT_KEY}}
                timeout: 10

                # custom_metrics_query: >-
                #   select
                #     'rows_inserted' as "metric_name",
                #     'delta' as "metric_type",
                #     sd.tup_inserted as "metric_value",
                #     sd.datid as "database_id"
                #   from pg_stat_database sd;
          EOT
         
        - sudo systemctl restart newrelic-infra.service
