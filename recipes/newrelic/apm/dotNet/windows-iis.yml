# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: dotnet-agent-installer
displayName: .NET Agent
description: New Relic install recipe for .NET application on Windows
repository: https://github.com/newrelic/newrelic-dotnet-agent

installTargets:
  - type: application
    os: windows

keywords:
  - Apm
  - .NET
  - dotnet
  - aspnet
  - core

processMatch: []

preInstall:
  requireAtDiscovery: |
    powershell -command '
    $iisEnabled = Get-WindowsOptionalFeature -Online -FeatureName IIS-WebServer | select State
    if ($iisEnabled.State -ne "Enabled") {
      # IIS is not installed
      exit 3
    }

    # IIS is installed
    exit 0
    '
    
validationNrql: "SELECT count(*) FROM NrIntegrationError WHERE purpose = 'New Relic CLI configuration validation' AND hostname like '{{.HOSTNAME}}%' since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''dotnet''"'

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify_continue
        - task: assert_admin_perms
        - task: stop
        - task: remove_any_previous
        - task: assert_required_powershell
        - task: download
        - task: install
        - task: configure
        - task: start
        - task: cli_validate
        - task: ensure_sites_started

    verify_continue:
      cmds:
        - |
          powershell -command '
          Write-Host ""
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=                                   Warning                                    ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=       This installation will automatically restart IIS upon completion.      ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host ""
          Write-Host "If you are not hosting your .NET application using IIS please see our other installation options:"
          Write-Host "https://docs.newrelic.com/docs/agents/net-agent/installation/install-net-agent-windows/."
          Write-Host ""
          # If NEW_RELIC_ASSUME_YES is set to true, will not prompt input URL
          $NEW_RELIC_ASSUME_YES = "{{.NEW_RELIC_ASSUME_YES}}"
          if ($NEW_RELIC_ASSUME_YES -ieq "false") {
            WHILE ($true) {
              Write-Host "Do you want to install the .NET Agent Y/N (default: Y)? " -NoNewLine
              $NEW_RELIC_CONTINUE = $Host.UI.ReadLine()
              if ([string]::IsNullOrWhiteSpace($NEW_RELIC_CONTINUE))
              {
                $NEW_RELIC_CONTINUE = "y"
              }

              if ($NEW_RELIC_CONTINUE -ieq "n") {
                Write-Host "Exiting the installation..."
                exit 130 # often used to represent Ctrl+C.
              }
              elseif ($NEW_RELIC_CONTINUE -ieq "y") {
                Write-Host "Starting installation of the New Relic .NET Agent..."
                break
              }

              Write-Host "Please type y or n only."
            }
          }
          '
    assert_admin_perms:
      cmds:
        - |
          powershell -command '
          $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          if (! $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            Write-Host -ForegroundColor Red "The installation for the .NET Agent on Windows must be run in Powershell with Administrator permissions. Please restart Powershell in Administrator, and re-run the newrelic-cli command."
            exit 131
          }
          '

    stop:
      cmds:
        - |
          powershell -command '
          function Stop-IIS {
            try {
              iisreset /stop | Out-Null
              return $true
            }
            catch { return $false }
          }
          
          for ($tries = 0; $tries -lt 30; $tries++) {
            if ((Stop-IIS)) {
              break
            }
            # Try to stop IIS again after a delay
            Start-Sleep -s 2
          }
          '

    remove_any_previous:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              try {
                $keyData = Get-Item -Path HKLM:\$key -ErrorAction SilentlyContinue
                $name = $keyData.GetValue("DisplayName")
                if ($name -and $name -match $Match) {
                  $keyId = Split-Path $key -Leaf
                  $uninstallIds.Add($keyId) | Out-Null
                }
              }
              catch {}
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "New Relic .NET Agent"
          foreach ($uninstallId in $uninstallIds) {
            Start-Process -FilePath msiexec.exe -ArgumentList "/qn","/x $uninstallId" -Wait -NoNewWindow
          }
          '

    assert_required_powershell:
      cmds:
        - |
          powershell -command '
          $powershellEnabled = ""
          try {
            $powershellEnabled = Get-Command -All powershell.exe | select Name
          }
          catch { }
          if ($powershellEnabled.Name -ne "powershell.exe") {
            Write-Host -ForegroundColor Red "Powershell is required. Please start Powershell in Administrator, and re-run the newrelic-cli command."
            exit 131;
          }
          '

    download:
      cmds:
        - |
          powershell -command '
          try {
            [Net.ServicePointManager]::SecurityProtocol = "tls";
            [Net.ServicePointManager]::SecurityProtocol = "tls12, tls"
          }
          catch {}

          try {
            (New-Object System.Net.WebClient).DownloadFile("{{.NEW_RELIC_DOWNLOAD_URL}}dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi", "$env:TEMP\NewRelicDotNetAgent_x64.msi")
          }
          catch {
            $baseException = $_.Exception.GetBaseException()
            Write-Host -ForegroundColor Red "Failed to download New Relic .NET Agent ($($baseException.Message))"
            $errorCode = 24 # unknown download error

            switch ($baseException) {
              { $_ -is [Net.WebException] }            { $errorCode = 25 } # web download error
              { $_ -is [IO.IOException] }              { $errorCode = 26 } # file io error
              { $_ -is [UnauthorizedAccessException] } { $errorCode = 26 } # file io error
            }

            exit $errorCode
          }
          '

    install:
      cmds:
        - |
          powershell -command '
          $installCode = (Start-Process -FilePath msiexec.exe -ArgumentList "/qn","/i","$env:TEMP\NewRelicDotNetAgent_x64.msi","NR_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}}" -PassThru -Wait -NoNewWindow -RedirectStandardOutput ".\NUL").ExitCode
          
          # https://docs.microsoft.com/en-us/windows/win32/msi/error-codes
          if (@(0,1641,3010) -NotContains $installCode) {
            Write-Host -ForegroundColor Red "Failed to install New Relic .NET Agent ($installCode)"
            exit $installCode # install code error
          }
          '
        - echo "New Relic .NET Agent installed"

    configure:
      cmds:
        - |
          powershell -command '
          $configPath = "$env:ProgramData\New Relic\.NET Agent\newrelic.config"
          $file = Resolve-Path("$configPath")
          $xdoc = New-Object System.Xml.XmlDocument
          $xdoc.PreserveWhitespace = $true
          $xdoc.Load($file)
          if ($xdoc.GetElementsByTagName("application")[0].HasChildNodes) {
            $xdoc.configuration.application.RemoveAll()
          }
          if ("{{.NEW_RELIC_REGION}}" -like "STAGING") {
            $xdoc.configuration.service.SetAttribute("host", "staging-collector.newrelic.com")
          }
          if ($xdoc.GetElementsByTagName("distributedTracing")[0]) {
            $xdoc.configuration.distributedTracing.SetAttribute("enabled", "true")
            $xdoc.configuration.distributedTracing.SetAttribute("excludeNewrelicHeader", "false")
          }
          else {
            $child = $xdoc.CreateElement("distributedTracing", "urn:newrelic-config")
            $child.SetAttribute("enabled", "true")
            $child.SetAttribute("excludeNewrelicHeader", "false")
            $xdoc.configuration.AppendChild($child) | Out-Null
          }
          if ("$env:HTTPS_PROXY") {
            $uri = ""
            try {
              $uri = [System.Uri]::new("$env:HTTPS_PROXY")
            }
            catch { }
            if ($uri) {
              $proxy = $xdoc.GetElementsByTagName("proxy")[0]
              if ($proxy) {
                $xdoc.configuration.service.RemoveChild($proxy) | Out-Null
              }
              $child = $xdoc.CreateElement("proxy", "urn:newrelic-config")
              $child.SetAttribute("host", $uri.Host)
              $child.SetAttribute("port", $uri.Port)
              if ($uri.PathAndQuery -and $uri.PathAndQuery -ne "/" ) {
                $child.SetAttribute("uriPath", $uri.PathAndQuery)
              }
              if ($uri.UserInfo) {
                $parts = $uri.UserInfo.Split(":")
                if ($parts.Length -ge 1) {
                  $child.SetAttribute("user", $parts[0])
                }
                if ($parts.Length -ge 2) {
                  $password = $uri.UserInfo.Substring($uri.UserInfo.IndexOf(":")+1)
                  $child.SetAttribute("password", $password);
                }
              }
              $xdoc.configuration.service.AppendChild($child) | Out-Null
            }
          }

          $xdoc.Save($configPath)
          '
        - echo "New Relic .NET Agent configured"

    start:
      cmds:
        - |
          powershell -command '
          function Start-IIS {
            try {
              iisreset /start | Out-Null
              return $true
            }
            catch { return $false }
          }
          
          for ($tries = 0; $tries -lt 30; $tries++) {
            if ((Start-IIS)) {
              break
            }
            # Try to start IIS again after a delay
            Start-Sleep -s 2
          }
          '

    cli_validate:
      cmds:
        - |
          powershell -command '
          $env:NEW_RELIC_REGION="{{.NEW_RELIC_REGION}}"
          $env:NEW_RELIC_API_KEY="{{.NEW_RELIC_API_KEY}}"
          $env:NEW_RELIC_ACCOUNT_ID="{{.NEW_RELIC_ACCOUNT_ID}}"
          $env:NEW_RELIC_LICENSE_KEY="{{.NEW_RELIC_LICENSE_KEY}}"
          Start-Process -FilePath "C:\Program Files\New Relic\New Relic CLI\newrelic.exe" -ArgumentList "diagnose","validate" -Wait -NoNewWindow -RedirectStandardOutput ".\NUL"
          '

    ensure_sites_started:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          try {
            Get-WebURL "IIS:\Sites\*" | Out-Null
          }
          catch {}
          '
