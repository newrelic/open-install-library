# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: dotnet-agent-installer
displayName: .NET Agent
description: New Relic install recipe for instrumenting .NET applications on Linux
repository: https://github.com/newrelic/newrelic-dotnet-agent

installTargets:
  - type: application
    os: linux
    kernelArch: x86_64

keywords:
  - Apm
  - .NET
  - dotnet
  - aspnet
  - core

processMatch: []

preInstall:
  requireAtDiscovery: |
    # Check if .NET is installed
    # There are three packages for .NET: dotnet-runtime, aspnetcore-runtime and dotnet-sdk
    # Checking both debian and rpm based distros together
    
    set +e # disable fail on error

    DPKG_DOTNET=$(dpkg -l dotnet-runtime* aspnetcore-runtime* dotnet-sdk* 2>/dev/null | grep -E 'dotnet-runtime.*|aspnetcore-runtime.*|dotnet-sdk.*' | wc -l)
    YUM_DOTNET=$(sudo yum -q list installed dotnet-runtime* aspnetcore-runtime* dotnet-sdk* 2>/dev/null | grep -E 'dotnet-runtime.*|aspnetcore-runtime.*|dotnet-sdk.*' | wc -l)

    set -e # enable fail on error

    # if any are false, .NET is installed
    if [[ $DPKG_DOTNET -eq 0 && $YUM_DOTNET -eq 0  ]]
    then
        # no cleanup since we didn't create any artifacts
        exit 3
    fi

    # .NET is installed, get .NET introspector tooling
    TMP_DIR=$(mktemp -dq /tmp/newrelic.XXXXXX)
    curl -s https://download.newrelic.com/install/dotnet/introspector/latest/dotnet-is-linux-x64.gz -o ${TMP_DIR}/dotnet-is-linux-x64.gz >/dev/null
    zcat ${TMP_DIR}/dotnet-is-linux-x64.gz > ${TMP_DIR}/nri-lsi-dotnet
    chmod u+x $TMP_DIR/nri-lsi-dotnet >/dev/null
    
    # Record all .NET processes
    ${TMP_DIR}/nri-lsi-dotnet -c | tr -d '[]' | tr ',' '\n' > ${TMP_DIR}/dotnet_processes.txt
    processCount=$(cat ${TMP_DIR}/dotnet_processes.txt | wc -w)
    if [[ "$processCount" -eq 0 ]]; then
      rm -rf $TMP_DIR >/dev/null
      exit 3
    fi

    # Record all systemd services and check if any are .NET
    systemctl list-unit-files --type service | awk '{ print $1 }' > ${TMP_DIR}/all_services.txt
    for sn in `cat ${TMP_DIR}/all_services.txt`; do
        mainpid=$(systemctl show --property MainPID $sn 2> /dev/null | sed 's/MainPID=//')
        for dnp in `cat ${TMP_DIR}/dotnet_processes.txt`; do
            
            # .NET systemd service found!
            if [[ "$mainpid" -eq "$dnp" ]]
            then
              rm -rf $TMP_DIR >/dev/null
              exit 0
            fi
        done
    done
    
    # .NET processes found, but none are running as systemd services :(
    rm -rf $TMP_DIR >/dev/null
    exit 132

validationNrql: "SELECT count(*) FROM NrIntegrationError WHERE purpose = 'New Relic CLI configuration validation' AND hostname like '{{.HOSTNAME}}%' since 10 minutes ago"

successLinkConfig:
   type: EXPLORER
   filter: '"`tags.language` = ''dotnet''"'

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify_continue
        - task: assert_pre_req
        - task: add_gnupg2_if_required
        - task: introspector
        - task: gather_services
        - task: stop
        - task: remove_any_previous
        - task: install
        - task: configure
        - task: start
        - task: cli_validate
        - task: ensure_sites_started
        - task: cleanup_temp_files

    verify_continue:
      cmds:
        - |
          YELLOW='\033[0;33m'
          NOCOLOR='\033[0m'
          echo -e "${YELLOW}
          ================================================================================
          =                                                                              =
          =                                   Warning                                    =
          =                                                                              =
          =       This installation will automatically restart all systemd services      =
          =       that run .NET applications upon completion.                            =
          =                                                                              =
          ================================================================================
          ${NOCOLOR}"
          echo "
          If you are hosting your .NET application differently then check out our other installation options:
          https://docs.newrelic.com/docs/agents/net-agent/installation/install-net-agent-linux/.
          "
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            while :; do
              echo -n "Do you want to install the .NET Agent Y/N (default: Y)? "
              read answer
              echo ""
              NEW_RELIC_CONTINUE=$(echo "${answer^^}" | cut -c1-1)
              if [[ -z "$NEW_RELIC_CONTINUE" ]]; then
                NEW_RELIC_CONTINUE="Y"
              fi
              if [[ "$NEW_RELIC_CONTINUE" == "N" ]]; then
                echo "Exiting the installation"
                exit 130
              fi
              if [[ "$NEW_RELIC_CONTINUE" == "Y" ]]; then
                break
              fi
              echo -e "Please type Y or N only."
            done
          fi

    assert_pre_req:
      cmds:
        - |
          IS_SYSTEMCTL_INSTALLED=$(which systemctl | wc -l)
          if [ "$IS_SYSTEMCTL_INSTALLED" -eq 0 ]
          then
            echo "This installation recipe for the New Relic .NET agent on Linux only supports services managed by 'systemd'." >&2
            exit 20
          fi
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="grep:10 sed:11 awk:12 cat:13 tee:14"

          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)

            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo "This installation recipe for the New Relic .NET agent on Linux requires '${tool}' to be installed." >&2
              exit ${code}
            fi
          done
          
    add_gnupg2_if_required:
      cmds:
        - |
          if [ $(({{.DEBIAN_VERSION}})) -ge 10 ]; then
            sudo apt-get install gnupg2 -y
          fi
      vars:
        DEBIAN_VERSION:
          sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release

    introspector:
      cmds:
        - rm -rf /tmp/dotnet-introspector
        - curl -s https://download.newrelic.com/install/dotnet/introspector/latest/dotnet-is-linux-x64.gz -o /tmp/dotnet-is-linux-x64.gz
        - mkdir -p /tmp/dotnet-introspector
        - zcat /tmp/dotnet-is-linux-x64.gz > /tmp/dotnet-introspector/nri-lsi-dotnet
        - rm -f /tmp/dotnet-is-linux-x64.gz
        - chmod -R 777 /tmp/dotnet-introspector
        # nri-lsi-dotnet output looks like "[18044,26844,38720,31448]"
        - /tmp/dotnet-introspector/nri-lsi-dotnet -c | tr -d '[]' | tr ',' '\n' > /tmp/dotnet-introspector/dotnet_processes.txt
        - |
          processCount=$(cat /tmp/dotnet-introspector/dotnet_processes.txt | wc -w)
          if [[ "$processCount" -eq 0 ]]; then
            YELLOW='\033[0;33m'
            NOCOLOR='\033[0m'
            echo -e "${YELLOW}
            No dotnet processes were found.  Please ensure the services you want to instrument
            are running in systemd and try running this installer again.
            ${NOCOLOR}\n"
            exit 3
          fi
        - echo "Done with introspector"

    gather_services:
      cmds:
        - systemctl list-unit-files --type service | awk '{ print $1 }' > /tmp/dotnet-introspector/all_services.txt
        - cat /dev/null > /tmp/dotnet-introspector/dotnet_services.txt
        - |
          for sn in `cat /tmp/dotnet-introspector/all_services.txt`; do
              mainpid=$(systemctl show --property MainPID $sn 2> /dev/null | sed 's/MainPID=//')
              for dnp in `cat /tmp/dotnet-introspector/dotnet_processes.txt`; do
                  if [[ "$mainpid" -eq "$dnp" ]]
                  then
                    echo Found .NET service: $sn
                    echo $sn >> /tmp/dotnet-introspector/dotnet_services.txt
                  fi
              done
          done
        - |
          if [[ ! -s "/tmp/dotnet-introspector/dotnet_services.txt" ]]
          then
            YELLOW='\033[0;33m'
            NOCOLOR='\033[0m'
            echo -e "${YELLOW}
            Dotnet processes were detected, but none were running under systemd.  
            Please ensure the services you want to instrument are running in systemd 
            and try running this installer again.
            ${NOCOLOR}\n"
            exit 20
          fi
        - echo "Done gathering services"

    stop:
      cmds:
        - |
          for sn in `cat /tmp/dotnet-introspector/dotnet_services.txt`; do
            sudo systemctl stop $sn
          done
        - echo "Done stopping services"

    remove_any_previous:
      ignore_error: true
      cmds:
        - |
          IS_YUM_INSTALLED=$(which yum 2>&1 || true)
          if [[ -z "$IS_YUM_INSTALLED" ]]
          then
            sudo DEBIAN_FRONTEND=noninteractive dpkg -r newrelic-netcore20-agent >/dev/null 2>&1 || true
            sudo DEBIAN_FRONTEND=noninteractive dpkg -r newrelic-dotnet-agent >/dev/null 2>&1 || true
          else
            sudo yum remove newrelic-netcore20-agent -y >/dev/null 2>&1 || true
            sudo yum remove newrelic-dotnet-agent -y >/dev/null 2>&1 || true
          fi

        - |
          for sn in `cat /tmp/dotnet-introspector/dotnet_services.txt`; do
            if [[ -f "/etc/systemd/system/$sn.d/nr_dotnet_agent_env.conf" ]]
            then
              sudo rm -f /etc/systemd/system/$sn.d/nr_dotnet_agent_env.conf
            fi

            sudo rmdir /etc/systemd/system/$sn.d >/dev/null 2>&1 || true
          done
        - echo "Done removing previous versions of the agent"

    install:
      cmds:
        - |
          IS_YUM_INSTALLED=$(which yum 2>&1 || true)
          if [[ -z "$IS_YUM_INSTALLED" ]]
          then
            echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | sudo tee /etc/apt/sources.list.d/newrelic.list > /dev/null
            wget -q -O- {{.NEW_RELIC_DOWNLOAD_URL}}548C16BF.gpg | sudo apt-key add -
            sudo apt-get -o Acquire::Check-Valid-Until=false update >/dev/null
            sudo apt-get install newrelic-dotnet-agent -y -qq > /dev/null
          else
            sudo rpm -Uvh http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm || true
            cat << REPO | sudo tee "/etc/yum.repos.d/newrelic-dotnet-agent.repo" > /dev/null
          [newrelic-dotnet-agent-repo]
          name=New Relic .NET Core packages for Enterprise Linux
          baseurl=http://yum.newrelic.com/pub/newrelic/el7/\$basearch
          enabled=1
          gpgcheck=1
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-NewRelic
          REPO
            sudo yum install newrelic-dotnet-agent -q -y
          fi
        - echo "New Relic .NET agent installed"

    configure:
      cmds:
        - |
          for sn in `cat /tmp/dotnet-introspector/dotnet_services.txt`; do
            if [[ ! -d "/etc/systemd/system/${sn}.d" ]]
            then
              sudo mkdir -p "/etc/systemd/system/${sn}.d"
            fi
            cat << EOF | sudo tee "/etc/systemd/system/${sn}.d/nr_dotnet_agent_env.conf" >/dev/null
          [Service]
          Environment="CORECLR_ENABLE_PROFILING=1"
          Environment="CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A}"
          Environment="CORECLR_NEWRELIC_HOME=/usr/local/newrelic-dotnet-agent"
          Environment="CORECLR_PROFILER_PATH=/usr/local/newrelic-dotnet-agent/libNewRelicProfiler.so"
          Environment="NEW_RELIC_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}}"
          Environment="NEW_RELIC_APP_NAME=${sn}"
          Environment="NEW_RELIC_APPLICATION_LOGGING_ENABLED=true"
          Environment="NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED=true"
          EOF

            nr_region="{{.NEW_RELIC_REGION}}"
            if [[ "${nr_region^^}" == "STAGING" ]]; then
              echo Detected running in STAGING, configuring agent to report to staging
              echo "Environment=\"NEW_RELIC_HOST=staging-collector.newrelic.com\"" |sudo tee -a "/etc/systemd/system/${sn}.d/nr_dotnet_agent_env.conf" >/dev/null
            fi

          done
        - echo "New Relic .NET agent configured"

    start:
      cmds:
        - sudo systemctl daemon-reload
        - |
          for sn in `cat /tmp/dotnet-introspector/dotnet_services.txt`; do
            echo "Restarting $sn"
            sudo systemctl restart $sn
          done
        - echo "Services restarted"

    cli_validate:
      cmds:
        - sudo NEW_RELIC_REGION={{.NEW_RELIC_REGION}} NEW_RELIC_API_KEY={{.NEW_RELIC_API_KEY}} NEW_RELIC_ACCOUNT_ID={{.NEW_RELIC_ACCOUNT_ID}} NEW_RELIC_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}} /usr/local/bin/newrelic diagnose validate

    ensure_sites_started:
      ignore_error: true
      cmds:
        # Wait to give the services we just (re)started time to get going
        - |
          sleep 10
        # Get the current PIDs of the services
        - |
          for sn in `cat /tmp/dotnet-introspector/dotnet_services.txt`; do
            pid=$(systemctl show --property MainPID $sn 2>/dev/null | sed 's/MainPID=//')
            echo "${pid}" >> /tmp/dotnet-introspector/dotnet_service_pids.txt
          done
        # For each PID, get the port(s) it is listening on by inspecting /proc/${pid}/fd (open files)
        # and comparing them with open TCP ports in /proc/net/tcp
        - |
          realAwk=$(readlink -f $(which awk))
          awkArgs=''
          if [[ "${realAwk}" == "/usr/bin/gawk" ]]; then
            awkArgs="--non-decimal-data"
          fi
          for pid in `cat /tmp/dotnet-introspector/dotnet_service_pids.txt`; do
            for socket in $(sudo ls -l /proc/${pid}/fd |grep socket |sed 's/.*\[//' |sed 's/\]//' |uniq); do
              hexport=$(sudo grep ${socket} /proc/net/tcp |awk '{print $2}' |cut -d':' -f2)
              if [[ "${hexport}" -ne "" ]]; then
                echo "${hexport}" | awk $awkArgs '{ printf("%d\n","0x"$1) }' | tee -a /tmp/dotnet-introspector/ports.txt
              fi
            done
          done
        # Get the root (/) URL for the service listening on each port found
        - |
          for pn in `cat /tmp/dotnet-introspector/ports.txt`; do
            echo "Pinging http://localhost:$pn"
            for i in {1..3}; do
              sleep 1
              curl --silent http://localhost:$pn > /dev/null || true
            done
          done
        - echo "Done pinging sites"

    cleanup_temp_files:
      ignore_error: true
      cmds:
        - rm -rf /tmp/dotnet-introspector
        - echo "Done cleaning up"
