# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: java-agent-installer
displayName: Java Agent Installer
description: New Relic install recipe for instrumenting Java applications
repository: https://github.com/newrelic/newrelic-java-agent

installTargets:
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "rhel"
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "debian"

dependencies:
  - infrastructure-agent-installer

keywords:
  - Apm
  - java

logMatch:
  - name: tomcat-versioned-catalina
    file: /opt/tomcat/*tomcat*/logs/catalina.out
  - name: tomcat-catalina-opt
    file: /opt/*tomcat*/logs/catalina.out
  - name: tomcat-catalina-var
    file: /var/log/*tomcat*/catalina.out

processMatch:
  - java.*org.apache.catalina.startup.Bootstrap

preInstall:
  requireAtDiscovery: |
    user=$(whoami)
    if [[ "$user" != "root" ]]; then
      echo -e "This script must be run as root." >&2
      exit 132
    fi

    cutInstalled=$(which cut 2> /dev/null)
    if [[ -z "$cutInstalled" ]]; then
      echo -e "This installation recipe for the New Relic Java Agent on Linux requires 'cut' to be installed." >&2
      exit 132
    fi

    # Map of tool names to the associated error code
    required_tools_and_error_codes="grep:132 cat:132 tee:132 date:132"
    for tuple in $required_tools_and_error_codes; do
      tool=$(echo ${tuple} |cut -d':' -f1)
      code=$(echo ${tuple} |cut -d':' -f2)
      toolInstalled=$(which ${tool} | wc -l)
      if [[ "$toolInstalled" -eq 0 ]]; then
        echo -e "This installation recipe for the New Relic Java Agent on Linux requires '${tool}' to be installed." >&2
        exit ${code}
      fi
    done

    exit 0

validationNrql: "SELECT count(*) FROM NrIntegrationError WHERE purpose = 'New Relic CLI configuration validation' AND hostname like '{{.HOSTNAME}}%' since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''java''"'

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify-continue
        - task: get-introspector
        - task: reset-install
        - task: install-instrument-script
        - task: add-on-host-integration
        - task: cli_validate

    verify-continue:
      cmds:
        - |
          YELLOW='\033[0;33m'
          NOCOLOR='\033[0m'
          echo -e "${YELLOW}
          ================================================================================================
          =                                                                                              =
          =                                           Warning                                            =
          =                                                                                              =
          =         This installation will periodically check for new Tomcat processes to monitor.       =
          =    Any new Tomcat processes started after this installation will report data to New Relic.   =
          =                                                                                              =
          =                                                                                              =
          ================================================================================================
          ${NOCOLOR}"
          echo "
          If you prefer to instrument your Java application differently then check out our other installation options:
          https://docs.newrelic.com/docs/agents/java-agent/installation/install-java-agent/.
          "
          if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
            while :; do
              echo -n "Do you want to install the Java Agent Y/N (default: Y)? "
              read answer
              echo ""
              if [[ -z "$answer" ]]; then
                exit 0
              fi
              firstChar=$(echo "${answer^^}" | cut -c1-1)
              if [[ "$firstChar" == "N" ]]; then
                echo "Exiting the installation"
                exit 130
              fi
              if [[ "$firstChar" == "Y" ]]; then
                exit 0
              fi
              echo -e "Please type Y or N only."
            done
          fi

    get-introspector:
      cmds:
        - |
          echo "Retrieving Java Introspector..."
          isYumInstalled=$(which yum 2>&1 || true)
          if [[ -n "$isYumInstalled" ]]; then
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_x86_64.rpm > /dev/null
            yum install -y -q nri-introspector-java_x86_64.rpm > /dev/null || true
          else
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_amd64.deb > /dev/null
            apt-get install -y -qq ./nri-introspector-java_amd64.deb > /dev/null || true
          fi
          while :; do
            isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
            if [ "$isJavaLsiRunning" -eq 0 ]
            then
              break
            else
              sleep 1
            fi
          done

    reset-install:
      cmds:
        - |
          if [ -f /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml ]; then
            rm -f /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml
          fi
          if [ -d /etc/newrelic-java ]; then
            rm -rf /etc/newrelic-java
          fi
          mkdir -p /etc/newrelic-java/install

    install-instrument-script:
      cmds:
        - |
          sudo touch /etc/newrelic-java/install/.pids
          sudo chmod 755 /etc/newrelic-java/install/.pids
          sudo touch /etc/newrelic-java/install/.docker_pids
          sudo chmod 755 /etc/newrelic-java/install/.docker_pids

          # FYI message to user about containerNames - may not be necessary
          # we don't ask for user input if all processes are within docker
          isDockerRunning=$(sudo ps aux | grep docker | grep -v grep | wc -l)
          if [ $isDockerRunning -gt 0 ]; then
            for CONTAINER in $(sudo docker ps -q);
            do
              sudo docker top $CONTAINER | awk '{print $2}' | sed '1d' >> /etc/newrelic-java/install/.docker_pids
            done
            sudo sort -o /etc/newrelic-java/install/.docker_pids /etc/newrelic-java/install/.docker_pids
            echo "The following container names will be used for your New Relic APMs:$(sudo docker ps -q | xargs sudo docker inspect --format '{{"{{"}}.Name{{"}}"}}' | tr '/' '  ')"
          fi

          # get java processes not in docker, use this to prompt for user input
          sudo nri-lsi-java -list | tr "," "\n" | tr -d "[ " | tr -d " ]" >> /etc/newrelic-java/install/.pids
          sudo sort -o /etc/newrelic-java/install/.pids /etc/newrelic-java/install/.pids

          # set here to replace in script as a default
          defaultAppName='Tomcat'
          nonDockerPids=$(sudo comm -3 /etc/newrelic-java/install/.pids /etc/newrelic-java/install/.docker_pids | wc -l)
          if [ $nonDockerPids -gt 0 ]; then
            if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
              echo -n "Enter app name for non-containerized Tomcat instances (default: '$defaultAppName'): "
              read -r answer
              if [[ -n $answer ]]; then
                defaultAppName=$answer
              fi
            fi
          fi
          sudo rm -f /etc/newrelic-java/install/.pids
          sudo rm -f /etc/newrelic-java/install/.docker_pids

          tee -a /etc/newrelic-java/dynamic-attach.sh > /dev/null <<"EOT"
          #!/bin/bash
          build_stdout_json() {
            message=$1
            cat << EOF
            {
               "name": "java-dynamic-attach",
               "protocol_version": "3",
               "integration_version": "1.0.0",
               "metrics": [
                 {
                   "event_type": "JavaDynamicAttachSample",
                   "provider": "com.newrelic.virtuoso",
                   "provider.executableName": "$message"
                 }
               ]
            }
          EOF
          }
          license={{.NEW_RELIC_LICENSE_KEY}}
          region={{.NEW_RELIC_REGION}}
          appName=DEFAULT_APP_NAME
          pattern='org.apache.catalina.startup.Bootstrap'


          # installation/currently running lsi safeguards
          isJavaLsiInstalled=$(which nri-lsi-java 2>&1 || true)
          if [[ -z "$isJavaLsiInstalled" ]]; then
            (exit 0)
          fi
          isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
          if [ "$isJavaLsiRunning" -gt 0 ]; then
            (exit 0)
          fi

          createIgnoreFiles=0
          currentTime=$(date +%s)
          if [ ! -f /etc/newrelic-java/install/.ignored_created_time ]; then
            createIgnoreFiles=1
          else
            fileIgnoredCreatedTime=$(sudo cat /etc/newrelic-java/install/.ignored_created_time 2> /dev/null || echo 0)
            if [ $(($currentTime-$fileIgnoredCreatedTime)) -gt $((60*60*24)) ]; then
              # Ignore file older than 1 day, purge and re-create new ones
              createIgnoreFiles=1
            fi
          fi
          if [[ $createIgnoreFiles -eq 1 ]]; then
            # Reset ignore pids file
            sudo rm -f /etc/newrelic-java/install/.ignored_pids
            sudo touch /etc/newrelic-java/install/.ignored_pids
            sudo chmod -R 755 /etc/newrelic-java/install/.ignored_pids
            # Reset timestamp for next cleanup
            sudo rm -f /etc/newrelic-java/install/.ignored_created_time
            sudo touch /etc/newrelic-java/install/.ignored_created_time
            sudo chmod -R 755 /etc/newrelic-java/install/.ignored_created_time
            # Keep current timestamp to know when to purge next
            echo $currentTime >> /etc/newrelic-java/install/.ignored_created_time
          fi

          # capture docker pids if docker is running
          isDockerRunning=$(sudo ps aux | grep docker | grep -v grep | wc -l)
          if [ $isDockerRunning -gt 0 ]; then
            if [ -f /etc/newrelic-java/install/.docker_pids ]; then
              rm -f /etc/newrelic-java/install/.docker_pids
            fi
            sudo touch /etc/newrelic-java/install/.docker_pids
            sudo chmod 777 /etc/newrelic-java/install/.docker_pids
            for CONTAINER in $(sudo docker ps -q);
            do
              sudo docker top $CONTAINER | awk '{print $2}' | sed '1d' >> /etc/newrelic-java/install/.docker_pids
            done
            sudo sort -o /etc/newrelic-java/install/.docker_pids /etc/newrelic-java/install/.docker_pids
          fi

          # capture all java PIDs using intropector
          sudo rm -f /etc/newrelic-java/install/.last_detected_pids
          sudo touch /etc/newrelic-java/install/.last_detected_pids
          sudo chmod 755 /etc/newrelic-java/install/.last_detected_pids
          sudo nri-lsi-java -list | tr "," "\n" | tr -d "[ " | tr -d " ]" >> /etc/newrelic-java/install/.last_detected_pids
          sudo sort -o /etc/newrelic-java/install/.last_detected_pids /etc/newrelic-java/install/.last_detected_pids

          for JAVA_PID in $(sudo cat /etc/newrelic-java/install/.last_detected_pids);
          do
            # check if we should ignore, either from previous failure or previous successful attachment
            ignoredPid=$(cat /etc/newrelic-java/install/.ignored_pids | grep $JAVA_PID | grep -v grep | wc -l)
            if [[ $ignoredPid -eq 0 ]]; then
              INTROSPECTION_DATA=$(sudo nri-lsi-java -introspect ${JAVA_PID})
              isMatchingPattern=$(echo $INTROSPECTION_DATA | grep $pattern | grep -v grep | wc -l)
              if [[ $isMatchingPattern -gt 0 ]]; then
                if [[ -f /etc/newrelic-java/install/.docker_pids && $(cat /etc/newrelic-java/install/.docker_pids | grep $JAVA_PID | grep -v grep | wc -l) -gt 0 ]]; then
                  CONTAINER_ID=$(sudo docker ps -q | xargs sudo docker inspect --format '{{"{{"}}.State.Pid{{"}}"}}, {{"{{"}}.ID{{"}}"}}' | grep $JAVA_PID | sed  -n -e "s|$JAVA_PID, ||p")
                  if [[ $CONTAINER_ID ]]; then
                    dockerAppName=$(sudo docker inspect --format '{{"{{"}}.Name{{"}}"}}' $CONTAINER_ID | tr -d '/')
                    echo $(build_stdout_json "Running Tomcat process detected in container '$dockerAppName' ($CONTAINER_ID)")
                    YUM_INSTALLED=$(sudo docker exec $CONTAINER_ID sh -c "which yum 2>&1 || true")
                    if [[ $YUM_INSTALLED ]]; then
                      sudo docker exec $CONTAINER_ID sh -c "curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_x86_64.rpm > /dev/null"
                      sudo docker exec $CONTAINER_ID sh -c "yum install -y -q nri-introspector-java_x86_64.rpm > /dev/null || true"
                    else
                      sudo docker exec $CONTAINER_ID sh -c "curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_amd64.deb > /dev/null"
                      sudo docker exec $CONTAINER_ID sh -c "apt-get install -y -qq ./nri-introspector-java_amd64.deb > /dev/null || true"
                    fi
                    echo $(build_stdout_json "Attaching agent to Tomcat process in '$dockerAppName'...")
                    output=$(sudo docker exec $CONTAINER_ID sh -c "nri-lsi-java -apm 1 -appName $dockerAppName -license $license -region $region 2> /dev/null | wc -l")
                    if [[ $output -gt 0 ]]; then
                      echo $(build_stdout_json "Attaching agent to Tomcat process in '$dockerAppName'...failed!")
                    else
                      echo $(build_stdout_json "Attaching agent to Tomcat process in '$dockerAppName'...complete!")
                    fi
                    echo $JAVA_PID >> /etc/newrelic-java/install/.ignored_pids
                  else
                    echo $(build_stdout_json "Skipping instrumentation of process id $JAVA_PID: could not determine owning container")
                  fi
                else
                  echo $(build_stdout_json "Attaching agent to Tomcat process with PID $JAVA_PID...")
                  output=$(sudo nri-lsi-java -apm $JAVA_PID -appName $appName -license $license -region $region 2> /dev/null | wc -l)
                  if [[ $output -gt 0 ]]; then
                    echo $(build_stdout_json "Attaching agent to Tomcat process with PID $JAVA_PID...failed!")
                  else
                    echo $(build_stdout_json "Attaching agent to Tomcat process with PID $JAVA_PID..complete!")
                  fi
                  echo $JAVA_PID >> /etc/newrelic-java/install/.ignored_pids
                fi
              fi
            fi
          done
          fi

          # cleanup
          if [ -f /etc/newrelic-java/install/.docker_pids ]; then
            sudo rm -f /etc/newrelic-java/install/.docker_pids
          fi

          (exit 0)
          EOT
          sudo sed -i "s/DEFAULT_APP_NAME/$defaultAppName/g" /etc/newrelic-java/dynamic-attach.sh
          sudo chmod 700 /etc/newrelic-java/dynamic-attach.sh

    add-on-host-integration:
      cmds:
        - |
          tee -a /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml > /dev/null <<"EOT"
          integrations:
            - name: java-dynamic-attach
              exec: ./dynamic-attach.sh
              working_dir: /etc/newrelic-java
              interval: 60s
              timeout: 1200s
              integration_user: root

          EOT
          sudo chmod 755 /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml

    cli_validate:
      cmds:
        - sudo NEW_RELIC_REGION={{.NEW_RELIC_REGION}} NEW_RELIC_API_KEY={{.NEW_RELIC_API_KEY}} NEW_RELIC_ACCOUNT_ID={{.NEW_RELIC_ACCOUNT_ID}} NEW_RELIC_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}} NEW_RELIC_INSIGHTS_INSERT_KEY={{.NEW_RELIC_INSIGHTS_INSERT_KEY}} /usr/local/bin/newrelic diagnose validate &> /dev/null
