# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: java-agent-installer
displayName: Java Agent
description: New Relic install recipe for instrumenting Java applications
repository: https://github.com/newrelic/newrelic-java-agent

installTargets:
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "rhel"
  - type: application
    os: linux
    kernelArch: x86_64
    platformFamily: "debian"

dependencies:
  - infrastructure-agent-installer

keywords:
  - Apm
  - java

processMatch:
  - java.*org.apache.catalina.startup.Bootstrap
  - java.*\/opt.*\/wildfly.*\/jboss-modules\.jar
  - java.*\/opt.*jetty.*\/.*start.jar
  - java.*org.eclipse.jetty.xml.XmlConfiguration

preInstall:
  requireAtDiscovery: |
    user=$(whoami)
    if [[ "$user" != "root" ]]; then
      echo -e "This script must be run as root." >&2
      exit 132
    fi

    cutInstalled=$(which cut 2> /dev/null)
    if [[ -z "$cutInstalled" ]]; then
      echo -e "This installation recipe for the New Relic Java Agent on Linux requires 'cut' to be installed." >&2
      exit 132
    fi

    # Map of tool names to the associated error code
    required_tools_and_error_codes="grep:132 cat:132 tee:132 date:132"
    for tuple in $required_tools_and_error_codes; do
      tool=$(echo ${tuple} |cut -d':' -f1)
      code=$(echo ${tuple} |cut -d':' -f2)
      toolInstalled=$(which ${tool} | wc -l)
      if [[ "$toolInstalled" -eq 0 ]]; then
        echo -e "This installation recipe for the New Relic Java Agent on Linux requires '${tool}' to be installed." >&2
        exit ${code}
      fi
    done

    exit 0

validationNrql: "SELECT count(*) from Transaction WHERE host like '{{.HOSTNAME}}%' facet entityGuid since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''java''"'

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify-continue
        - task: get-introspector
        - task: reset-install
        - task: install-instrument-script
        - task: add-on-host-integration
        - task: cli_validate

    verify-continue:
      cmds:
        - |
          YELLOW='\033[0;33m'
          NOCOLOR='\033[0m'
          echo -e "${YELLOW}
          ===================================================================================
          =                                                                                 =   
          =                                     Warning                                     =
          =                                                                                 =    
          =      This installation will detect new java application server processes        =   
          =        and will automatically start reporting data to New Relic                 =      
          =                                                                                 =   
          =                                                                                 =   
          =================================================================================== 
          ${NOCOLOR}"
          echo "
          If you prefer to instrument your Java application differently then check out our other installation options:
          https://docs.newrelic.com/docs/agents/java-agent/installation/install-java-agent/.
          "
          if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
            while :; do
              echo -n "Do you want to install the Java Agent Y/N (default: Y)? "
              read answer
              echo ""
              if [[ -z "$answer" ]]; then
                exit 0
              fi
              firstChar=$(echo "${answer^^}" | cut -c1-1)
              if [[ "$firstChar" == "N" ]]; then
                echo "Exiting the installation"
                exit 130
              fi
              if [[ "$firstChar" == "Y" ]]; then
                exit 0
              fi
              echo -e "Please type Y or N only."
            done
          fi

    get-introspector:
      cmds:
        - |
          echo "Retrieving Java Introspector..."
          isYumInstalled=$(which yum 2>&1 || true)
          if [[ -n "$isYumInstalled" ]]; then
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_x86_64.rpm > /dev/null
            yum install -y -q nri-introspector-java_x86_64.rpm > /dev/null || true
          else
            curl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_amd64.deb > /dev/null
            apt-get install -y -qq ./nri-introspector-java_amd64.deb > /dev/null || true
          fi
          while :; do
            isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
            if [ "$isJavaLsiRunning" -eq 0 ]
            then
              break
            else
              sleep 1
            fi
          done

    reset-install:
      cmds:
        - |
          if [ -f /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml ]; then
            rm -f /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml
          fi
          if [ -d /etc/newrelic-java ]; then
            rm -rf /etc/newrelic-java
          fi
          mkdir -p /etc/newrelic-java/install

    install-instrument-script:
      cmds:
        - |
          sudo touch /etc/newrelic-java/install/.pids
          sudo chmod 755 /etc/newrelic-java/install/.pids
          sudo touch /etc/newrelic-java/install/.docker_pids
          sudo chmod 755 /etc/newrelic-java/install/.docker_pids
          sudo touch /etc/newrelic-java/install/.non_docker_pids
          sudo chmod 755 /etc/newrelic-java/install/.non_docker_pids

          TOMCAT_PATTERN='org.apache.catalina.startup.Bootstrap'
          defaultTomcatAppName="Tomcat"

          JBOSS_PATTERN='\/opt.*wildfly.*\/.*jboss-modules.jar'
          defaultJbossAppName="Wildfly"

          JETTY_PATTERN='\/opt.*jetty.*\/.*start.jar\|org.eclipse.jetty.xml.XmlConfiguration'
          defaultJettyAppName="Jetty"

          # collect any docker processIds
          isDockerRunning=$(sudo ps aux | grep docker | grep -v grep | wc -l)
          if [ $isDockerRunning -gt 0 ]; then
            isContainerRunning=$(sudo docker ps -q | wc -l)
            if [ $isContainerRunning -gt 0 ]; then
              for CONTAINER in $(sudo docker ps -q);
              do
                sudo docker top $CONTAINER | awk '{print $2} {print $3}' | sed '1,2d' >> /etc/newrelic-java/install/.docker_pids
              done
              sudo sort -o /etc/newrelic-java/install/.docker_pids /etc/newrelic-java/install/.docker_pids
            fi
          fi

          # get all java processes, then determine which (if any) are running outside of docker
          sudo nri-lsi-java -list | tr "," "\n" | tr -d "[ " | tr -d " ]" >> /etc/newrelic-java/install/.pids
          sudo sort -o /etc/newrelic-java/install/.pids /etc/newrelic-java/install/.pids
          sudo comm -23 /etc/newrelic-java/install/.pids /etc/newrelic-java/install/.docker_pids >> /etc/newrelic-java/install/.non_docker_pids

          if [[ ! -z /etc/newrelic-java/install/.non_docker_pids ]]; then
            defaultJbossSetByUser="false"
            defaultTomcatSetByUser="false"
            defaultJettySetByUser="false"

            for pid in $(cat /etc/newrelic-java/install/.non_docker_pids); do
              introspectionData=$(sudo nri-lsi-java -introspect ${pid})
              isMatchingTomcat=$(echo $introspectionData | grep "$TOMCAT_PATTERN" | grep -v grep | wc -l)
              isMatchingJboss=$(echo $introspectionData | grep "$JBOSS_PATTERN" | grep -v grep | wc -l)
              isMatchingJetty=$(echo $introspectionData | grep "$JETTY_PATTERN" | grep -v grep | wc -l)
              if [[ "{{.NEW_RELIC_ASSUME_YES}}" != "true" ]]; then
                if [[ $isMatchingJboss -gt 0  && "$defaultJbossSetByUser" != "true" ]]; then
                  echo -n "Enter app name for non-containerized Jboss instances (default: '$defaultJbossAppName'): "
                  read -r answer
                  if [[ -n $answer ]]; then
                    defaultJbossAppName=$answer
                    defaultJbossSetByUser="true"
                  fi
                elif [[ $isMatchingTomcat -gt 0  && "$defaultTomcatSetByUser" != "true" ]]; then
                  echo -n "Enter app name for non-containerized Tomcat instances (default: '$defaultTomcatAppName'): "
                  read -r answer
                  if [[ -n $answer ]]; then
                    defaultTomcatAppName=$answer
                    defaultTomcatSetByUser="true"
                  fi
                elif [[ $isMatchingJetty -gt 0 && "defaultJettySetByUser" != "true" ]]; then
                  echo -n "Enter app name for non-containerized Jetty instances (default: '$defaultJettyAppName'): "
                  read -r answer
                  if [[ -n $answer ]]; then
                    defaultJettyAppName=$answer
                    defaultJettySetByUser="true"
                  fi                
                fi
              fi
            done
          fi

          sudo rm -f /etc/newrelic-java/install/.pids
          sudo rm -f /etc/newrelic-java/install/.docker_pids
          sudo rm -f /etc/newrelic-java/install/.non_docker_pids



          tee -a /etc/newrelic-java/dynamic-attach.sh > /dev/null << "EOT"
          #!/bin/bash
          TOMCAT_PATTERN='org.apache.catalina.startup.Bootstrap'
          JBOSS_PATTERN='\/opt.*wildfly.*\/.*jboss-modules.jar'
          JETTY_PATTERN='\/opt.*jetty.*\/.*start.jar\|org.eclipse.jetty.xml.XmlConfiguration'

          build_stdout_json() {
            message=$1
            cat << EOF
            {
               "name": "java-dynamic-attach",
               "protocol_version": "3",
               "integration_version": "1.0.0",
               "metrics": [
                 {
                   "event_type": "JavaDynamicAttachSample",
                   "provider": "com.newrelic.virtuoso",
                   "provider.executableName": "${message}"
                 }
               ]
            }
          EOF
          }

          create_deployment_marker() {
            javaPid=$1
            appName=$2
            deploymentTimestamp=$3
            api_key={{.NEW_RELIC_API_KEY}}
            javaAgentVersion=JAVA_AGENT_VERSION

            appId=$(curl -sX GET "DEFAULT_API_URL/v2/applications.json" -H "Api-Key:${api_key}" -d "filter[name]=${appName}" | sed 's/.*"id":"\{0,1\}\([^,"]*\)"\{0,1\}.*/\1/')
            >/dev/null curl -sX POST "DEFAULT_API_URL/v2/applications/$appId/deployments.json" \
            -H "Api-Key:${api_key}" \
            -H "Content-Type: application/json" \
            --data-binary @- << EOF
            {
              "deployment": {
              "revision": "v${javaAgentVersion}",
              "changelog": "Attached java agent v${javaAgentVersion} to PID ${javaPid} for APM Service '${appName}'",
              "user": "New Relic Java",
              "timestamp": "${deploymentTimestamp}"
              }
            }
          EOF
            return 0
          }

          attach_to_pid() {
            javaPid=$1
            appServerType=$2
            license={{.NEW_RELIC_LICENSE_KEY}}
            region={{.NEW_RELIC_REGION}}

            defaultTomcatAppName=DEFAULT_TOMCAT_APP_NAME
            defaultJbossAppName=DEFAULT_JBOSS_APP_NAME
            defaultJettyAppName=DEFAULT_JETTY_APP_NAME
            
            appServerEchoName="Tomcat"
            appName=$defaultTomcatAppName
            
            if [[ "$appServerType" == "JBOSS" ]]; then
              appServerEchoName="JBoss"
              appName=$defaultJbossAppName
            elif [[ "$appServerType" == "JETTY" ]]; then
              appServerEchoName="Jetty"
              appName=$defaultJettyAppName
            fi

            echo $(build_stdout_json "Attaching agent to $appServerEchoName process with PID $javaPid...")
            deploymentTimestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            successfulAttachGrepPattern='\"level\":\"INFO\",\"label\":\"Url\"'
            attachOutput=$(sudo NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED=true nri-lsi-java -apm $javaPid -appName $appName -license $license -region $region | grep ${successfulAttachGrepPattern} | grep -v grep  | wc -l)
            if [[ $attachOutput -gt 0 ]]; then
              echo $(build_stdout_json "Attaching agent to $appServerEchoName process with PID $javaPid..complete!")
              create_deployment_marker $javaPid $appName $deploymentTimestamp
            else
              echo $(build_stdout_json "Attaching agent to $appServerEchoName process with PID $javaPid...failed!")
            fi

            return 0
          }

          attach_to_containerized_pid() {
            javaPid=$1
            containerId=$2
            license={{.NEW_RELIC_LICENSE_KEY}}
            region={{.NEW_RELIC_REGION}}
            local dockerAppName=$(sudo docker inspect --format '{{"{{"}}.Name{{"}}"}}' $containerId | tr -d '/')
            local dockerExec="sudo docker exec -u root ${containerId} sh -c"

            echo $(build_stdout_json "Running java process detected in container '$dockerAppName' ($containerId)")
            yumInstalled=$(eval "$dockerExec" "which yum 2>&1 || true")
            if [[ $yumInstalled ]]; then
              eval "$dockerExec" "COMMAND_QUOTEcurl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_x86_64.rpm > /dev/nullCOMMAND_QUOTE"
              eval "$dockerExec" "COMMAND_QUOTEyum install -y -q nri-introspector-java_x86_64.rpm > /dev/null || trueCOMMAND_QUOTE"
            else
              eval "$dockerExec" "COMMAND_QUOTEcurl -s -O https://download.newrelic.com/install/java/introspector/latest/nri-introspector-java_amd64.deb > /dev/nullCOMMAND_QUOTE"
              eval "$dockerExec" "COMMAND_QUOTEapt-get install -y -qq ./nri-introspector-java_amd64.deb > /dev/null || trueCOMMAND_QUOTE"
            fi
            echo $(build_stdout_json "Detecting java pid in '$dockerAppName'...")
            javaPidsInContainer=$(eval "$dockerExec" "COMMAND_QUOTEnri-lsi-java -listCOMMAND_QUOTE" | tr "," "\n" | tr -d "[ " | tr -d " ]" )
            for pidInContainer in $javaPidsInContainer; do
              introspectionData=$(eval "$dockerExec" "COMMAND_QUOTEnri-lsi-java -introspect ${pidInContainer}COMMAND_QUOTE")
              matchesSupportedAppServer=$(echo $introspectionData | grep "$TOMCAT_PATTERN\|$JBOSS_PATTERN" | grep -v grep | wc -l)

              if [[ $matchesSupportedAppServer -gt 0 ]]; then
                deploymentTimestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                userId=$(eval "$dockerExec" "COMMAND_QUOTEps auxCOMMAND_QUOTE" | awk '{ print $2" " $1}' | grep "^$pidInContainer " | awk '{ print $2 }')
                echo $(build_stdout_json "Attaching agent to application server with pid $pidInContainer owned by $userId in '$dockerAppName'...")
                successfulAttachGrepPattern='\"level\":\"INFO\",\"label\":\"Url\"'
                attachOutput=$(sudo docker exec -u $userId ${containerId} sh -c "NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED=true nri-lsi-java -apm $pidInContainer -appName $dockerAppName -license $license -region $region" | grep ${successfulAttachGrepPattern} | grep -v grep  | wc -l)
                if [[ $attachOutput -gt 0 ]]; then
                  echo $(build_stdout_json "Attaching agent to application server in '$dockerAppName'...complete!")
                  create_deployment_marker $javaPid $dockerAppName $deploymentTimestamp
                else
                  echo $(build_stdout_json "Attaching agent to application server in '$dockerAppName'...failed!")
                fi
              fi
            done

            return 0
          }

          capturePidsRunningInDocker() {
            # capture docker pids if docker is running
            local isDockerRunning=$(sudo ps aux | grep docker | grep -v grep | wc -l)
            if [ $isDockerRunning -gt 0 ]; then
              if [ -f /etc/newrelic-java/install/.docker_pids ]; then
                rm -f /etc/newrelic-java/install/.docker_pids
              fi
              sudo touch /etc/newrelic-java/install/.docker_pids
              sudo chmod 777 /etc/newrelic-java/install/.docker_pids
              for container in $(sudo docker ps -q); do
                sudo docker top $container | awk '{print $2} {print $3}' | sed '1,2d' >>/etc/newrelic-java/install/.docker_pids
              done
              sudo sort -o /etc/newrelic-java/install/.docker_pids /etc/newrelic-java/install/.docker_pids
            fi
          }

          captureAllJavaPids() {
            # capture all java PIDs using intropector
            sudo rm -f /etc/newrelic-java/install/.last_detected_pids
            sudo touch /etc/newrelic-java/install/.last_detected_pids
            sudo chmod 755 /etc/newrelic-java/install/.last_detected_pids
            sudo nri-lsi-java -list | tr "," "\n" | tr -d "[ " | tr -d " ]" >>/etc/newrelic-java/install/.last_detected_pids
            sudo sort -o /etc/newrelic-java/install/.last_detected_pids /etc/newrelic-java/install/.last_detected_pids
          }

          resetIgnoredPidFile() {
            # reset ignore file once daily
            local createIgnoreFiles=0
            local currentTime=$(date +%s)
            if [ ! -f /etc/newrelic-java/install/.ignored_created_time ]; then
              createIgnoreFiles=1
            else
              local fileIgnoredCreatedTime=$(sudo cat /etc/newrelic-java/install/.ignored_created_time 2>/dev/null || echo 0)
              if [ $(($currentTime - $fileIgnoredCreatedTime)) -gt $((60 * 60 * 24)) ]; then
                # Ignore file older than 1 day, purge and re-create new ones
                createIgnoreFiles=1
              fi
            fi

            if [[ $createIgnoreFiles -eq 1 ]]; then
              # Reset ignore pids file
              sudo rm -f /etc/newrelic-java/install/.ignored_pids
              sudo touch /etc/newrelic-java/install/.ignored_pids
              sudo chmod -R 755 /etc/newrelic-java/install/.ignored_pids

              # Reset timestamp for next cleanup
              sudo rm -f /etc/newrelic-java/install/.ignored_created_time
              sudo touch /etc/newrelic-java/install/.ignored_created_time
              sudo chmod -R 755 /etc/newrelic-java/install/.ignored_created_time

              # Keep current timestamp to know when to purge next
              echo "$currentTime" >>/etc/newrelic-java/install/.ignored_created_time
            fi
          }

          verifyLsiNotRunning() {
            # installation/currently running lsi safeguards
            local isJavaLsiInstalled=$(which nri-lsi-java 2>&1 || true)
            if [[ -z "$isJavaLsiInstalled" ]]; then
              (exit 0)
            fi

            local isJavaLsiRunning=$(sudo ps aux | grep nri-lsi-java | grep -v grep | wc -l)
            if [ "$isJavaLsiRunning" -gt 0 ]; then
              (exit 0)
            fi

            return 0
          }

          main() {
            verifyLsiNotRunning
            resetIgnoredPidFile
            capturePidsRunningInDocker
            captureAllJavaPids

            for javaPid in $(sudo cat /etc/newrelic-java/install/.last_detected_pids); do
              # check if we should ignore, either from previous failure or previous successful attachment
              ignoredPid=$(cat /etc/newrelic-java/install/.ignored_pids | grep $javaPid | grep -v grep | wc -l)

              if [[ $ignoredPid -eq 0 ]]; then
                introspectionData=$(sudo nri-lsi-java -introspect ${javaPid})
                isMatchingTomcat=$(echo $introspectionData | grep "$TOMCAT_PATTERN" | grep -v grep | wc -l)
                isMatchingJboss=$(echo $introspectionData | grep "$JBOSS_PATTERN" | grep -v grep | wc -l)
                isMatchingJetty=$(echo $introspectionData | grep "$JETTY_PATTERN" | grep -v grep | wc -l)

                if [[ $isMatchingTomcat -gt 0 || $isMatchingJboss -gt 0 || $isMatchingJetty -gt 0  ]]; then
                  if [[ -f /etc/newrelic-java/install/.docker_pids && $(cat /etc/newrelic-java/install/.docker_pids | grep $javaPid | grep -v grep | wc -l) -gt 0 ]]; then
                    # containerized app server                    
                    if [[ $isMatchingJetty -gt 0 ]]; then
                      echo $(build_stdout_json "Skipping instrumentation of process id $javaPid: cannot instrument containerized Jetty processes")
                    else 
                      # look at all containerIds, find which containerId owns the process
                      for containerId in $(sudo docker ps -q); do
                        containerIdOwningProcess=$(docker inspect $containerId --format '{{"{{"}}.State.Pid{{"}}"}}, {{"{{"}}.ID{{"}}"}}' | grep $javaPid | sed -n -e "s|$javaPid, ||p")
                        if [[ -z $containerIdOwningProcess ]]; then
                          # if containerId is blank, try to find the owning container using the java process->parentPID relationship from `docker top`
                          containerParentPid=$(sudo docker top $containerId | awk '{ print $2"::"$3 }' | grep "$javaPid::" | grep -v grep | sed -n -e "s/$javaPid:://p")
                          containerIdOwningProcess=$(sudo docker inspect $containerId --format '{{"{{"}}.State.Pid{{"}}"}}, {{"{{"}}.ID{{"}}"}}' | grep $containerParentPid | sed -n -e "s|$containerParentPid, ||p")
                        fi
                        # proceed once we determining which container owns process
                        if [[ ! -z $containerIdOwningProcess ]]; then
                          break;
                        fi
                      done
                    fi
                    if [[ -z  $containerIdOwningProcess ]]; then
                      echo $(build_stdout_json "Skipping instrumentation of process id $javaPid: could not determine owning container")
                    else
                      attach_to_containerized_pid $javaPid $containerIdOwningProcess
                    fi
                  else
                    # non-containerized app server
                    if [[ $isMatchingJboss -gt 0 ]]; then
                      attach_to_pid $javaPid JBOSS
                    elif [[ $isMatchingJetty -gt 0 ]]; then
                      attach_to_pid $javaPid JETTY
                    else
                      attach_to_pid $javaPid TOMCAT                  
                    fi
                  fi
                fi

                echo $javaPid >>/etc/newrelic-java/install/.ignored_pids
              fi
            done

            # cleanup
            if [ -f /etc/newrelic-java/install/.docker_pids ]; then
              sudo rm -f /etc/newrelic-java/install/.docker_pids
            fi

            (exit 0)
          }


          ###########
          #
          ###########
          main
          EOT

          sudo sed -i 's/COMMAND_QUOTE/\\"/g' /etc/newrelic-java/dynamic-attach.sh
          sudo sed -i "s/DEFAULT_TOMCAT_APP_NAME/$defaultTomcatAppName/g" /etc/newrelic-java/dynamic-attach.sh
          sudo sed -i "s/DEFAULT_JBOSS_APP_NAME/$defaultJbossAppName/g" /etc/newrelic-java/dynamic-attach.sh
          sudo sed -i "s/DEFAULT_JETTY_APP_NAME/$defaultJettyAppName/g" /etc/newrelic-java/dynamic-attach.sh

          NEW_RELIC_API_URL=$(echo -n 'https://api.newrelic.com')
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            NEW_RELIC_API_URL=$(echo -n 'https://staging-api.newrelic.com')
          fi
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i eu | wc -l) -gt 0 ]; then
            NEW_RELIC_API_URL=$(echo -n 'https://api.eu.newrelic.com')
          fi
          sudo sed -i "s,DEFAULT_API_URL,$NEW_RELIC_API_URL,g" /etc/newrelic-java/dynamic-attach.sh

          javaAgentVersion=$(nri-lsi-java -agentVersion | grep -Po '"agentVersion":.*"' | awk -F': ' '{print $2}' | tr -d '"')
          sudo sed -i "s/JAVA_AGENT_VERSION/$javaAgentVersion/g" /etc/newrelic-java/dynamic-attach.sh

          sudo chmod 700 /etc/newrelic-java/dynamic-attach.sh

    add-on-host-integration:
      cmds:
        - |
          tee -a /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml > /dev/null <<"EOT"
          integrations:
            - name: java-dynamic-attach
              exec: ./dynamic-attach.sh
              working_dir: /etc/newrelic-java
              interval: 60s
              timeout: 1200s
              integration_user: root

          EOT
          sudo chmod 755 /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml

    cli_validate:
      cmds:
        - sudo NEW_RELIC_REGION={{.NEW_RELIC_REGION}} NEW_RELIC_API_KEY={{.NEW_RELIC_API_KEY}} NEW_RELIC_ACCOUNT_ID={{.NEW_RELIC_ACCOUNT_ID}} NEW_RELIC_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}} /usr/local/bin/newrelic diagnose validate &> /dev/null


postInstall:
  info: |2
      ⚙️  The Java Agent configuration file can be found in /etc/newrelic-infra/integrations.d/java-dynamic-attach.yml
      Edit this file to make changes or configure advanced features for this integration.  See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/host-integrations/infrastructure-integrations-sdk/specifications/host-integrations-standard-configuration-format/
