# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: super-agent
displayName: New Relic Super Agent
description: New Relic install recipe for the Super Agent
repository: https://github.com/newrelic/newrelic-super-agent

installTargets:
  - type: host
    os: linux
    platform: amazon
    platformFamily: rhel
  - type: host
    os: linux
    platform: amazon
    platformFamily: rhel
    platformVersion: "2"
  - type: host
    os: linux
    platform: amazon
    platformFamily: rhel
    platformVersion: "2023"
  - type: host
    os: linux
    platform: "centos"
  - type: host
    os: linux
    platform: "redhat"

keywords:
  - SuperAgent
  - OpenTelemetry
  - OTel
  - Infrastructure
  - Agent
  - Linux
  - CentOS 7
  - CentOS 8
  - RHEL 7
  - RHEL 8
  - RHEL 9
  - Amazon Linux
  - Amazon Linux AMI
  - Amazon Linux 2
  - Amazon Linux 2023

processMatch: []

preInstall:
  requireAtDiscovery: |
      IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
      if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
        echo "docker detected with cgroup, unsupported" >&2
        exit 131
      fi
      IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
      if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
        echo "docker detected with environ, unsupported" >&2
        exit 131
      fi
      if [ -f /.dockerenv ] ; then
        echo "docker detected with .dockerenv, unsupported" >&2
        exit 131
      fi
      IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
      if [ $IS_WSL_CONTAINER -gt 0 ] ; then
        echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
        exit 131
      fi
      exit 0

  discoveryMode:
    - targeted

install:
  version: "3"
  silent: true

  vars:
    AMAZON_LINUX_VERSION:
      sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release
    REPO_DIR:
      sh: if [ {{.AMAZON_LINUX_VERSION}} = "2" ] || [ {{.AMAZON_LINUX_VERSION}} = "2023" ]; then echo "amazonlinux"; else echo "el"; fi
    ARCH:
      sh: uname -m

  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: assert_pre_req
        - task: cleanup
        - task: setup_infra_license
        - task: setup_infra_proxy
        - task: install_super_agent
        - task: update_otel_license_key
        - task: config_supervisors
        - task: config_opamp
        - task: config_host_monitoring
        - task: update_otel_mem_limit
        - task: update_otel_end_point
        - task: restart_super_agent
        - task: assert_super_agent_started
        - task: post_install

    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi      
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          if [ "{{.AMAZON_LINUX_VERSION}}" != "2" ] && [ "{{.AMAZON_LINUX_VERSION}}" != "2023" ] ; then
            REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          else
            REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.AMAZON_LINUX_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          fi
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "there is no newrelic super agent available for the distribution '{{.DISTRO_VERSION}}'." >&2
            exit 21
          fi
      vars:
        DISTRO_VERSION:
          sh: |
            rpm -E %{rhel}

    cleanup:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            rm -rf /var/db/newrelic-infra/data 2>/dev/null
          fi

    setup_infra_license:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ -f /etc/newrelic-infra.yml ]; then
              sed -i "/^staging/d" /etc/newrelic-infra.yml
              sed -i "/^enable_process_metrics/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_enabled/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_port/d" /etc/newrelic-infra.yml
              sed -i "/^license_key/d" /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/,/^\S/{ /^\S/!d }' /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/d' /etc/newrelic-infra.yml
              sed -i "/^is_secure_forward_only/d" /etc/newrelic-infra.yml
            else
              touch /etc/newrelic-infra.yml
            fi
          fi
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
              echo 'staging: true' >> /etc/newrelic-infra.yml
            fi
          
            echo 'enable_process_metrics: true' >> /etc/newrelic-infra.yml
            echo 'status_server_enabled: true' >> /etc/newrelic-infra.yml
            echo 'status_server_port: 18003' >> /etc/newrelic-infra.yml
            echo 'license_key: {{`{{NEW_RELIC_LICENSE_KEY}}`}}' >> /etc/newrelic-infra.yml
            echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> /etc/newrelic-infra.yml          
          fi

    setup_infra_proxy:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] && [ ! -z "$HTTPS_PROXY" ]; then
            sed -i "/^proxy/d" /etc/newrelic-infra.yml
            echo 'proxy: {{.HTTPS_PROXY}}' >> /etc/newrelic-infra.yml

            if ! grep -q '^proxy=' /etc/dnf/dnf.conf; then
              echo "************************************************************"
              echo "WARNING: proxy settings not detected in your dnf config"
              echo "If installation fails with a timeout, add the following line to /etc/dnf/dnf.conf and retry:"
              echo "proxy={{.HTTPS_PROXY}}"
              echo "************************************************************"
            fi
          fi

    install_super_agent:
      cmds:
        - |
          if [ "{{.AMAZON_LINUX_VERSION}}" != "2" ] && [ "{{.AMAZON_LINUX_VERSION}}" != "2023" ] ; then
            SUPER_AGENT_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          else
            SUPER_AGENT_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.AMAZON_LINUX_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          fi
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $SUPER_AGENT_REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "newrelic super agent is not available for this architecture {{.ARCH}}. See our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 131
          fi 
          INFRA_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/yum/el/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          
          curl -s $INFRA_REPO_URL -o /etc/yum.repos.d/newrelic-infra.repo
          curl -s $SUPER_AGENT_REPO_URL | sed 's/\[newrelic-infra]/\n[newrelic-super-agent]/g' >> /etc/yum.repos.d/newrelic-infra.repo
          
          yum -y -q makecache --disablerepo='*' --enablerepo='newrelic-infra' --enablerepo='newrelic-super-agent'
          yum -y -q install newrelic-super-agent
      vars:
        DISTRO_VERSION:
          sh: |
            rpm -E %{rhel}
      silent: true

    update_otel_license_key:
      cmds:
        - |
          sed -i "/^NEW_RELIC_LICENSE_KEY/d" /etc/newrelic-super-agent/newrelic-super-agent.conf
          echo 'NEW_RELIC_LICENSE_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/newrelic-super-agent/newrelic-super-agent.conf

    update_otel_mem_limit:
      cmds:
        - |
          if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
            sed -i "s/limit_mib: .*$/limit_mib: 100/g" /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    # Add OTLP Endpoint as ENV Var for the Super Agent Systemd service
    update_otel_end_point:
      cmds:
        - |
          if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
            if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
              sed -i "s/endpoint: .*$/endpoint: staging-otlp.nr-data.net:4317/g" /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
            elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
              sed -i "s/endpoint: .*$/endpoint: otlp.eu01.nr-data.net:4317/g" /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
            else
              sed -i "s/endpoint: .*$/endpoint: otlp.nr-data.net:4317/g" /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
            fi
          fi

    config_supervisors:
      cmds:
        - |
          # Remove values_file keys from config.yaml
          sed -i '/^\s*values_file:/d' /etc/newrelic-super-agent/config.yaml
          sed -i '/^\s*#\s*values_file:/d' /etc/newrelic-super-agent/config.yaml
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ] && [ "{{.NR_CLI_NRDOT}}" = "false" ] ; then
            sed -i '/^\s*agents:/s/^/#/' /etc/newrelic-super-agent/config.yaml           
          else
            sed -i 's/s*#\s*agents:/agents:/g' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ] ; then
            sed -i '/^\s*nr-infra-agent:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*agent_type: "newrelic\/com\.newrelic\.infrastructure_agent/s/^/#/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i '/^\s*#\s*nr-infra-agent:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*agent_type: "newrelic\/com\.newrelic\.infrastructure_agent/s/#//' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_NRDOT}}" = "false" ] ; then
            sed -i '/^\s*nr-otel-collector:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*agent_type: "newrelic\/io\.opentelemetry\.collector/s/^/#/' /etc/newrelic-super-agent/config.yaml 
          else
            sed -i '/^\s*#\s*nr-otel-collector:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*agent_type: "newrelic\/io\.opentelemetry\.collector/s/#//' /etc/newrelic-super-agent/config.yaml            
          fi

    config_opamp:
      cmds:
        - |
          if [ "{{.NR_CLI_FLEET_ENABLED}}" = "false" ] ; then
            sed -i '/^\s*opamp:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*endpoint: https:\/\/opamp/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*api-key:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*headers:/s/^/#/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i 's/s*#\s*opamp:/opamp:/g' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*endpoint: https:\/\/opamp/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*api-key:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*headers:/s/#//' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"staging-service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.eu.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_FLEET_ENABLED}}" != "false" ] ; then
            sed -i 's/api-key: API_KEY_HERE/api-key: {{.NEW_RELIC_LICENSE_KEY}}/g' /etc/newrelic-super-agent/config.yaml
          fi

    config_host_monitoring:
      cmds:
        - |
          if [ "{{.NR_CLI_HOST_MONITORING_SOURCE}}" = "otel" ]; then     
            echo 'is_secure_forward_only: true' >> /etc/newrelic-infra.yml
            mkdir -p /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values
            cp /etc/newrelic-super-agent/examples/values-nr-otel-collector-agent-linux-0.1.0.yaml /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
          else
            if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
              mkdir -p /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values
              cp /etc/newrelic-super-agent/examples/values-nr-otel-collector-gateway-0.1.0.yaml /etc/newrelic-super-agent/fleet/agents.d/nr-otel-collector/values/values.yaml
            fi
          fi

    restart_super_agent:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart newrelic-super-agent
          else 
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart newrelic-super-agent
            else
              /etc/init.d/newrelic-super-agent restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    assert_super_agent_started:
      cmds:
        - |
          # Ensure super agent has enough time to start
          sleep 10
          IS_AGENT_INSTALLED=$(sudo ps aux | grep newrelic-super-agent | grep -v grep | wc -l)
          if [ $IS_AGENT_INSTALLED -eq 0 ] ; then
            echo "The newrelic super agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 31
          fi
    
    post_install:
      info: |2
          ⚙️  The New Relic Super Agent configuration file can be found in /etc/newrelic-super-agent/config.yaml
