# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: super-agent
displayName: New Relic Super Agent
description: New Relic install recipe for the Super Agent
repository: https://github.com/newrelic/newrelic-super-agent

installTargets:
  - type: host
    os: linux
    platformFamily: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

keywords:
  - SuperAgent
  - OpenTelemetry
  - OTel
  - Infrastructure
  - Agent
  - Linux
  - Debian
  - jammy
  - focal
  - bionic
  - xenial
  - bullseye
  - buster

processMatch: []

preInstall:
  requireAtDiscovery: |
    IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
    if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
      echo "docker detected with cgroup, unsupported" >&2
      exit 131
    fi
    IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
    if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
      echo "docker detected with environ, unsupported" >&2
      exit 131
    fi
    if [ -f /.dockerenv ] ; then
      echo "docker detected with .dockerenv, unsupported" >&2
      exit 131
    fi
    IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
    if [ $IS_WSL_CONTAINER -gt 0 ] ; then
      echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
      exit 131
    fi
    exit 0

  discoveryMode:
    - targeted
install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: assert_pre_req
        - task: cleanup
        - task: setup_infra_license
        - task: setup_infra_proxy
        - task: log_ssl_ciphers
        - task: update_apt
        - task: install_gnupg
        - task: add_gpg_key
        - task: add_nr_source
        - task: update_apt_nr_source
        - task: install_super_agent
        - task: update_otel_license_key
        - task: update_otel_mem_limit
        - task: update_otel_end_point
        - task: config_supervisors
        - task: config_opamp
        - task: config_host_monitoring
        - task: restart_super_agent
        - task: assert_super_agent_started
        - task: post_install


    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3      
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          if [ -n "{{.DEBIAN_CODENAME}}" ]; then
            IS_AGENT_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt/dists/{{.DEBIAN_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
            if [ $IS_AGENT_AVAILABLE -eq 0 ] ; then
              echo "there is no newrelic super agent available for the distribution with codename '{{.DEBIAN_CODENAME}}'." >&2
              exit 131
            fi
          else
            if [ -n "{{.DEBIAN_VERSION_CODENAME}}" ]; then
              IS_INFRA_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt/dists/{{.DEBIAN_VERSION_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
              if [ $IS_INFRA_AVAILABLE -eq 0 ] ; then
                echo "there is no newrelic super agent available for the distribution with version codename '{{.DEBIAN_VERSION_CODENAME}}'." >&2
                exit 131
              fi
            else
              echo "there is no newrelic super agent available for the distribution, no version codename was found." >&2
              exit 131
            fi
          fi
      vars:
        DEBIAN_CODENAME:
          sh: awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release
        DEBIAN_VERSION_CODENAME:
          sh: cat /etc/os-release | grep "VERSION=\"[0-9] " | awk -F " " '{print $2}' | sed 's/[()"]//g'

    cleanup:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            rm -rf /var/db/newrelic-infra/data 2>/dev/null
          fi

    setup_infra_license:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ -f /etc/newrelic-infra.yml ]; then
              sed -i "/^staging/d" /etc/newrelic-infra.yml
              sed -i "/^enable_process_metrics/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_enabled/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_port/d" /etc/newrelic-infra.yml
              sed -i "/^license_key/d" /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/,/^\S/{ /^\S/!d }' /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/d' /etc/newrelic-infra.yml            
              sed -i "/^is_secure_forward_only/d" /etc/newrelic-infra.yml
            else
              touch /etc/newrelic-infra.yml
            fi
          fi
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
              echo 'staging: true' >> /etc/newrelic-infra.yml
            fi
            echo 'enable_process_metrics: true' >> /etc/newrelic-infra.yml
            echo 'status_server_enabled: true' >> /etc/newrelic-infra.yml
            echo 'status_server_port: 18003' >> /etc/newrelic-infra.yml
            echo 'license_key: {{.NEW_RELIC_LICENSE_KEY}}' >> /etc/newrelic-infra.yml
            echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> /etc/newrelic-infra.yml
          fi

    setup_infra_proxy:
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false"] && [ ! -z "$HTTPS_PROXY" ]; then
            sed -i "/^proxy/d" /etc/newrelic-infra.yml
            echo 'proxy: {{.HTTPS_PROXY}}' >> /etc/newrelic-infra.yml
          fi

    log_ssl_ciphers:
      cmds:
        - |
          IS_OPENSSL_INSTALLED=$(which openssl | wc -l)
          IS_SORT_INSTALLED=$(which sort | wc -l)
          IS_UNIQ_INSTALLED=$(which uniq | wc -l)
          if [ $IS_OPENSSL_INSTALLED -gt 0 ] && [ $IS_SORT_INSTALLED -gt 0 ] && [ $IS_UNIQ_INSTALLED -gt 0 ]; then
            echo "Detecting available SSL ciphers..."
            openssl ciphers -v | awk '{print " - " $2}' | sort | uniq
          fi
      ignore_error: true

    update_apt:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          OPTIONS="-o DPkg::Lock::Timeout=60 -o Acquire::Check-Valid-Until=false"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS update -yq
      silent: true
      # apt will return an error if fails to update any of its sources. Ignore these errors and let the "install_infra" task fail.
      ignore_error: true

    install_gnupg:
      cmds:
        - |
          if [ {{.HAS_GPG}} -eq 0 ] ; then
            OPTIONS="-o DPkg::Lock::Timeout=60"
            if [ ! -z "$HTTPS_PROXY" ]; then
              OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
            fi
            apt-get $OPTIONS install gnupg2 -y
          fi
      vars:
        HAS_GPG:
          sh: command -v gpg | wc -l

    add_gpg_key:
      cmds:
        - |
          curl -s {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/keys/newrelic_apt_key_current.gpg | apt-key add -
      silent: true

    add_nr_source:
      cmds:
        - |
          ARCH="amd64"
          IS_ARM=$(uname -m | grep -i 'aarch64' | wc -l)
          if [ $IS_ARM -gt 0 ] ; then
            ARCH="arm64"
          fi

          if [ -n "{{.DEBIAN_CODENAME}}" ]; then
            printf "deb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt {{.DEBIAN_CODENAME}} main" | tee /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
            printf "\ndeb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt {{.DEBIAN_CODENAME}} main" | tee -a /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
          else
            printf "deb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt {{.DEBIAN_VERSION_CODENAME}} main" | tee /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
            printf "\ndeb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt {{.DEBIAN_VERSION_CODENAME}} main" | tee -a /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
          fi
      vars:
        DEBIAN_CODENAME:
          sh: awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release
        DEBIAN_VERSION_CODENAME:
          sh: cat /etc/os-release | grep "VERSION=\"[0-9] " | awk -F " " '{print $2}' | sed 's/[()"]//g'
      silent: true

    update_apt_nr_source:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          OPTIONS="-o DPkg::Lock::Timeout=60 -o Acquire::Check-Valid-Until=false"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS update -yq
      # apt will return an error if fails to update any of its sources. Ignore these errors and let the "install_infra" task fail.
      ignore_error: true

    install_super_agent:
      cmds:
        - |
          OPTIONS="-o DPkg::Lock::Timeout=60"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS install newrelic-super-agent -y -qq
          # Check the exit status of the previous command
          if [ $? -ne 0 ]; then
            echo "Error: newrelic-super-agent installation failed"
            echo "Attempting to configure the packages again"
            dpkg --configure -a
            # Check if there was an error
            if [ $? -ne 0 ]; then
              echo "Error found while reconfiguring dpkg database"
              # Force-Install the Software
              echo "Attempting to install any missing dependencies or fixes broken packages."
              apt-get $OPTIONS install -f
              if [ $? -ne 0 ]; then 
                exit 1
              fi
              echo "Installation is successful"
            fi
          fi
      silent: true

    update_otel_license_key:
      cmds:
        - |
          sed -i 's/\(api-key: \).*/\1'"{{.NEW_RELIC_LICENSE_KEY}}"'/' /etc/nr-otel-collector/config.yaml

    update_otel_mem_limit:
      cmds:
        - |
          sed -i 's/\(limit_mib: \).*/\1'"100"'/' /etc/nr-otel-collector/config.yaml

    update_otel_end_point:
      cmds:
        - |
          if [ -f /etc/newrelic-super-agent/newrelic-super-agent.conf ]; then
            sed -i "/^OTEL_EXPORTER_OTLP_ENDPOINT/d" /etc/newrelic-super-agent/newrelic-super-agent.conf
          fi
        - |
          # Remove old config location (to deprecate)
          rm -f /etc/newrelic-super-agent/nrdot-values.yaml
          sed -i "/^OTEL_EXPORTER_OTLP_ENDPOINT/d" /etc/newrelic-super-agent/newrelic-super-agent.conf
          # Create nr_otel_collector sub-agent dir
          mkdir -p /etc/newrelic-super-agent/fleet/agents.d/nr_otel_collector
          if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
            echo 'otel_exporter_otlp_endpoint: "staging-otlp.nr-data.net:4317"' >> /etc/newrelic-super-agent/fleet/agents.d/nr_otel_collector/values/values.yml
          elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
            echo 'otel_exporter_otlp_endpoint: "otlp.eu01.nr-data.net:4317"' >> /etc/newrelic-super-agent/fleet/agents.d/nr_otel_collector/values/values.yml
          else
            echo 'otel_exporter_otlp_endpoint: "otlp.nr-data.net:4317"' >> /etc/newrelic-super-agent/fleet/agents.d/nr_otel_collector/values/values.yml
          fi

    config_supervisors:
      cmds:
        - |
          # Remove values_file keys from config.yaml
          sed -i '/^\s*values_file:/d' /etc/newrelic-super-agent/config.yaml
          sed -i '/^\s*#\s*values_file:/d' /etc/newrelic-super-agent/config.yaml
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ] && [ "{{.NR_CLI_NRDOT}}" = "false" ]; then
            sed -i '/^\s*agents:/s/^/#/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i 's/s*#\s*agents:/agents:/g' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ]; then
            sed -i '/^\s*nr_infra_agent:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*agent_type: "newrelic\/com\.newrelic\.infrastructure_agent/s/^/#/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i '/^\s*#\s*nr_infra_agent:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*agent_type: "newrelic\/com\.newrelic\.infrastructure_agent/s/#//' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_NRDOT}}" = "false" ]; then
            sed -i '/^\s*nr_otel_collector:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*agent_type: "newrelic\/io\.opentelemetry\.collector/s/^/#/' /etc/newrelic-super-agent/config.yaml 
          else
            sed -i '/^\s*#\s*nr_otel_collector:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*agent_type: "newrelic\/io\.opentelemetry\.collector/s/#//' /etc/newrelic-super-agent/config.yaml
          fi

    config_opamp:
      cmds:
        - |
          if [ "{{.NR_CLI_FLEET_ENABLED}}" = "false" ] ; then
            sed -i '/^\s*opamp:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*endpoint: https:\/\/opamp/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*api-key:/s/^/#/' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*headers:/s/^/#/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i 's/s*#\s*opamp:/opamp:/g' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*endpoint: https:\/\/opamp/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*api-key:/s/#//' /etc/newrelic-super-agent/config.yaml
            sed -i '/^\s*#\s*headers:/s/#//' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"staging-service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.eu.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          else
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-super-agent/config.yaml
          fi
        - |
          if [ "{{.NR_CLI_FLEET_ENABLED}}" != "false" ] ; then
            sed -i 's/api-key: API_KEY_HERE/api-key: {{.NEW_RELIC_LICENSE_KEY}}/g' /etc/newrelic-super-agent/config.yaml
          fi

    config_host_monitoring:
      cmds:
        - |
          if [ "{{.NR_CLI_HOST_MONITORING_SOURCE}}" = "otel" ]; then     
            echo 'is_secure_forward_only: true' >> /etc/newrelic-infra.yml
          else
            if [ -f /etc/nr-otel-collector/config.yaml ]; then
              sed -i 's/\<otlp, hostmetrics\>/otlp/g' /etc/nr-otel-collector/config.yaml
              sed -i 's/\<otlp, filelog\>/otlp/g' /etc/nr-otel-collector/config.yaml
            fi
          fi

    restart_super_agent:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart newrelic-super-agent
          else 
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart newrelic-super-agent
            else
              /etc/init.d/newrelic-super-agent restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    assert_super_agent_started:
      cmds:
        - |
          # Ensure super agent has enough time to start
          sleep 10
          IS_AGENT_INSTALLED=$(sudo ps aux | grep newrelic-super-agent | grep -v grep | wc -l)
          if [ $IS_AGENT_INSTALLED -eq 0 ] ; then
            echo "The newrelic super agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 31
          fi

    post_install:
      info: |2
          ⚙️  The New Relic Super Agent configuration file can be found in /etc/newrelic-super-agent/config.yaml
