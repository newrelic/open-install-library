# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: nr-otel-collector
displayName: New Relic Open Telemetry Collector
description: New Relic install recipe for the Open Telemetry Collector
repository: https://github.com/newrelic/opentelemetry-collector-releases

installTargets:
  - type: host
    os: linux
    platform: suse
  - type: host
    os: linux
    platformFamily: suse

keywords:
  - Open Telmetry
  - Otel
  - Infrastructure
  - Agent
  - Suse
  - SLES

processMatch: []

preInstall:
  requireAtDiscovery: |
      IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
      if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
        echo "docker detected with cgroup, unsupported" >&2
        exit 131
      fi
      IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
      if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
        echo "docker detected with environ, unsupported" >&2
        exit 131
      fi
      if [[ -f /.dockerenv ]] ; then
        echo "docker detected with .dockerenv, unsupported" >&2
        exit 131
      fi
      IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
      if [ $IS_WSL_CONTAINER -gt 0 ] ; then
        echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
        exit 131
      fi
      exit 0

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: assert_pre_req
        - task: install_otel_collector
        - task: update_license_key
        - task: update_otel_end_point
        - task: restart_otel_service
        - task: assert_otel_collector_status_ok
        - task: post_install

    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi      
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
      vars:
        SLES_VERSION:
          sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release

    install_otel_collector:
      cmds:
        - |
          ARCH=$(uname -m)
          REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/zypp/sles/{{.SLES_VERSION}}/$ARCH/newrelic-infra.repo")
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "Newrelic OTEL Collector Agent is not available for this architecture "$ARCH". See our documentation for additional help here at https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/" >&2
            exit 131
          fi
          curl -s $REPO_URL -o /etc/zypp/repos.d/newrelic-infra.repo
        - curl -s -L {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/keys/newrelic_rpm_key_current.gpg > newrelic_rpm_key_current.gpg
        - rpm --import newrelic_rpm_key_current.gpg
        - zypper -n --quiet ref -r newrelic-infra
        - zypper -n --quiet install nr-otel-collector
        - rm newrelic_rpm_key_current.gpg
      vars:
        SLES_VERSION:
          sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release
      silent: true

    update_license_key:
      cmds:
        - |
          sed -i 's/\(api-key: \).*/\1'"{{.NEW_RELIC_LICENSE_KEY}}"'/' /etc/nr-otel-collector/config.yaml

    update_otel_end_point:
      cmds:
        - |
          region={{.NEW_RELIC_REGION}}
          if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
            sed -i 's/^OTEL_EXPORTER_OTLP_ENDPOINT=.*$/OTEL_EXPORTER_OTLP_ENDPOINT=staging.otlp.nr-data.net:4317/' /etc/nr-otel-collector/nr-otel-collector.conf
          elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
            sed -i 's/^OTEL_EXPORTER_OTLP_ENDPOINT=.*$/OTEL_EXPORTER_OTLP_ENDPOINT=otlp.eu01.nr-data.net:4317/' /etc/nr-otel-collector/nr-otel-collector.conf
          else 
            sed -i 's/^OTEL_EXPORTER_OTLP_ENDPOINT=.*$/OTEL_EXPORTER_OTLP_ENDPOINT=otlp.nr-data.net:4317/' /etc/nr-otel-collector/nr-otel-collector.conf
            fi     
              

    restart_otel_service:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart nr-otel-collector
          else 
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart nr-otel-collector
            else
              /etc/init.d/nr-otel-collector restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l    

    assert_otel_collector_status_ok:
      cmds:
        - |
          is_otel_collector_present(){
            OTEL_COLLECTOR_PRESENT=$(ps aux | grep nr-otel-collector$ | wc -l)
            [[ $OTEL_COLLECTOR_PRESENT -gt 0 ]]
            return
          }

          MAX_RETRIES=150
          TRIES=0
          echo "Running Otel Collector agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl http://localhost:13133/ -s | sed 's/.*"status":"\([^"]*\).*/\1/')
            if [ "$statusCheckOutput" == "Server available" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  if is_otel_collector_present; then
                    echo "detected nr_otel_collector process running"
                    exit 0
                  fi
                  echo "nr_otel_collector status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  if is_otel_collector_present; then
                    echo "detected nr_otel_collector process running"
                    exit 0
                  fi
                  echo "nr_otel_collector status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

    
    post_install:
      info: |2
          ⚙️  The New Relic Otel Collector Agent configuration file can be found in /etc/nr-otel-collector/config.yaml
          Edit this file to make changes or configure advanced features for the agent. See the docs for options:
          https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/collector/opentelemetry-collector-infra-hosts/              