# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: infrastructure-agent-installer
displayName: Infrastructure Agent
description: New Relic install recipe for the Infrastructure agent on Windows
repository: https://github.com/newrelic/infrastructure-agent

installTargets:
  - type: host
    os: windows

keywords:
  - Infrastructure
  - Agent
  - Windows

processMatch: []

validationNrql: "SELECT count(*) from SystemSample where hostname like '{{.HOSTNAME}}' FACET entityGuid SINCE 5 minutes ago"

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_required_permissions
        - task: remove_any_previous
        - task: download_infra
        - task: install_infra
        - task: start_infra
        - task: assert_agent_started
        # - task: assert_agent_status_ok

    assert_required_permissions:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

          if(-not ($isAdmin))
          {
            Write-Host -ForegroundColor Red "Cannot continue with the installation, Administrator rights are required."
            exit 1;
          }
          '

    remove_any_previous:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              $keyData = Get-Item -Path HKLM:\$key
              $name = $keyData.GetValue("DisplayName")
              if ($name -and $name -match $Match) {
                $keyId = Split-Path $key -Leaf
                $uninstallIds.Add($keyId) | Out-Null
              }
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "New Relic Infrastructure Agent"
          foreach ($uninstallId in $uninstallIds) {
            $uninstallCommand = "msiexec /x """ + $uninstallId + """ /qn"
            Invoke-Expression $uninstallCommand
            # wait here to allow uninstall command to complete since it returns without waiting
            Start-Sleep -s 15
          }
          '

    download_infra:
      cmds:
        - |
          powershell -command '
          try {
            [Net.ServicePointManager]::SecurityProtocol = "tls";
            [Net.ServicePointManager]::SecurityProtocol = "tls12, tls"
          }
          catch {}

          try {
            (New-Object System.Net.WebClient).DownloadFile("https://download.newrelic.com/infrastructure_agent/windows/newrelic-infra.msi", "$env:TEMP\newrelic-infra.msi")
          }
          catch {
            $baseException = $_.Exception.GetBaseException()
            Write-Host -ForegroundColor Red "Failed to download New Relic Infrastructure Agent ($($baseException.Message))"
            $errorCode = 24 # unknown download error

            switch ($baseException) {
              { $_ -is [Net.WebException] }            { $errorCode = 25 } # web download error
              { $_ -is [IO.IOException] }              { $errorCode = 26 } # file io error
              { $_ -is [UnauthorizedAccessException] } { $errorCode = 26 } # file io error
            }
            exit $errorCode
          }
          '

    install_infra:
      cmds:
        - |
          powershell -command '
          $LICENSE_KEY = "{{.NEW_RELIC_LICENSE_KEY}}"
          $InfraConfig = "C:\\Program Files\\New Relic\\newrelic-infra\\newrelic-infra.yml"

          if (Test-Path $InfraConfig) {
            msiexec.exe /qn /i "$env:TEMP\newrelic-infra.msi" | Out-Null

            (Get-Content $InfraConfig) | Where-Object {
              $_ -notmatch "^staging"
            } | Set-Content $InfraConfig

            (Get-Content $InfraConfig) | Where-Object {
              $_ -notmatch "^enable_process_metrics"
            } | Set-Content $InfraConfig

            (Get-Content $InfraConfig) | Where-Object {
              $_ -notmatch "^status_server_enabled"
            } | Set-Content $InfraConfig

            (Get-Content $InfraConfig) | Where-Object {
              $_ -notmatch "^status_server_port"
            } | Set-Content $InfraConfig

            (Get-Content $InfraConfig) | Where-Object {
              $_ -notmatch "^proxy"
            } | Set-Content $InfraConfig

            (Get-Content $InfraConfig) | Foreach-Object {
              $_ -replace "^license_key: .*", ("license_key: " + $LICENSE_KEY) `
            } | Set-Content $InfraConfig
          } else {
            msiexec.exe /qn /i "$env:TEMP\newrelic-infra.msi" GENERATE_CONFIG=true LICENSE_KEY="$LICENSE_KEY" | Out-Null
          }

          $NEW_RELIC_REGION = "{{.NEW_RELIC_REGION}}"
          if ($NEW_RELIC_REGION -ilike "staging") {
            Add-Content -Path $InfraConfig -Value "staging: true" -Force
          }
          Add-Content -Path $InfraConfig -Value "enable_process_metrics: true" -Force
          Add-Content -Path $InfraConfig -Value "status_server_enabled: true" -Force
          Add-Content -Path $InfraConfig -Value "status_server_port: 18003" -Force
          if (Test-Path env:HTTPS_PROXY) {
            Add-Content -Path $InfraConfig -Value "proxy: $env:HTTPS_PROXY" -Force
          }
          '

    start_infra:
      cmds:
        - powershell -command 'net start newrelic-infra'
        - echo "New Relic infrastructure agent for Windows installed and started"

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          powershell -command 'Start-Sleep -s 10; $output = Get-Service "newrelic-infra"; if ( -not ($output -like "*newrelic-infra*") ) { Write-Error "The infrastructure agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic."; Exit 31; }'

    assert_agent_status_ok:
      cmds:
        - |
          powershell -command '
            try {
              $statusCheckOutput=Invoke-WebRequest -UseBasicParsing -Method Get -Uri http://localhost:18003/v1/status/errors | Select-Object -ExpandProperty Content;
              if ($statusCheckOutput -ne "{}") {
                Write-Host -ForegroundColor Red "infra-agent status check not healthy: $statusCheckOutput";
                exit 33;
              }
            } catch {
                Write-Host -ForegroundColor Red "infra-agent status endpoint not available";
                exit 32;
            }
          '

postInstall:
  info: |2
      ⚙️  The Infrastructure Agent configuration file can be found in C:\Program Files\New Relic\newrelic-infra\newrelic-infra.yml
      Edit these files to make changes or configure advanced features for the agent. See the docs for options:
      Infrastructure Agent: https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings

      Note: Process monitoring has been enabled by default - all other config options are left to the user.
