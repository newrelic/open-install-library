# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: infrastructure-agent-installer
displayName: Infrastructure Agent
description: New Relic install recipe for the Infrastructure agent
repository: https://github.com/newrelic/infrastructure-agent

installTargets:
  - type: host
    os: darwin

keywords:
  - Infrastructure
  - Agent
  - Darwin
  - Macos

processMatch: []

validationUrl: "http://localhost:18003/v1/status/entity"

install:
  version: "3"
  silent: true

  vars:
    # Variables prefixed with VN_ as they are parsed in alphabetical order, and they have dependencies
    # HOMEBREW_PREFIX is different in intel/amd:
    # intel: /usr/local
    # amd: /opt/homebrew
    V1_HOMEBREW_INSTALL_DIR:
      sh: |
        if [ $( sudo -i -u $SUDO_USER which brew ) ];then
          sudo -i -u $SUDO_USER brew config | grep HOMEBREW_PREFIX | awk '{print $2}'
        fi
    V2_CONFIG_FILE:
      sh: echo {{.V1_HOMEBREW_INSTALL_DIR}}/etc/newrelic-infra/newrelic-infra.yml
    V2_CONFIG_FILE_DIR:
      sh: echo {{.V1_HOMEBREW_INSTALL_DIR}}/etc/newrelic-infra
    ARROW: '\033[0;36m===> \033[0;97m'

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: cleanup
        - task: setup_license
        - task: setup_proxy
        - task: install_infra
        - task: restart
        - task: assert_agent_status_ok
        - task: get_infra_key

    assert_pre_req:
      cmds:
        - |
          if [ -z "$SUDO_USER" ] ; then
            echo "recipe needs to be run with sudo. Please re-run the installation with sudo." >&2
            exit 7
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          # This check is temporary until the one below that offers to install brew is fixed. Currently it gets stuck
          # and it doesn't show the message to offer to install brew
          IS_BREW_INSTALLED=$(which brew | wc -l)
          if [ $IS_BREW_INSTALLED -eq 0 ] ; then
            echo "brew is required to run the newrelic install. Please install brew and re-run the installation." >&2
            exit 131
          fi
        - |
          IS_BREW_INSTALLED=$(which brew | wc -l)
          if [ $IS_BREW_INSTALLED -eq 0 ] ; then
            while :; do
              echo -n "brew is required to run the newrelic install. Do you want to install it? Y/N (default: Y) "
              read answer
              echo ""
              NEW_RELIC_CONTINUE=$(echo "${answer^^}" | cut -c1-1)
              if [[ -z "$NEW_RELIC_CONTINUE" ]]; then
                NEW_RELIC_CONTINUE="Y"
              fi
              if [[ "$NEW_RELIC_CONTINUE" == "N" ]]; then
                echo "brew is required to run the newrelic install. Please install brew and re-run the installation." >&2
                exit 131
              fi
              if [[ "$NEW_RELIC_CONTINUE" == "Y" ]]; then
                break
              fi
              echo -e "Please type Y or N only."
            done
            echo -e "{{.ARROW}}Installing brew...{{.GRAY}}"
            echo ""
            BREW_INSTALL_SUCCESS=$(sudo -i -u $SUDO_USER /bin/bash -c 'curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash > /dev/null 2>&1; echo $?')
            if [ "$BREW_INSTALL_SUCCESS" -gt 0 ]; then
              echo "brew install failed. Try to install it manually following instructions in https://brew.sh and re-run the installation."
              exit 16
            fi
          fi
        - |
          IS_CURL_INSTALLED=$(which curl | wc -l)
          if [ $IS_CURL_INSTALLED -eq 0 ] ; then
            echo "curl is required to run the newrelic install. Please install curl and re-run the installation." >&2
            exit 17
          fi

    cleanup:
      cmds:
        - |
          sudo rm -rf "{{.V1_HOMEBREW_INSTALL_DIR}}/var/db/newrelic-infra/data" 2>/dev/null

    setup_license:
      cmds:
        - |
          if [ -f "{{.V2_CONFIG_FILE}}" ]; then
            sed -i.bak "/^staging/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak "/^enable_process_metrics/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak "/^status_server_enabled/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak "/^status_server_port/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak "/^license_key/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak "/^metrics_process_sample_rate/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sed -i.bak '/^custom_attributes:/,/^\S/{ /^\S/!d }' "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}.bak"
            sed -i.bak '/^custom_attributes:/d' "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}.bak"
          else
            mkdir -p "{{.V2_CONFIG_FILE_DIR}}"
            touch "{{.V2_CONFIG_FILE}}"
          fi
        - |
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            echo 'staging: true' >> "{{.V2_CONFIG_FILE}}"
          fi
          echo 'enable_process_metrics: true' >> "{{.V2_CONFIG_FILE}}"
          echo 'status_server_enabled: true' >> "{{.V2_CONFIG_FILE}}"
          echo 'status_server_port: 18003' >> "{{.V2_CONFIG_FILE}}"
          echo 'license_key: {{.NEW_RELIC_LICENSE_KEY}}' >> "{{.V2_CONFIG_FILE}}"
          echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> "{{.V2_CONFIG_FILE}}"

    setup_proxy:
      cmds:
        - |
          if [ ! -z "$HTTPS_PROXY" ]; then
            sudo sed -i.bak "/^proxy/d" "{{.V2_CONFIG_FILE}}" && rm "{{.V2_CONFIG_FILE}}".bak
            sudo echo 'proxy: {{.HTTPS_PROXY}}' >> "{{.V2_CONFIG_FILE}}"
          fi

    install_infra:
      cmds:
        - |
          sudo -i -u $SUDO_USER brew install newrelic-infra-agent -q

    restart:
      cmds:
        - |
          brew services restart newrelic-infra-agent &>/dev/null

    assert_agent_status_ok:
      cmds:
        - |
          infra_present(){
            INFRA_PRESENT=$(ps aux | grep newrelic-infra$ | wc -l)
            [[ $INFRA_PRESENT -gt 0 ]]
            return
          }

          MAX_RETRIES=150
          TRIES=0
          echo "Running agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl http://localhost:18003/v1/status/errors -s)
            if [ "$statusCheckOutput" == "{}" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  # Process-based validation attempt
                  if infra_present; then
                    echo "detected newrelic-infra process running"
                    exit 0
                  fi
                  echo "infra-agent status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  # Process-based validation attempt
                  if infra_present; then
                    echo "detected newrelic-infra process running"
                    exit 0
                  fi
                  echo "infra-agent status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

    get_infra_key:
      cmds:
        - |
          MAX_RETRIES=150
          TRIES=0
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            AGENT_STATUS=$(curl http://localhost:18003/v1/status/errors -s)
            if [ "$AGENT_STATUS" == "{}" ]; then
              INFRA_KEY=$(curl http://localhost:18003/v1/status/entity -s | tr -d {}\" | sed -e 's/^.*key://')
              if [ ! -z "$INFRA_KEY" ]; then
                echo "Infra key: $INFRA_KEY"
                echo "{\"Metadata\":{\"INFRA_KEY\":\"$INFRA_KEY\"}}" | tee -a {{.NR_CLI_OUTPUT}} > /dev/null
                break
              fi
            fi
            sleep 1
          done

          if [ -z "$INFRA_KEY" ]; then
            echo "empty infrastructure agent key"
          fi

postInstall:
  info: |2
      ⚙️  The Infrastructure Agent configuration file can be found in {{.V1_HOMEBREW_INSTALL_DIR}}/etc/newrelic-infra/newrelic-infra.yml
      Edit this file to make changes or configure advanced features for the agent. See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings
      
      Note: Process monitoring has been enabled by default - all other config options are left to the user.
