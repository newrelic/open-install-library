# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: infrastructure-agent-installer
displayName: Infrastructure Agent
description: New Relic install recipe for the Infrastructure agent
repository: https://github.com/newrelic/infrastructure-agent

installTargets:
  - type: host
    os: darwin

keywords:
  - Infrastructure
  - Agent
  - Darwin
  - Macos

processMatch: []

validationUrl: "http://localhost:18003/v1/status/entity"

install:
  version: "3"
  silent: true

  vars:
    CONFIG_FILE: "/usr/local/etc/newrelic-infra/newrelic-infra.yml"
    CONFIG_FILE_DIR: "/usr/local/etc/newrelic-infra"

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: cleanup
        - task: setup_license
        - task: setup_proxy
        - task: install_infra
        - task: restart
        - task: assert_agent_started
        - task: assert_agent_status_ok

    assert_pre_req:
      cmds:
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          IS_BREW_INSTALLED=$(which brew | wc -l)
          if [ $IS_BREW_INSTALLED -eq 0 ] ; then
            echo "brew is required to run the newrelic install. Please install brew and re-run the installation." >&2
            exit 16
          fi
        - |
          IS_CURL_INSTALLED=$(which curl | wc -l)
          if [ $IS_CURL_INSTALLED -eq 0 ] ; then
            echo "curl is required to run the newrelic install. Please install curl and re-run the installation." >&2
            exit 17
          fi

    cleanup:
      cmds:
        - |
          sudo rm -rf "/usr/local/var/db/newrelic-infra/data"

    setup_license:
      cmds:
        - |
          if [ -f "{{.CONFIG_FILE}}" ]; then
            sed -i.bak "/^staging/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sed -i.bak "/^enable_process_metrics/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sed -i.bak "/^status_server_enabled/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sed -i.bak "/^status_server_port/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sed -i.bak "/^license_key/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sed -i.bak "/^metrics_process_sample_rate/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
          else
            mkdir -p "{{.CONFIG_FILE_DIR}}"
            touch "{{.CONFIG_FILE}}"
          fi
        - |
          if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
            echo 'staging: true' >> "{{.CONFIG_FILE}}"
          fi
          echo 'enable_process_metrics: true' >> "{{.CONFIG_FILE}}"
          echo 'status_server_enabled: true' >> "{{.CONFIG_FILE}}"
          echo 'status_server_port: 18003' >> "{{.CONFIG_FILE}}"
          echo 'license_key: {{.NEW_RELIC_LICENSE_KEY}}' >> "{{.CONFIG_FILE}}"
          echo 'metrics_process_sample_rate: -1' >> "{{.CONFIG_FILE}}"

    setup_proxy:
      cmds:
        - |
          if [ ! -z "$HTTPS_PROXY" ]; then
            sudo sed -i.bak "/^proxy/d" "{{.CONFIG_FILE}}" && rm "{{.CONFIG_FILE}}".bak
            sudo echo 'proxy: {{.HTTPS_PROXY}}' >> "{{.CONFIG_FILE}}"
          fi

    install_infra:
      cmds:
        - |
          sudo -i -u $SUDO_USER brew install newrelic-infra-agent -q

    restart:
      cmds:
        - |
          sudo -i -u $SUDO_USER brew services restart newrelic-infra-agent

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          sleep 10
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 31
          fi

    assert_agent_status_ok:
      cmds:
        - |
          MAX_RETRIES=30
          TRIES=0
          echo "Running agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl http://localhost:18003/v1/status/errors -s)
            if [ "$statusCheckOutput" == "{}" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$statusCheckOutput" == "" ]; then
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "infra-agent status endpoint not available" >&2
                  exit 32
                fi
              else
                if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                  echo "infra-agent status check not healthy: $statusCheckOutput" >&2
                  exit 33
                fi
              fi
            fi

            sleep 2
          done

postInstall:
  info: |2
      ⚙️  The Infrastructure Agent configuration file can be found in /usr/local/etc/newrelic-infra/newrelic-infra.yml
      Edit this file to make changes or configure advanced features for the agent. See the docs for options:
      https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings
      
      Note: Process monitoring has been enabled by default - all other config options are left to the user.
