# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: logs-integration
displayName: Logs integration
description: New Relic install recipe for basic Logging via Infra-Agent
repository: https://github.com/newrelic/infrastructure-agent/tree/master/assets/examples/logging

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

keywords:
  - Logs

processMatch: []

validationNrql: "SELECT count(*) from Log where hostname like '{{.HOSTNAME}}%' FACET entity.guids SINCE 10 minutes ago"

inputVars:
  - name: "LOG_FILES"
    prompt: "Which log files would you like to tail?"
    default: "/var/log/alternatives.log,/var/log/cloud-init.log,/var/log/auth.log,/var/log/dpkg.log"

install:
  version: "3"
  silent: true
  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: setup
        - task: restart
        - task: assert_agent_started

    assert_pre_req:
      cmds:
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >> /dev/stderr
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >> /dev/stderr
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >> /dev/stderr
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >> /dev/stderr
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >> /dev/stderr
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >> /dev/stderr
            exit 15
          fi
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/new-relic-guided-installation-overview" >> /dev/stderr
            exit 1
          fi
        - |
          # First check on empty inputs
          logFiles=$(echo -n {{.LOG_FILES}})
          discoveredLogFiles=$(echo -n {{.NR_DISCOVERED_LOG_FILES}})
          logsStringLength=${#logFiles}
          discoveredLogsStringLength=${#discoveredLogFiles}
          if [ $logsStringLength -eq 0 ] && { [ $discoveredLogsStringLength -eq 0 ] || [ "$discoveredLogFiles" = "logs: []" ]; }; then
            echo "ERROR No log file(s) input provided or discovered. Cannot proceed. Exiting installation." >> /dev/stderr
            exit 16
          fi

    setup:
      cmds:
        - |
          sudo mkdir -p "/etc/newrelic-infra/logging.d"
        - |
          if [ -f /etc/newrelic-infra/logging.d/logging.yml ]; then
            sudo rm /etc/newrelic-infra/logging.d/logging.yml;
          fi

          sudo touch /etc/newrelic-infra/logging.d/logging.yml;
        - |
          # Enable infra-agent logs to New Relic
          sudo sed -i "s,.*verbose:.*,," /etc/newrelic-infra.yml
          sudo sed -i "s,.*log_format:.*,," /etc/newrelic-infra.yml
          echo -e "verbose: 3\nlog_format: json" | sudo tee -a /etc/newrelic-infra.yml > /dev/null
          sudo sed -i '/^$/d' /etc/newrelic-infra.yml
        - |
          logFiles=$(echo -n "{{.LOG_FILES}}")
          logsStringLength=${#logFiles}

          # Keep a count of the valid log files the integration will use.
          foundLogFilesCount=0

          if [ $logsStringLength -gt 0 ]; then
            echo "logs:" | sudo tee /etc/newrelic-infra/logging.d/logging.yml > /dev/null
            for i in $(echo -n {{.LOG_FILES}} | sed "s/,/ /g"); do
              if [ -f $i ]; then
                NAME=$(basename $i)
                echo -e "  - name: $NAME\n    file: $i" | sudo tee -a /etc/newrelic-infra/logging.d/logging.yml > /dev/null

                # Increment found log files count
                foundLogFilesCount=$((foundLogFilesCount+1))
              fi
            done
          fi

          discoveredLogFiles=$(echo -n "{{.NR_DISCOVERED_LOG_FILES | trim}}")
          discoveredLogsStringLength=${#discoveredLogFiles}

          # If the user provides log files that don't exist and we haven't discovered any log files,
          # we cannot proceed with the installation.
          if [ $foundLogFilesCount -eq 0 ] && { [ $discoveredLogsStringLength -eq 0 ] || [ "$discoveredLogFiles" = "logs: []" ]; }; then
            echo "ERROR Provided log files do not exist: $logFiles. No log file(s) found or discovered. Cannot proceed. Exiting installation." >> /dev/stderr
            exit 16
          fi

          # Disable glob expansion (necessary for discovered logs)
          set -f

          # index is incremented to facilitate dynamic name values for each discovered log file path
          index=0
          if [ $discoveredLogsStringLength -gt 0 ]; then
            echo "logs:" | sudo tee /etc/newrelic-infra/logging.d/discovered.yml > /dev/null

            for filePath in $(echo -n $discoveredLogFiles | sed "s/,/ /g"); do
              echo -e "  - name: configured-logs-$index\n    file: $filePath" | sudo tee -a /etc/newrelic-infra/logging.d/discovered.yml > /dev/null
              index=$((index+1))
            done
          fi

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else 
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: which systemctl | wc -l
        IS_INITCTL:
          sh: which initctl | wc -l

    assert_agent_started:
      cmds:
        - |
          # Ensure agent has enough time to start
          sleep 10
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >> /dev/stderr
            exit 31
          fi

postInstall:
  info: |2
      ⚙️  The Logs configuration file (base configuration) can be found in /etc/newrelic-infra/logging.d/logging.yml
      ⚙️  The Logs configuration file for discovered processes can be found in /etc/newrelic-infra/logging.d/discovered.yml
      Edit these files to make changes or configure advanced features for the Logs integration. See the docs for options:
      https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
