# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: agent-control
displayName: Agent Control
description: New Relic install recipe for Agent Control
repository: https://github.com/newrelic/newrelic-agent-control

installTargets:
  - type: host
    os: linux
    platformFamily: debian
    platformVersion: "(10|11|12)\\.*" # Buster, Bullseye, Bookworm #
  - type: host
    os: linux
    platform: ubuntu
    platformVersion: "(16|18|20|22|24)\\.04"

keywords:
  - AgentControl
  - OpenTelemetry
  - OTel
  - Infrastructure
  - Agent
  - Linux
  - Debian
  - jammy
  - focal
  - bionic
  - xenial
  - bullseye
  - buster

processMatch: []

preInstall:
  requireAtDiscovery: |
    IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
    if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
      echo "docker detected with cgroup, unsupported" >&2
      exit 131
    fi
    IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
    if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
      echo "docker detected with environ, unsupported" >&2
      exit 131
    fi
    if [ -f /.dockerenv ] ; then
      echo "docker detected with .dockerenv, unsupported" >&2
      exit 131
    fi
    IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
    if [ $IS_WSL_CONTAINER -gt 0 ] ; then
      echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
      exit 131
    fi
    exit 0

  discoveryMode:
    - targeted
install:
  version: "3"
  silent: true
  vars:
    IS_SYSTEMCTL:
      sh: command -v systemctl | wc -l
    IS_INITCTL:
      sh: command -v initctl | wc -l
    # By default, we'll install the Infra Agent as the Host instrumentation solution
    # We use env vars per host instrumentation to avoid checking constants and related issues in the recipe
    HOST_INFRA_AGENT:
      sh: |
        if [[ "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "" || "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "infra-agent" ]]; then
          echo "true"
        fi
    HOST_OTEL:
      sh: |
        if [ "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "otel" ]; then
          echo "true"
        fi

  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: detect_previous_install
        - task: assert_pre_req
        - task: cleanup
        - task: setup_infra_license
        - task: setup_infra_proxy
        - task: log_ssl_ciphers
        - task: update_apt
        - task: install_gnupg
        - task: add_gpg_key
        - task: add_nr_source
        - task: update_apt_nr_source
        - task: install_agent_control
        - task: update_otel_license_key
        - task: config_agent_control
        - task: config_host_monitoring_otel
        - task: update_otel_mem_limit
        - task: update_otel_end_point
        - task: migrate_newrelic_infra_config
        - task: restart_agent_control
        - task: assert_agent_control_status_ok
        - task: signal_recipe_applied
        - task: post_install

    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    detect_previous_install:
      cmds:
        - |
          if [ -f /etc/newrelic-agent-control/.nr-cli ] ; then
            echo "A previous execution of this installation was detected. Some installation tasks will be skipped."
            echo "If you would like to run all the tasks, please remove the /etc/newrelic-agent-control/.nr-cli file and re-run the installation."
          fi

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          IS_CURL_INSTALLED=$(which curl | wc -l)
          if [ $IS_CURL_INSTALLED -eq 0 ] ; then
            echo "curl is required to run the newrelic install. Please install curl and re-run the installation." >&2
            exit 16
          fi
        - |
          IS_OPENSSL_INSTALLED=$(which openssl | wc -l)
          if [ $IS_OPENSSL_INSTALLED -eq 0 ] ; then
            echo "openssl is required to run the newrelic install. Please install openssl and re-run the installation." >&2
            exit 17
          fi
        - |
          IS_MKTEMP_INSTALLED=$(which mktemp | wc -l)
          if [ $IS_MKTEMP_INSTALLED -eq 0 ] ; then
            echo "mktemp is required to run the newrelic install. Please install coreutils and re-run the installation." >&2
            exit 18
          fi
        - |
          if [ -n "{{.DEBIAN_CODENAME}}" ]; then
            IS_AGENT_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt/dists/{{.DEBIAN_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
            if [ $IS_AGENT_AVAILABLE -eq 0 ] ; then
              echo "there is no New Relic Agent Control available for the distribution with codename '{{.DEBIAN_CODENAME}}'." >&2
              exit 131
            fi
          else
            if [ -n "{{.DEBIAN_VERSION_CODENAME}}" ]; then
              IS_INFRA_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt/dists/{{.DEBIAN_VERSION_CODENAME}}/InRelease | grep " 2[0-9][0-9] " | wc -l)
              if [ $IS_INFRA_AVAILABLE -eq 0 ] ; then
                echo "there is no New Relic Agent Control available for the distribution with version codename '{{.DEBIAN_VERSION_CODENAME}}'." >&2
                exit 131
              fi
            else
              echo "there is no New Relic Agent Control available for the distribution, no version codename was found." >&2
              exit 131
            fi
          fi
      vars:
        DEBIAN_CODENAME:
          sh: awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release
        DEBIAN_VERSION_CODENAME:
          sh: cat /etc/os-release | grep "VERSION=\"[0-9] " | awk -F " " '{print $2}' | sed 's/[()"]//g'

    cleanup:
      # skipping this task if .nr-cli exists
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            rm -rf /var/db/newrelic-infra/data 2>/dev/null
          fi

    setup_infra_license:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            if [ -f /etc/newrelic-infra.yml ]; then
              printf "\nAn existing newrelic-infra configuration file was detected. Updating where needed."

              sed -i "/^staging/d" /etc/newrelic-infra.yml
              sed -i "/^enable_process_metrics/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_enabled/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_port/d" /etc/newrelic-infra.yml
              sed -i "/^license_key/d" /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/,/^\S/{ /^\S/!d }' /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/d' /etc/newrelic-infra.yml
              sed -i "/^is_integrations_only/d" /etc/newrelic-infra.yml

              if [ "{{.NR_AC_MIGRATE_INFRA_CONFIG}}" == "true" ] || [ "{{.NEW_RELIC_ASSUME_YES}}" == "true" ] ; then
                touch /etc/newrelic-infra-do-migrate
              else
                printf "\nWould you like to migrate this newrelic-infra config to use it with New Relic Agent Control? (y/N): "
                read -r MIGRATE_NEWRELIC_INFRA_CONFIG
                MIGRATE_NEWRELIC_INFRA_CONFIG=${MIGRATE_NEWRELIC_INFRA_CONFIG:-N}

                if [ "$MIGRATE_NEWRELIC_INFRA_CONFIG" == "y" ] ; then
                  touch /etc/newrelic-infra-do-migrate
                fi
              fi
            else
              touch /etc/newrelic-infra.yml
              # If we are creating a new file, perform the migration as well
              touch /etc/newrelic-infra-do-migrate
            fi
          fi
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
              echo 'staging: true' >> /etc/newrelic-infra.yml
            fi
            echo 'enable_process_metrics: true' >> /etc/newrelic-infra.yml
            echo 'status_server_enabled: true' >> /etc/newrelic-infra.yml
            echo 'status_server_port: 18003' >> /etc/newrelic-infra.yml
            echo 'license_key: "{{`{{NEW_RELIC_LICENSE_KEY}}`}}"' >> /etc/newrelic-infra.yml
            echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> /etc/newrelic-infra.yml
          fi
    setup_infra_proxy:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] && [ ! -z "$HTTPS_PROXY" ]; then
            sed -i "/^proxy/d" /etc/newrelic-infra.yml
            echo 'proxy: {{.HTTPS_PROXY}}' >> /etc/newrelic-infra.yml
          fi

    log_ssl_ciphers:
      cmds:
        - |
          IS_SORT_INSTALLED=$(which sort | wc -l)
          IS_UNIQ_INSTALLED=$(which uniq | wc -l)
          if [ $IS_SORT_INSTALLED -gt 0 ] && [ $IS_UNIQ_INSTALLED -gt 0 ]; then
            echo "Detecting available SSL ciphers..."
            openssl ciphers -v | awk '{print " - " $2}' | sort | uniq
          fi
      ignore_error: true

    update_apt:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          OPTIONS="-o DPkg::Lock::Timeout=60 -o Acquire::Check-Valid-Until=false"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS update -yq
      silent: true
      # apt will return an error if fails to update any of its sources. Ignore these errors and let the "install_infra" task fail.
      ignore_error: true

    install_gnupg:
      cmds:
        - |
          if [ {{.HAS_GPG}} -eq 0 ] ; then
            OPTIONS="-o DPkg::Lock::Timeout=60"
            if [ ! -z "$HTTPS_PROXY" ]; then
              OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
            fi
            apt-get $OPTIONS install gnupg2 -y
          fi
      vars:
        HAS_GPG:
          sh: command -v gpg | wc -l

    add_gpg_key:
      cmds:
        - |
          curl -s {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/keys/newrelic_apt_key_current.gpg | gpg --dearmor --batch --yes -o /etc/apt/trusted.gpg.d/newrelic-infra.gpg
      silent: true

    add_nr_source:
      cmds:
        - |
          ARCH="amd64"
          IS_ARM=$(uname -m | grep -i 'aarch64' | wc -l)
          if [ $IS_ARM -gt 0 ] ; then
            ARCH="arm64"
          fi

          if [ -n "{{.DEBIAN_CODENAME}}" ]; then
            printf "deb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt {{.DEBIAN_CODENAME}} main" | tee /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
            printf "\ndeb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt {{.DEBIAN_CODENAME}} main" | tee -a /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
          else
            printf "deb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/apt {{.DEBIAN_VERSION_CODENAME}} main" | tee /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
            printf "\ndeb [arch="$ARCH"] {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/apt {{.DEBIAN_VERSION_CODENAME}} main" | tee -a /etc/apt/sources.list.d/newrelic-infra.list > /dev/null
          fi
      vars:
        DEBIAN_CODENAME:
          sh: awk -F= '/VERSION_CODENAME/ {print $2}' /etc/os-release
        DEBIAN_VERSION_CODENAME:
          sh: cat /etc/os-release | grep "VERSION=\"[0-9] " | awk -F " " '{print $2}' | sed 's/[()"]//g'
      silent: true

    update_apt_nr_source:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          OPTIONS="-o DPkg::Lock::Timeout=60 -o Acquire::Check-Valid-Until=false"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS update -yq
      # apt will return an error if fails to update any of its sources. Ignore these errors and let the "install_infra" task fail. Just to trigger the pipeline
      ignore_error: true

    install_agent_control:
      cmds:
        - |
          OPTIONS="-o DPkg::Lock::Timeout=60"
          if [ ! -z "$HTTPS_PROXY" ]; then
            OPTIONS="$OPTIONS -o Acquire::Http::Proxy={{.HTTPS_PROXY}}"
          fi
          apt-get $OPTIONS install newrelic-agent-control={{.NEW_RELIC_AGENT_VERSION}} -y -qq
          # Check the exit status of the previous command
          if [ $? -ne 0 ]; then
            echo "Error: newrelic-agent-control installation failed"
            echo "Attempting to configure the packages again"
            dpkg --configure -a
            # Check if there was an error
            if [ $? -ne 0 ]; then
              echo "Error found while reconfiguring dpkg database"
              # Force-Install the Software
              echo "Attempting to install any missing dependencies or fixes broken packages."
              apt-get $OPTIONS install -f
              if [ $? -ne 0 ]; then
                exit 1
              fi
              echo "Installation is successful"
            fi
          fi
      vars:
        # Allows to set an specific version from the cli
        NEW_RELIC_AGENT_VERSION: '{{ .NEW_RELIC_AGENT_VERSION | default "1.2.0" }}'
      silent: true

    # If configured to do so, migrate the newrelic-infra configuration for usage with New Relic Agent Control
    migrate_newrelic_infra_config:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ -f /etc/newrelic-infra-do-migrate ]; then
            rm /etc/newrelic-infra-do-migrate
            newrelic-config-migrate
          fi

    # Add NR Ingest Key as ENV Var for the agent-control Systemd service (used by Infra Agent and Otel)
    update_otel_license_key:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          sed -i "/^NEW_RELIC_LICENSE_KEY/d" /etc/newrelic-agent-control/newrelic-agent-control.conf
          echo 'NEW_RELIC_LICENSE_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/newrelic-agent-control/newrelic-agent-control.conf

    update_otel_mem_limit:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            sed -i "s/limit_mib: .*$/limit_mib: 100/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    # Add OTLP Endpoint as ENV Var for the Agent Control Systemd service
    update_otel_end_point:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            sed -i "/^OTEL_EXPORTER_OTLP_ENDPOINT/d" /etc/newrelic-agent-control/newrelic-agent-control.conf
            case "${{.NEW_RELIC_REGION}}" in
              "STAGING") url="staging.otlp.nr-data.net" ;;
              "EU") url="otlp.eu01.nr-data.net" ;;
              *) url="otlp.nr-data.net" ;;
            esac
            echo "OTEL_EXPORTER_OTLP_ENDPOINT=https://${url}:4317/" >> /etc/newrelic-agent-control/newrelic-agent-control.conf
          fi

    config_agent_control:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          # Local config for Agent Control (agents)
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            AGENT_SET="otel"
          else
            AGENT_SET="infra-agent"
          fi
          # Proxy configuration
          if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_URL}}" ] ; then
            AC_PROXY_ARGS="--proxy-url {{.NEW_RELIC_AGENT_CONTROL_PROXY_URL}}"
            if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_FILE}}" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --proxy-ca-bundle-file {{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_FILE}}"
            fi
            if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_DIR}}" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --proxy-ca-bundle-dir {{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_DIR}}"
            fi
            if [ "{{.NEW_RELIC_AGENT_CONTROL_PROXY_IGNORE_SYSTEM}}" == "true" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --ignore-system-proxy"
            fi
          else
            AC_PROXY_ARGS=""
          fi
          # Config generation
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" = "false" ]; then
            newrelic-agent-control-cli generate-config \
              --fleet-disabled \
              --output-path /etc/newrelic-agent-control/config.yaml \
              --region {{.NEW_RELIC_REGION}} \
              --agent-set $AGENT_SET $AC_PROXY_ARGS
          else
            if [ -z "{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}" ]; then
              mkdir -p /etc/newrelic-agent-control/keys
              AC_AUTH_PRIVATE_KEY_PATH="/etc/newrelic-agent-control/keys/agent-control-identity.key"
            else
              AC_AUTH_PRIVATE_KEY_PATH="{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}"
            fi
            newrelic-agent-control-cli generate-config \
              --output-path /etc/newrelic-agent-control/config.yaml \
              --region {{.NEW_RELIC_REGION}} \
              --agent-set $AGENT_SET \
              --fleet-id {{.NR_CLI_FLEET_ID}} \
              --organization-id "{{.NEW_RELIC_ORGANIZATION}}" \
              --auth-client-id "{{.NEW_RELIC_AUTH_PROVISIONED_CLIENT_ID}}" \
              --auth-parent-token "{{.NEW_RELIC_AUTH_TOKEN}}" \
              --auth-parent-client-id "{{.NEW_RELIC_AUTH_CLIENT_ID}}" \
              --auth-parent-client-secret "{{.NEW_RELIC_AUTH_CLIENT_SECRET}}" \
              --auth-private-key-path $AC_AUTH_PRIVATE_KEY_PATH $AC_PROXY_ARGS
            if [ -z "{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}" ]; then
              chmod 600 /etc/newrelic-agent-control/keys/agent-control-identity.key
            fi
          fi

    config_host_monitoring_otel:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            mkdir -p /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values
            cp /etc/newrelic-agent-control/examples/values-nr-otel-collector-agent-linux.yaml /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    restart_agent_control:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart newrelic-agent-control
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart newrelic-agent-control
            else
              /etc/init.d/newrelic-agent-control restart
            fi
          fi

    assert_agent_control_status_ok:
      cmds:
        - |
          MAX_RETRIES=150
          TRIES=0
          echo "Running agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl -s http://localhost:51200/status)
            if [ -z "$statusCheckOutput" ]; then
              # so jq doesn't fail if empty
              statusCheckOutput="{}"
            fi
            STATUS=$(echo $statusCheckOutput | /usr/local/bin/newrelic utils jq '.agent_control.healthy')
            if [ "$STATUS" == "true" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                # Process-based validation attempt
                IS_AGENT_INSTALLED=$(ps aux | grep newrelic-agent-control | grep -v grep | wc -l)
                if [ $IS_AGENT_INSTALLED -gt 0 ] ; then
                  echo "detected newrelic-agent-control process running"
                  exit 0
                fi

                echo "New Relic Agent Control has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2

                if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
                  journalctl -u newrelic-agent-control --no-pager
                fi

                exit 31
              fi
            fi

            sleep 2
          done

    signal_recipe_applied:
      cmds:
        - |
          touch /etc/newrelic-agent-control/.nr-cli

    post_install:
      cmds:
        - |
          echo "⚙️  New Relic Agent Control configuration file can be found in /etc/newrelic-agent-control/config.yaml"
