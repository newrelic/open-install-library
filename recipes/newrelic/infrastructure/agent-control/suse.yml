# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: agent-control
displayName: Agent Control
description: New Relic install recipe for Agent Control
repository: https://github.com/newrelic/newrelic-agent-control

installTargets:
  - type: host
    os: linux
    platformFamily: suse
    platformVersion: "(12|15)\\.*"

keywords:
  - AgentControl
  - OpenTelemetry
  - OTel
  - Infrastructure
  - Agent
  - Linux
  - Suse
  - SLES

processMatch: []

preInstall:
  requireAtDiscovery: |
      IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
      if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
        echo "docker detected with cgroup, unsupported" >&2
        exit 131
      fi
      IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
      if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
        echo "docker detected with environ, unsupported" >&2
        exit 131
      fi
      if [ -f /.dockerenv ] ; then
        echo "docker detected with .dockerenv, unsupported" >&2
        exit 131
      fi
      IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
      if [ $IS_WSL_CONTAINER -gt 0 ] ; then
        echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
        exit 131
      fi
      exit 0

  discoveryMode:
    - targeted

install:
  version: "3"
  silent: true
  vars:
    IS_SYSTEMCTL:
      sh: command -v systemctl | wc -l
    IS_INITCTL:
      sh: command -v initctl | wc -l
  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: detect_previous_install
        - task: assert_pre_req
        - task: cleanup
        - task: setup_infra_license
        - task: setup_infra_proxy
        - task: install_agent_control
        - task: update_otel_license_key
        - task: config_supervisors
        - task: config_fleet_id
        - task: config_fleet_control
        - task: config_agent_control_auth
        - task: config_host_monitoring
        - task: update_otel_mem_limit
        - task: update_otel_end_point
        - task: migrate_newrelic_infra_config
        - task: restart_agent_control
        - task: assert_agent_control_status_ok
        - task: signal_recipe_applied
        - task: post_install

    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    detect_previous_install:
      cmds:
        - |
          if [ -f /etc/newrelic-agent-control/.nr-cli ] ; then
            echo "A previous execution of this installation was detected. Some installation tasks will be skipped."
            echo "If you would like to run all the tasks, please remove the /etc/newrelic-agent-control/.nr-cli file and re-run the installation."
          fi

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          IS_CURL_INSTALLED=$(which curl | wc -l)
          if [ $IS_CURL_INSTALLED -eq 0 ] ; then
            echo "curl is required to run the newrelic install. Please install curl and re-run the installation." >&2
            exit 16
          fi
        - |
          IS_OPENSSL_INSTALLED=$(which openssl | wc -l)
          if [ $IS_OPENSSL_INSTALLED -eq 0 ] ; then
            echo "openssl is required to run the newrelic install. Please install openssl and re-run the installation." >&2
            exit 17
          fi
        - |
          IS_MKTEMP_INSTALLED=$(which mktemp | wc -l)
          if [ $IS_MKTEMP_INSTALLED -eq 0 ] ; then
            echo "mktemp is required to run the newrelic install. Please install coreutils and re-run the installation." >&2
            exit 18
          fi
        - |
          IS_INFRA_AVAILABLE=$(curl -Is {{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/zypp/sles/{{.SLES_VERSION}}/x86_64/newrelic-infra.repo | grep " 2[0-9][0-9] " | wc -l)
          if [ $IS_INFRA_AVAILABLE -eq 0 ] ; then
            echo "there is no New Relic Agent Control available for the distribution '{{.SLES_VERSION}}'." >&2
            exit 131
          fi
      vars:
        SLES_VERSION:
          sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release

    cleanup:
      # skipping this task if .nr-cli exists
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          rm -rf /var/db/newrelic-infra/data 2>/dev/null

    setup_infra_license:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ -f /etc/newrelic-infra.yml ]; then
              printf "\nAn existing newrelic-infra configuration file was detected. Updating where needed."

              sed -i "/^staging/d" /etc/newrelic-infra.yml
              sed -i "/^enable_process_metrics/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_enabled/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_port/d" /etc/newrelic-infra.yml
              sed -i "/^license_key/d" /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/,/^\S/{ /^\S/!d }' /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/d' /etc/newrelic-infra.yml
              sed -i "/^is_integrations_only/d" /etc/newrelic-infra.yml

              if [ "{{.NR_AC_MIGRATE_INFRA_CONFIG}}" == "true" ] || [ "{{.NEW_RELIC_ASSUME_YES}}" == "true" ] ; then
                touch /etc/newrelic-infra-do-migrate
              else
                printf "\nWould you like to migrate this newrelic-infra config to use it with New Relic Agent Control? (y/N): "
                read -r MIGRATE_NEWRELIC_INFRA_CONFIG
                MIGRATE_NEWRELIC_INFRA_CONFIG=${MIGRATE_NEWRELIC_INFRA_CONFIG:-N}

                if [ "$MIGRATE_NEWRELIC_INFRA_CONFIG" == "y" ] ; then
                  touch /etc/newrelic-infra-do-migrate
                fi
              fi
            else
              touch /etc/newrelic-infra.yml
              # If we are creating a new file, perform the migration as well
              touch /etc/newrelic-infra-do-migrate
            fi
          fi
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] ; then
            if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
              echo 'staging: true' >> /etc/newrelic-infra.yml
            fi

            echo 'enable_process_metrics: true' >> /etc/newrelic-infra.yml
            echo 'status_server_enabled: true' >> /etc/newrelic-infra.yml
            echo 'status_server_port: 18003' >> /etc/newrelic-infra.yml
            echo 'license_key: {{`{{NEW_RELIC_LICENSE_KEY}}`}}' >> /etc/newrelic-infra.yml
            echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> /etc/newrelic-infra.yml
          fi

    setup_infra_proxy:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" != "false" ] && [ ! -z "$HTTPS_PROXY" ]; then
            sed -i "/^proxy/d" /etc/newrelic-infra.yml
            echo 'proxy: {{.HTTPS_PROXY}}' >> /etc/newrelic-infra.yml
          fi

    install_agent_control:
      cmds:
        - |
          ARCH=$(uname -m)
          AGENT_CONTROL_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/zypp/sles/{{.SLES_VERSION}}/$ARCH/newrelic-infra.repo")
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $AGENT_CONTROL_REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "New Relic Agent Control is not available for this architecture "$ARCH". See our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 131
          fi
          INFRA_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/zypp/sles/{{.SLES_VERSION}}/$ARCH/newrelic-infra.repo")

          curl -s $INFRA_REPO_URL -o /etc/zypp/repos.d/newrelic-infra.repo
          curl -s $AGENT_CONTROL_REPO_URL | sed 's/\[newrelic-infra]/\n[newrelic-agent-control]/g' >> /etc/zypp/repos.d/newrelic-infra.repo

        - curl -s -L {{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/keys/newrelic_rpm_key_current.gpg > newrelic_rpm_key_current.gpg
        - rpm --import newrelic_rpm_key_current.gpg
        - zypper -n --quiet ref -r newrelic-infra
        - zypper -n --quiet ref -r newrelic-agent-control
        - zypper -n --quiet install newrelic-agent-control={{.NEW_RELIC_AGENT_VERSION}}
        - rm newrelic_rpm_key_current.gpg
      vars:
        SLES_VERSION:
          sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release
        NEW_RELIC_AGENT_VERSION: "0.31.0"
      silent: true

    # If configured to do so, migrate the newrelic-infra configuration for usage with New Relic Agent Control
    migrate_newrelic_infra_config:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ -f /etc/newrelic-infra-do-migrate ]; then
            rm /etc/newrelic-infra-do-migrate
            newrelic-config-migrate
          fi

    update_otel_license_key:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          sed -i "/^NEW_RELIC_LICENSE_KEY/d" /etc/newrelic-agent-control/newrelic-agent-control.conf
          echo 'NEW_RELIC_LICENSE_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/newrelic-agent-control/newrelic-agent-control.conf

    update_otel_mem_limit:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
            sed -i "s/limit_mib: .*$/limit_mib: 100/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    # Add OTLP Endpoint as ENV Var for the agent-control Systemd service
    update_otel_end_point:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
            if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
              sed -i "s/endpoint: .*$/endpoint: https:\/\/staging-otlp.nr-data.net:4317/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
            elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
              sed -i "s/endpoint: .*$/endpoint: https:\/\/otlp.eu01.nr-data.net:4317/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
            else
              sed -i "s/endpoint: .*$/endpoint: https:\/\/otlp.nr-data.net:4317/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
            fi
          fi

    config_supervisors:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ] && [ "{{.NR_CLI_NRDOT}}" = "false" ]; then
            cp /etc/newrelic-agent-control/examples/agent-control-config-no-agents.yaml /etc/newrelic-agent-control/config.yaml
          elif [ "{{.NR_CLI_INFRA_AGENT}}" = "false" ]; then
            cp /etc/newrelic-agent-control/examples/agent-control-config-nr-otel-collector.yaml /etc/newrelic-agent-control/config.yaml
          elif [ "{{.NR_CLI_NRDOT}}" = "false" ]; then
            cp /etc/newrelic-agent-control/examples/agent-control-config-nr-infra-agent.yaml /etc/newrelic-agent-control/config.yaml
          else
            cp /etc/newrelic-agent-control/examples/agent-control-config-all-agents.yaml /etc/newrelic-agent-control/config.yaml
          fi

    config_fleet_id:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ ! -z "{{.NR_CLI_FLEET_ID}}" ] ; then
            sed -i '/^\s*#\s*fleet_id:/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i 's/fleet_id: FLEET_ID_HERE/fleet_id: {{.NR_CLI_FLEET_ID}}/g' /etc/newrelic-agent-control/config.yaml
          fi

    config_fleet_control:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" = "false" ]; then
            sed -i '/^\s*fleet_control:/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*endpoint: https:\/\/opamp/s/^/#/' /etc/newrelic-agent-control/config.yaml
          else
            sed -i 's/s*#\s*fleet_control:/fleet_control:/g' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*endpoint: https:\/\/opamp/s/# //' /etc/newrelic-agent-control/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" = "false" ]; then
            sed -i '/^\s*api-key:/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*headers:/s/^/#/' /etc/newrelic-agent-control/config.yaml
          else
            sed -i '/^\s*#\s*api-key:/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*headers:/s/# //' /etc/newrelic-agent-control/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" != "false" ] ; then
            sed -i 's/api-key: API_KEY_HERE/api-key: {{ .NEW_RELIC_LICENSE_KEY }}/g' /etc/newrelic-agent-control/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"staging-service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-agent-control/config.yaml
          elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.eu.newrelic.com\/v1\/opamp"'/' /etc/newrelic-agent-control/config.yaml
          else
            sed -i 's/\(endpoint: https:\/\/opamp.\).*/\1'"service.newrelic.com\/v1\/opamp"'/' /etc/newrelic-agent-control/config.yaml
          fi

    config_agent_control_auth:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" != "false" ] && [ "{{ .NEW_RELIC_ORGANIZATION }}" != "" ]; then
            sed -i '/^\s*#\s*auth_config:\s*$/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*token_url: PLACEHOLDER/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*client_id: PLACEHOLDER/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*provider: PLACEHOLDER/s/# //' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*#\s*private_key_path: PLACEHOLDER/s/# //' /etc/newrelic-agent-control/config.yaml
          else
            sed -i '/^\s*auth_config:/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*token_url: PLACEHOLDER/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*client_id: PLACEHOLDER/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*provider: PLACEHOLDER/s/^/#/' /etc/newrelic-agent-control/config.yaml
            sed -i '/^\s*private_key_path: PLACEHOLDER/s/^/#/' /etc/newrelic-agent-control/config.yaml
          fi
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" != "false" ] && [ "{{ .NEW_RELIC_ORGANIZATION }}" != "" ]; then
            set -uo pipefail

            mkdir -p /etc/newrelic-agent-control/keys
            chown root:root /etc/newrelic-agent-control/keys
            chmod 700 /etc/newrelic-agent-control/keys

            TEMPORAL_FOLDER=$(mktemp -d newrelic-agent-control.XXXXXXXXXX)
            chown root:root "${TEMPORAL_FOLDER}"
            chmod 700 "${TEMPORAL_FOLDER}"
            trap "rm -rf $TEMPORAL_FOLDER" EXIT
            openssl genrsa -out "$TEMPORAL_FOLDER/key" 4096
            openssl rsa -in "$TEMPORAL_FOLDER/key" -pubout -out "$TEMPORAL_FOLDER/pub"

            if [ "{{.NEW_RELIC_REGION}}" = "STAGING" ]; then
              REGISTRATION_ENDPOINT=https://staging-api.newrelic.com/graphql
              TOKEN_RENEWAL_ENDPOINT=https://system-identity-oauth.staging-service.newrelic.com/oauth2/token
              IDENTITY_CREATION_ENDPOINT=https://ng-iam-service.staging-service.nr-ops.net/system-identity/graphql
            elif [ "{{.NEW_RELIC_REGION}}" = "EU" ]; then
              REGISTRATION_ENDPOINT=https://api.eu.newrelic.com/graphql
              TOKEN_RENEWAL_ENDPOINT=https://system-identity-oauth.service.newrelic.com/oauth2/token
              IDENTITY_CREATION_ENDPOINT=https://ng-iam-service.service.eu.nr-ops.net/system-identity/graphql
            else
              REGISTRATION_ENDPOINT=https://api.newrelic.com/graphql
              TOKEN_RENEWAL_ENDPOINT=https://system-identity-oauth.service.newrelic.com/oauth2/token
              IDENTITY_CREATION_ENDPOINT=https://ng-iam-service.service.nr-ops.net/system-identity/graphql
            fi

            ############################################################
            # Get the L1 Access Token
            ############################################################
            if [ "{{.NEW_RELIC_AUTH_CLIENT_ID}}" != "" ] && [ "{{.NEW_RELIC_AUTH_CLIENT_SECRET}}" != "" ]; then
              echo Starting with L1 System Identity...
              RESPONSE_FILE=$TEMPORAL_FOLDER/response_token.json
              for RETRY in 1 2 3; do
                HTTP_CODE=$(echo '{"client_id": "{{.NEW_RELIC_AUTH_CLIENT_ID}}", "client_secret": "{{.NEW_RELIC_AUTH_CLIENT_SECRET}}", "grant_type": "client_credentials"}' | tr -d $'\n' | curl \
                  -s -S -w "%{http_code}" \
                  -H "Content-Type: application/json" \
                  -o "$RESPONSE_FILE" \
                  --data-binary @- \
                  --max-time 60 \
                  --connect-timeout 10 \
                  "$TOKEN_RENEWAL_ENDPOINT"
                )

                if [ $HTTP_CODE -eq 200 ]; then
                  break
                fi
                                  
                if [ -z "$HTTP_CODE" ] || [ "$HTTP_CODE" -eq 0 ]; then
                  echo "Network error occurred or no HTTP response was received. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                else
                  if jq empty "$TEMPORAL_FOLDER/response_token.json" > /dev/null 2>&1; then
                    ERROR_MESSAGE=$(jq '.error_description // "invalid_request"' < "$TEMPORAL_FOLDER/response_token.json" | tr -d '"')
                    echo "Error getting system identity auth token. The API endpoint returned $HTTP_CODE: $ERROR_MESSAGE. Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  else
                    echo -n "Error getting system identity auth token. The API endpoint returned $HTTP_CODE: " && cat "$TEMPORAL_FOLDER/response_token.json" | tr -d '\n' && echo " Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  fi
                fi
              done

              if [ $HTTP_CODE -ne 200 ]; then
                echo "Error getting system identity auth token"
                exit 99
              fi
              
              ACCESS_TOKEN=$(/usr/local/bin/newrelic utils jq  '.access_token' < "$RESPONSE_FILE" | tr -d '"' )
          
              ############################################################
              # Create System Identity
              ############################################################
              DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              NAME="System Identity for $(hostname) - $DATE"
              echo Starting with L2 System Identity...
  
              for RETRY in 1 2 3; do
                HTTP_CODE=$(echo '{ "query":
                    "mutation {
                      create(
                        name: \"'$NAME'\",
                        organizationId: \"{{ .NEW_RELIC_ORGANIZATION }}\",
                        publicKey: \"'$(openssl enc -base64 -A -in "$TEMPORAL_FOLDER/pub")'\"
                      ) {
                        clientId,
                        name
                      }
                    }"
                  }' | tr -d $'\n' | curl \
                    -s -S -w "%{http_code}" \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer $ACCESS_TOKEN" \
                    -o "$TEMPORAL_FOLDER/response.json" \
                    --data-binary @- \
                    --max-time 60 \
                    --connect-timeout 10 \
                    "$IDENTITY_CREATION_ENDPOINT"
                )
  
                if [ $HTTP_CODE -eq 200 ]; then
                  break
                fi
          
                if [ -z "$HTTP_CODE" ] || [ "$HTTP_CODE" -eq 0 ]; then
                  echo "Network error occurred or no HTTP response was received during L2 identity creation. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                else
                  if jq empty "$TEMPORAL_FOLDER/response_token.json" > /dev/null 2>&1; then
                    ERROR_MESSAGE=$(jq '.errors[0].message // "invalid_request"' < "$TEMPORAL_FOLDER/response_token.json" | tr -d '"')
                    echo "Error creating L2 system identity. The API endpoint returned $HTTP_CODE. Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  else
                    echo -n "Error creating L2 system identity. The API endpoint returned $HTTP_CODE: " && cat "$TEMPORAL_FOLDER/response_token.json" | tr -d '\n' && echo " Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  fi
                fi
              done
  
              if [ $HTTP_CODE -ne 200 ]; then
                exit 99
              fi
          
              if jq empty "$TEMPORAL_FOLDER/response_token.json" > /dev/null 2>&1; then
                ERROR_MESSAGE=$(jq '.errors[0].message // "NOERROR"' < "$TEMPORAL_FOLDER/response.json" | tr -d '"')
                if [ "$ERROR_MESSAGE" != "NOERROR" ]; then
                  echo "Failed to create a New Relic System Identity L2 for Fleet Control communication authentication. Please verify that your User Key is valid and that your Account Organization has the necessary permissions to create a System Identity: $ERROR_MESSAGE"
                  exit 100
                fi
              fi
  
              CLIENT_ID=$(/usr/local/bin/newrelic utils jq  '.data.create.clientId' < "$TEMPORAL_FOLDER/response.json" | tr -d '"' )
            else
              ############################################################
              # Create System Identity (Legacy)
              ############################################################
              DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              NAME="System Identity for $(hostname) - $DATE"
              echo Starting with Legacy System Identity...
  
              for RETRY in 1 2 3; do
                HTTP_CODE=$(echo '{ "query":
                    "mutation {
                      systemIdentityCreate(
                        name: \"'$NAME'\",
                        organizationId: \"{{ .NEW_RELIC_ORGANIZATION }}\",
                        publicKey: \"'$(openssl enc -base64 -A -in "$TEMPORAL_FOLDER/pub")'\"
                      ) {
                        clientId,
                        name
                      }
                    }"
                  }' | tr -d $'\n' | curl \
                    -s -S -w "%{http_code}" \
                    -H "Content-Type: application/json" \
                    -H "API-Key: {{ .NEW_RELIC_API_KEY }}" \
                    -o "$TEMPORAL_FOLDER/response.json" \
                    --data @- \
                    --max-time 60 \
                    --connect-timeout 10 \
                    "$REGISTRATION_ENDPOINT"
                )
  
                if [ $HTTP_CODE -eq 200 ]; then
                  break
                fi
          
                if [ -z "$HTTP_CODE" ] || [ "$HTTP_CODE" -eq 0 ]; then
                  echo "Network error occurred or no HTTP response was received during legacy identity creation. Retrying ($RETRY/3)..."
                  sleep 2
                  continue
                else
                  if jq empty "$TEMPORAL_FOLDER/response_token.json" > /dev/null 2>&1; then
                    ERROR_MESSAGE=$(jq '.errors[0].message // "invalid_request"' < "$TEMPORAL_FOLDER/response_token.json" | tr -d '"')
                    echo "Error creating the new legacy system identity. The API endpoint returned $HTTP_CODE. Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  else
                    echo -n "Error creating the new legacy system identity. The API endpoint returned $HTTP_CODE: " && cat "$TEMPORAL_FOLDER/response_token.json" | tr -d '\n' && echo " Retrying ($RETRY/3)..."
                    sleep 2
                    continue
                  fi
                fi
              done
  
              if [ $HTTP_CODE -ne 200 ]; then
                exit 99
              fi
          
              if jq empty "$TEMPORAL_FOLDER/response_token.json" > /dev/null 2>&1; then
                ERROR_MESSAGE=$(jq '.errors[0].message // "NOERROR"' < "$TEMPORAL_FOLDER/response.json" | tr -d '"')
                if [ "$ERROR_MESSAGE" != "NOERROR" ]; then
                  echo "Failed to create a New Relic Legacy System Identity for Fleet Control communication authentication. Please verify that your User Key is valid and that your Account Organization has the necessary permissions to create a System Identity: $ERROR_MESSAGE"
                  exit 100
                fi
              fi
  
              CLIENT_ID=$(/usr/local/bin/newrelic utils jq  '.data.systemIdentityCreate.clientId' < "$TEMPORAL_FOLDER/response.json" | tr -d '"' )
            fi

            mv "$TEMPORAL_FOLDER/key" "/etc/newrelic-agent-control/keys/$CLIENT_ID.key"
            sed -i 's~token_url: PLACEHOLDER~token_url: '"$TOKEN_RENEWAL_ENDPOINT"'~g' /etc/newrelic-agent-control/config.yaml
            sed -i 's/client_id: PLACEHOLDER/client_id: '"$CLIENT_ID"'/g' /etc/newrelic-agent-control/config.yaml
            sed -i 's/provider: PLACEHOLDER/provider: local/g' /etc/newrelic-agent-control/config.yaml
            sed -i 's~private_key_path: PLACEHOLDER~private_key_path: '"/etc/newrelic-agent-control/keys/$CLIENT_ID.key"'~g' /etc/newrelic-agent-control/config.yaml
          fi

    config_host_monitoring:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}}" = "otel" ]; then
            echo 'is_integrations_only: true' >> /etc/newrelic-infra.yml
            mkdir -p /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values
            cp /etc/newrelic-agent-control/examples/values-nr-otel-collector-agent-linux.yaml /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          else
            if [ "{{.NR_CLI_NRDOT}}" != "false" ]; then
              mkdir -p /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values
              cp /etc/newrelic-agent-control/examples/values-nr-otel-collector-gateway.yaml /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
            fi
          fi

    restart_agent_control:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart newrelic-agent-control
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart newrelic-agent-control
            else
              /etc/init.d/newrelic-agent-control restart
            fi
          fi

    assert_agent_control_status_ok:
      cmds:
        - |
          MAX_RETRIES=150
          TRIES=0
          echo "Running agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl -s http://localhost:51200/status)
            if [ -z "$statusCheckOutput" ]; then
              # so jq doesn't fail if empty
              statusCheckOutput="{}"
            fi
            STATUS=$(echo $statusCheckOutput | /usr/local/bin/newrelic utils jq '.agent_control.healthy')
            if [ "$STATUS" == "true" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                # Process-based validation attempt
                IS_AGENT_INSTALLED=$(ps aux | grep newrelic-agent-control | grep -v grep | wc -l)
                if [ $IS_AGENT_INSTALLED -gt 0 ] ; then
                  echo "detected newrelic-agent-control process running"
                  exit 0
                fi

                echo "New Relic Agent Control has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2

                if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
                  journalctl -u newrelic-agent-control --no-pager
                fi

                exit 31
              fi
            fi

            sleep 2
          done

    signal_recipe_applied:
      cmds:
        - |
          touch /etc/newrelic-agent-control/.nr-cli

    post_install:
      info: |2
          ⚙️  New Relic Agent Control configuration file can be found in /etc/newrelic-agent-control/config.yaml
