# Visit our schema definition for additional information on this file format.
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: agent-control
displayName: Agent Control
description: New Relic install recipe for Agent Control
repository: https://github.com/newrelic/newrelic-agent-control

installTargets:
  - type: host
    os: linux
    platform: amazon
  - type: host
    os: linux
    platform: amazon
    platformVersion: "2"
  - type: host
    os: linux
    platform: amazon
    platformVersion: "2023"
  - type: host
    os: linux
    platform: centos
    platformVersion: "(7|8|9)\\.*"
  - type: host
    os: linux
    platform: oracle
    platformVersion: "(7|8|9)\\.*"
  - type: host
    os: linux
    platform: redhat
    platformVersion: "(7|8|9)\\.*"

keywords:
  - AgentControl
  - OpenTelemetry
  - OTel
  - Infrastructure
  - Agent
  - Linux
  - CentOS 7
  - CentOS 8
  - RHEL 7
  - RHEL 8
  - RHEL 9
  - Amazon Linux
  - Amazon Linux AMI
  - Amazon Linux 2
  - Amazon Linux 2023

processMatch: []

preInstall:
  requireAtDiscovery: |
      IS_DOCKER_CONTAINER_CGROUP=$(grep 'docker\|lxc' /proc/1/cgroup | wc -l)
      if [ $IS_DOCKER_CONTAINER_CGROUP -gt 0 ] ; then
        echo "docker detected with cgroup, unsupported" >&2
        exit 131
      fi
      IS_DOCKER_CONTAINER_ENVIRON=$(grep container=lxc /proc/1/environ | wc -l)
      if [ $IS_DOCKER_CONTAINER_ENVIRON -gt 0 ] ; then
        echo "docker detected with environ, unsupported" >&2
        exit 131
      fi
      if [ -f /.dockerenv ] ; then
        echo "docker detected with .dockerenv, unsupported" >&2
        exit 131
      fi
      IS_WSL_CONTAINER=$(grep -i 'Microsoft' /proc/version | wc -l)
      if [ $IS_WSL_CONTAINER -gt 0 ] ; then
        echo "microsoft Windows Subsystem for Linux for infra detected, unsupported" >&2
        exit 131
      fi
      exit 0

  discoveryMode:
    - targeted

install:
  version: "3"
  silent: true

  vars:
    AMAZON_LINUX_VERSION:
      sh: awk -F= '/VERSION_ID/ {print $2}' /etc/os-release
    REPO_DIR:
      sh: if [ {{.AMAZON_LINUX_VERSION}} = "2" ] || [ {{.AMAZON_LINUX_VERSION}} = "2023" ]; then echo "amazonlinux"; else echo "el"; fi
    ARCH:
      sh: uname -m
    IS_SYSTEMCTL:
      sh: command -v systemctl | wc -l
    IS_INITCTL:
      sh: command -v initctl | wc -l
    # By default, we'll install the Infra Agent as the Host instrumentation solution
    # We use env vars per host instrumentation to avoid checking constants and related issues in the recipe
    HOST_INFRA_AGENT:
      sh: |
        if [[ "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "" || "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "infra-agent" ]]; then
          echo "true"
        fi
    HOST_OTEL:
      sh: |
        if [ "${NEW_RELIC_AGENT_CONTROL_HOST_MONITORING_SOURCE}" == "otel" ]; then
          echo "true"
        fi

  tasks:
    default:
      cmds:
        - task: write_recipe_metadata
        - task: detect_previous_install
        - task: assert_pre_req
        - task: cleanup
        - task: setup_infra_license
        - task: setup_infra_proxy
        - task: install_agent_control
        - task: update_otel_license_key
        - task: config_agent_control
        - task: config_host_monitoring_otel
        - task: update_otel_mem_limit
        - task: update_otel_end_point
        - task: migrate_newrelic_infra_config
        - task: restart_agent_control
        - task: assert_agent_control_status_ok
        - task: signal_recipe_applied
        - task: post_install

    write_recipe_metadata:
      cmds:
        - |
          echo '{"Metadata":{"CapturedCliOutput":"true"}}' | tee {{.NR_CLI_OUTPUT}} > /dev/null

    detect_previous_install:
      cmds:
        - |
          if [ -f /etc/newrelic-agent-control/.nr-cli ] ; then
            echo "A previous execution of this installation was detected. Some installation tasks will be skipped."
            echo "If you would like to run all the tasks, please remove the /etc/newrelic-agent-control/.nr-cli file and re-run the installation."
          fi

    assert_pre_req:
      cmds:
        - |
          IS_ROOT_OR_SUDO=$([ ! -z "$SUDO_USER" ] || [ $(whoami) = "root" ] && echo "true" || echo "false") # Assert root or sudo user
          if [ "$IS_ROOT_OR_SUDO" = "false" ]; then
            echo "This newrelic install must be run under sudo or root" >&2
            exit 3
          fi
        - |
          IS_GREP_INSTALLED=$(which grep | wc -l)
          if [ $IS_GREP_INSTALLED -eq 0 ] ; then
            echo "grep is required to run the newrelic install. Please install grep and re-run the installation." >&2
            exit 10
          fi
        - |
          IS_SED_INSTALLED=$(which sed | wc -l)
          if [ $IS_SED_INSTALLED -eq 0 ] ; then
            echo "sed is required to run the newrelic install. Please install sed and re-run the installation." >&2
            exit 11
          fi
        - |
          IS_AWK_INSTALLED=$(which awk | wc -l)
          if [ $IS_AWK_INSTALLED -eq 0 ] ; then
            echo "awk is required to run the newrelic install. Please install awk and re-run the installation." >&2
            exit 12
          fi
        - |
          IS_CAT_INSTALLED=$(which cat | wc -l)
          if [ $IS_CAT_INSTALLED -eq 0 ] ; then
            echo "cat is required to run the newrelic install. Please install cat and re-run the installation." >&2
            exit 13
          fi
        - |
          IS_TEE_INSTALLED=$(which tee | wc -l)
          if [ $IS_TEE_INSTALLED -eq 0 ] ; then
            echo "tee is required to run the newrelic install. Please install tee and re-run the installation." >&2
            exit 14
          fi
        - |
          IS_TOUCH_INSTALLED=$(which touch | wc -l)
          if [ $IS_TOUCH_INSTALLED -eq 0 ] ; then
            echo "touch is required to run the newrelic install. Please install touch and re-run the installation." >&2
            exit 15
          fi
        - |
          IS_CURL_INSTALLED=$(which curl | wc -l)
          if [ $IS_CURL_INSTALLED -eq 0 ] ; then
            echo "curl is required to run the newrelic install. Please install curl and re-run the installation." >&2
            exit 16
          fi
        - |
          IS_OPENSSL_INSTALLED=$(which openssl | wc -l)
          if [ $IS_OPENSSL_INSTALLED -eq 0 ] ; then
            echo "openssl is required to run the newrelic install. Please install openssl and re-run the installation." >&2
            exit 17
          fi
        - |
          IS_MKTEMP_INSTALLED=$(which mktemp | wc -l)
          if [ $IS_MKTEMP_INSTALLED -eq 0 ] ; then
            echo "mktemp is required to run the newrelic install. Please install coreutils and re-run the installation." >&2
            exit 18
          fi
        - |
          if [ "{{.AMAZON_LINUX_VERSION}}" != "2" ] && [ "{{.AMAZON_LINUX_VERSION}}" != "2023" ] ; then
            REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          else
            REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.AMAZON_LINUX_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          fi
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "there is no New Relic Agent Control available for the distribution '{{.DISTRO_VERSION}}'." >&2
            exit 21
          fi
      vars:
        DISTRO_VERSION:
          sh: |
            rpm -E %{rhel}

    cleanup:
      # skipping this task if .nr-cli exists
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            rm -rf /var/db/newrelic-infra/data 2>/dev/null
          fi

    setup_infra_license:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            if [ -f /etc/newrelic-infra.yml ]; then
              printf "\nAn existing newrelic-infra configuration file was detected. Updating where needed."

              sed -i "/^staging/d" /etc/newrelic-infra.yml
              sed -i "/^enable_process_metrics/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_enabled/d" /etc/newrelic-infra.yml
              sed -i "/^status_server_port/d" /etc/newrelic-infra.yml
              sed -i "/^license_key/d" /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/,/^\S/{ /^\S/!d }' /etc/newrelic-infra.yml
              sed -i '/^custom_attributes:/d' /etc/newrelic-infra.yml
              sed -i "/^is_integrations_only/d" /etc/newrelic-infra.yml

              if [ "{{.NR_AC_MIGRATE_INFRA_CONFIG}}" == "true" ] || [ "{{.NEW_RELIC_ASSUME_YES}}" == "true" ] ; then
                touch /etc/newrelic-infra-do-migrate
              else
                printf "\nWould you like to migrate this newrelic-infra config to use it with New Relic Agent Control? (y/N): "
                read -r MIGRATE_NEWRELIC_INFRA_CONFIG
                MIGRATE_NEWRELIC_INFRA_CONFIG=${MIGRATE_NEWRELIC_INFRA_CONFIG:-N}

                if [ "$MIGRATE_NEWRELIC_INFRA_CONFIG" == "y" ] ; then
                  touch /etc/newrelic-infra-do-migrate
                fi
              fi
            else
              touch /etc/newrelic-infra.yml
              # If we are creating a new file, perform the migration as well
              touch /etc/newrelic-infra-do-migrate
            fi
          fi
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] ; then
            if [ $(echo {{.NEW_RELIC_REGION}} | grep -i staging | wc -l) -gt 0 ]; then
              echo 'staging: true' >> /etc/newrelic-infra.yml
            fi

            echo 'enable_process_metrics: true' >> /etc/newrelic-infra.yml
            echo 'status_server_enabled: true' >> /etc/newrelic-infra.yml
            echo 'status_server_port: 18003' >> /etc/newrelic-infra.yml
            echo 'license_key: "{{`{{NEW_RELIC_LICENSE_KEY}}`}}"' >> /etc/newrelic-infra.yml
            echo '{{.NRIA_CUSTOM_ATTRIBUTES}}' >> /etc/newrelic-infra.yml
          fi

    setup_infra_proxy:
      cmds:
        - |
          if [ "{{.HOST_INFRA_AGENT}}" == "true" ] && [ ! -z "$HTTPS_PROXY" ]; then
            sed -i "/^proxy/d" /etc/newrelic-infra.yml
            echo 'proxy: {{.HTTPS_PROXY}}' >> /etc/newrelic-infra.yml

            if ! grep -q '^proxy=' /etc/dnf/dnf.conf; then
              echo "************************************************************"
              echo "WARNING: proxy settings not detected in your dnf config"
              echo "If installation fails with a timeout, add the following line to /etc/dnf/dnf.conf and retry:"
              echo "proxy={{.HTTPS_PROXY}}"
              echo "************************************************************"
            fi
          fi

    install_agent_control:
      cmds:
        - |
          if [ "{{.AMAZON_LINUX_VERSION}}" != "2" ] && [ "{{.AMAZON_LINUX_VERSION}}" != "2023" ] ; then
            AGENT_CONTROL_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
            INFRA_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/yum/{{.REPO_DIR}}/{{.DISTRO_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          else
            AGENT_CONTROL_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}preview/linux/yum/{{.REPO_DIR}}/{{.AMAZON_LINUX_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
            INFRA_REPO_URL=$(echo -n "{{.NEW_RELIC_DOWNLOAD_URL}}infrastructure_agent/linux/yum/{{.REPO_DIR}}/{{.AMAZON_LINUX_VERSION}}/{{.ARCH}}/newrelic-infra.repo")
          fi
          IS_NEWRELIC_AVAILABLE=$(curl -Ls $AGENT_CONTROL_REPO_URL | grep "\[newrelic-infra\]" | wc -l)
          if [ $IS_NEWRELIC_AVAILABLE -eq 0 ] ; then
            echo "New Relic Agent Control is not available for this architecture {{.ARCH}}. See our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2
            exit 131
          fi

          curl -s $INFRA_REPO_URL -o /etc/yum.repos.d/newrelic-infra.repo
          curl -s $AGENT_CONTROL_REPO_URL | sed 's/\[newrelic-infra]/\n[newrelic-agent-control]/g' >> /etc/yum.repos.d/newrelic-infra.repo

          yum -y -q makecache --disablerepo='*' --enablerepo='newrelic-infra' --enablerepo='newrelic-agent-control'
          # newrelic-super-agent package on preview repository is conflicting with newrelic-agent-control whenever installation overrides infrastructure-agent or nr-dot.
          # The --exclude parameter discard the old super-agent package from the dependency resolution process.
          yum -y -q install newrelic-agent-control-{{.NEW_RELIC_AGENT_VERSION}} --exclude=newrelic-super-agent

          if [ "{{.AMAZON_LINUX_VERSION}}" == "2" ] || [ "{{.AMAZON_LINUX_VERSION}}" == "2023" ] ; then
            yum -y -q install fluent-bit
          fi
      vars:
        DISTRO_VERSION:
          sh: |
            rpm -E %{rhel}
        # Allows to set an specific version from the cli
        NEW_RELIC_AGENT_VERSION: '{{ .NEW_RELIC_AGENT_VERSION | default "1.2.0" }}'
      silent: true

    # If configured to do so, migrate the newrelic-infra configuration for usage with New Relic Agent Control
    migrate_newrelic_infra_config:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ -f /etc/newrelic-infra-do-migrate ]; then
            rm /etc/newrelic-infra-do-migrate
            newrelic-config-migrate
          fi

    update_otel_license_key:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          sed -i "/^NEW_RELIC_LICENSE_KEY/d" /etc/newrelic-agent-control/newrelic-agent-control.conf
          echo 'NEW_RELIC_LICENSE_KEY="{{.NEW_RELIC_LICENSE_KEY}}"' >> /etc/newrelic-agent-control/newrelic-agent-control.conf

    update_otel_mem_limit:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            sed -i "s/limit_mib: .*$/limit_mib: 100/g" /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    # Add OTLP Endpoint as ENV Var for the Agent Control Systemd service
    update_otel_end_point:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            sed -i "/^OTEL_EXPORTER_OTLP_ENDPOINT/d" /etc/newrelic-agent-control/newrelic-agent-control.conf
            case "${{.NEW_RELIC_REGION}}" in
              "STAGING") url="staging.otlp.nr-data.net" ;;
              "EU") url="otlp.eu01.nr-data.net" ;;
              *) url="otlp.nr-data.net" ;;
            esac
            echo "OTEL_EXPORTER_OTLP_ENDPOINT=https://${url}:4317/" >> /etc/newrelic-agent-control/newrelic-agent-control.conf
          fi

    config_agent_control:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          # Local config for Agent Control (agents)
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            AGENT_SET="otel"
          else
            AGENT_SET="infra-agent"
          fi
          # Proxy configuration
          if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_URL}}" ] ; then
            AC_PROXY_ARGS="--proxy-url {{.NEW_RELIC_AGENT_CONTROL_PROXY_URL}}"
            if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_FILE}}" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --proxy-ca-bundle-file {{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_FILE}}"
            fi
            if [ ! -z "{{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_DIR}}" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --proxy-ca-bundle-dir {{.NEW_RELIC_AGENT_CONTROL_PROXY_CA_BUNDLE_DIR}}"
            fi
            if [ "{{.NEW_RELIC_AGENT_CONTROL_PROXY_IGNORE_SYSTEM}}" == "true" ] ; then
              AC_PROXY_ARGS="$AC_PROXY_ARGS --ignore-system-proxy"
            fi
          else
            AC_PROXY_ARGS=""
          fi
          # Config generation
          if [ "{{.NEW_RELIC_AGENT_CONTROL_FLEET_ENABLED}}" = "false" ]; then
            newrelic-agent-control-cli generate-config \
              --fleet-disabled \
              --output-path /etc/newrelic-agent-control/config.yaml \
              --region {{.NEW_RELIC_REGION}} \
              --agent-set $AGENT_SET $AC_PROXY_ARGS
          else
            if [ -z "{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}" ]; then
              mkdir -p /etc/newrelic-agent-control/keys
              AC_AUTH_PRIVATE_KEY_PATH="/etc/newrelic-agent-control/keys/agent-control-identity.key"
            else
              AC_AUTH_PRIVATE_KEY_PATH="{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}"
            fi
            newrelic-agent-control-cli generate-config \
              --output-path /etc/newrelic-agent-control/config.yaml \
              --region {{.NEW_RELIC_REGION}} \
              --agent-set $AGENT_SET \
              --fleet-id {{.NR_CLI_FLEET_ID}} \
              --organization-id "{{.NEW_RELIC_ORGANIZATION}}" \
              --auth-client-id "{{.NEW_RELIC_AUTH_PROVISIONED_CLIENT_ID}}" \
              --auth-parent-token "{{.NEW_RELIC_AUTH_TOKEN}}" \
              --auth-parent-client-id "{{.NEW_RELIC_AUTH_CLIENT_ID}}" \
              --auth-parent-client-secret "{{.NEW_RELIC_AUTH_CLIENT_SECRET}}" \
              --auth-private-key-path $AC_AUTH_PRIVATE_KEY_PATH $AC_PROXY_ARGS
            if [ -z "{{ .NEW_RELIC_AUTH_PRIVATE_KEY_PATH }}" ]; then
              chmod 600 /etc/newrelic-agent-control/keys/agent-control-identity.key
            fi
          fi

    config_host_monitoring_otel:
      status:
        - test -f /etc/newrelic-agent-control/.nr-cli
      cmds:
        - |
          if [ "{{.HOST_OTEL}}" == "true" ] ; then
            mkdir -p /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values
            cp /etc/newrelic-agent-control/examples/values-nr-otel-collector-agent-linux.yaml /etc/newrelic-agent-control/fleet/agents.d/nr-otel-collector/values/values.yaml
          fi

    restart_agent_control:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            systemctl restart newrelic-agent-control
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              initctl restart newrelic-agent-control
            else
              /etc/init.d/newrelic-agent-control restart
            fi
          fi

    assert_agent_control_status_ok:
      cmds:
        - |
          MAX_RETRIES=150
          TRIES=0
          echo "Running agent status check attempt..."
          # wait for status endpoint to be ready
          while [ $TRIES -lt $MAX_RETRIES ]; do
            ((TRIES++))
            statusCheckOutput=$(curl -s http://localhost:51200/status)
            if [ -z "$statusCheckOutput" ]; then
              # so jq doesn't fail if empty
              statusCheckOutput="{}"
            fi
            STATUS=$(echo $statusCheckOutput | /usr/local/bin/newrelic utils jq '.agent_control.healthy')
            if [ "$STATUS" == "true" ]; then
              echo "Agent status check ok."
              break
            else
              if [ "$TRIES" -eq "$MAX_RETRIES" ]; then
                # Process-based validation attempt
                IS_AGENT_INSTALLED=$(ps aux | grep newrelic-agent-control | grep -v grep | wc -l)
                if [ $IS_AGENT_INSTALLED -gt 0 ] ; then
                  echo "detected newrelic-agent-control process running"
                  exit 0
                fi

                echo "New Relic Agent Control has not started after installing. Please try again later, or see our documentation for installing manually https://docs.newrelic.com/docs/using-new-relic/cross-product-functions/install-configure/install-new-relic" >&2

                if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
                  journalctl -u newrelic-agent-control --no-pager
                fi

                exit 31
              fi
            fi

            sleep 2
          done

    signal_recipe_applied:
      cmds:
        - |
          touch /etc/newrelic-agent-control/.nr-cli

    post_install:
      cmds:
        - |
          echo "⚙️  New Relic Agent Control configuration file can be found in /etc/newrelic-agent-control/config.yaml"
