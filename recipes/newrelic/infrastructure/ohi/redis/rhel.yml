# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: redis-open-source-integration
displayName: Redis Integration
description: New Relic install recipe for default Redis Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-redis

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "amazon"
    platformVersion: "2"
  - type: host
    os: linux
    platform: "redhat"
  - type: host
    os: linux
    platform: "centos"
    platformVersion: "((7|8)\\.?.*)"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - redis

# Examine Infrastructure events for correlated data
processMatch:
  - redis

# Matches partial list of the Log forwarding parameters
# https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
logMatch:
  - name: redis
    file: /var/log/redis/redis.log
    attributes:
      logtype: redis

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
validationIntegration: redis

# DEPRECATED
validationNrql: "SELECT count(*) from RedisSample FACET entityGuid SINCE 10 minutes ago WHERE reportingAgent = '{{.INFRA_KEY}}'"

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
      To capture data from the Redis integration, you'll first need to meet these prerequisites:
      - Redis version requirement (see https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration#comp-req)

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: input_assert
          vars:
            MAX_RETRIES: 3
            EXIT130: ""
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview" >&2
            exit 1
          fi

    input_assert:
      cmds:
        - |
          TRIES=0

          # Check Env Vars
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          NR_CLI_HOSTNAME="{{.NR_CLI_HOSTNAME}}"
          NR_CLI_PORT="{{.NR_CLI_PORT}}"
          NR_CLI_PASSWORD="{{.NR_CLI_PASSWORD}}"
          NR_CLI_KEYS="{{.NR_CLI_KEYS}}"

          # Set Defaults
          NR_CLI_HOSTNAME=${NR_CLI_HOSTNAME:-'localhost'}
          NR_CLI_PORT=${NR_CLI_PORT:-'6379'}
          CLI_RESPONSE=""

          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            while [ $TRIES -lt {{.MAX_RETRIES}} ]; do

              CLI_RESPONSE=$(redis-cli -h "$NR_CLI_HOSTNAME" -p "$NR_CLI_PORT" -a "$NR_CLI_PASSWORD" PING 2>&1)
              if [ $(echo $CLI_RESPONSE | grep "Could not connect" | wc -l) -gt 0 ] ; then
                printf "\n[Error]: Could not connect to Redis server with default port 6379. Please provide a port number.\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration/#config for more info.\n" >&2
                printf "Redis Port (default: 6379): "
                read -r NR_CLI_PORT
                NR_CLI_PORT=${NR_CLI_PORT:-6379}
                ((TRIES++))
                if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 131; else continue; fi
                echo "Please try again"
              fi

              if [ $(echo $CLI_RESPONSE | grep "NOAUTH\|WRONGPASS" | wc -l) -gt 0 ] ; then
                TRIES=0
                while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
                  printf "Redis Password(usually found in redis.conf requirepass field): "
                  stty -echo
                  read -r NR_CLI_PASSWORD
                  stty echo
                  printf "\n"
                  ((TRIES++))

                  CLI_RESPONSE=$(redis-cli -h "$NR_CLI_HOSTNAME" -p "$NR_CLI_PORT" -a "$NR_CLI_PASSWORD" PING 2>&1)
                  if [ $(echo $CLI_RESPONSE | grep "PONG" | wc -l) -eq 0 ] ; then
                    printf "\n[Error]: Could not authenticate on Redis server. Check password.\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration/#config for more info.\n" >&2
                    if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 131; else continue; fi
                    echo "Please try again"
                  fi
                  break
                done
              fi
              break
            done
          fi

          # Check if authentication is required in -y mode
          if [[ "$NEW_RELIC_ASSUME_YES" == "true" ]]; then
            CLI_RESPONSE=$(redis-cli -h "$NR_CLI_HOSTNAME" -p "$NR_CLI_PORT" -a "$NR_CLI_PASSWORD" PING 2>&1)
            if [ $(echo $CLI_RESPONSE | grep "Authentication required" | wc -l) -gt 0 ] && [ "$NR_CLI_PASSWORD" == "" ]; then
              EXIT130=" - NR_CLI_PASSWORD=<redis_password>\n"
            fi
          fi

          if [ "$EXIT130" != "" ]; then
            printf "You did not provide all the required environment variables. Please set the following variable(s) and try again:\n\n$EXIT130\n"
            exit 130
          else
            printf "\n[OK] All checks passed. Installing Redis Integration...\n\n"
          fi

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
          sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
          sudo yum install nri-redis -y

          if [ -f /etc/newrelic-infra/integrations.d/redis-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/redis-config.yml;
          fi
          sudo tee /etc/newrelic-infra/integrations.d/redis-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-redis
              env:
                METRICS: true
                HOSTNAME: $NR_CLI_HOSTNAME
                PORT: $NR_CLI_PORT
                KEYS: $NR_CLI_KEYS
                PASSWORD: '$NR_CLI_PASSWORD'
                CONFIG_INVENTORY: true
                KEYS_LIMIT: 30

                # New users should leave this property as 'true', to identify the
                # monitored entities as 'remote'. Setting this property to 'false' (the
                # default value) is deprecated and will be removed soon, disallowing
                # entities that are identified as 'local'.
                # Please check the documentation to get more information about local
                # versus remote entities:
                # https://github.com/newrelic/infra-integrations-sdk/blob/master/docs/entity-definition.md
                REMOTE_MONITORING: true

                # New users should leave this property as 'true', to uniquely identify the monitored entities when using
                # Unix sockets. It requires UNIX_SOCKET_PATH
                USE_UNIX_SOCKET: false
              interval: 15s

            - name: nri-redis
              env:
                INVENTORY: true
                HOSTNAME: $NR_CLI_HOSTNAME
                PORT: $NR_CLI_PORT
                PASSWORD: '$NR_CLI_PASSWORD'

                # New users should leave this property as 'true', to identify the
                # monitored entities as 'remote'. Setting this property to 'false' (the
                # default value) is deprecated and will be removed soon, disallowing
                # entities that are identified as 'local'.
                # Please check the documentation to get more information about local
                # versus remote entities:
                # https://github.com/newrelic/infra-integrations-sdk/blob/master/docs/entity-definition.md
                REMOTE_MONITORING: true

                # New users should leave this property as 'true', to uniquely identify the monitored entities when using
                # Unix sockets. It requires UNIX_SOCKET_PATH
                USE_UNIX_SOCKET: false
              inventory_source: config/redis
              interval: 60s
          EOT

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else 
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

postInstall:
  info: |2
      ⚙️  The Redis configuration file can be found in /etc/newrelic-infra/integrations.d/redis-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration#config
