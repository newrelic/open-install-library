name: postgres-open-source-integration
displayName: PostgreSQL Integration
description: New Relic install recipe for default Postgres Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-postgresql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - postgres

# CLI runs process detection; this is used to filter recipes that are appropriate for matched processes
processMatch:
  - postgres

# Matches partial list of the Log forwarding parameters
logMatch:
  - name: postgresql
    file: /var/log/postgresql/postgresql*.log

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
validationIntegration: postgresql

# DEPRECATED
validationNrql: "SELECT count(*) from PostgresqlDatabaseSample FACET entityGuid SINCE 10 minutes ago WHERE reportingAgent = '{{.INFRA_KEY}}'"

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
      To capture data from the PostgreSQL integration, we need to create a new PostgreSQL user with specific permissions (READ).
      The installation will create a strong randomly generated password for that new user.
      This installation may prompt for your postgres user password in order to create this new user.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: assert_pre_req
        - task: update_apt
        - task: input_assert
          vars:
            MAX_RETRIES: 3
            EXIT130: ""
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview" >&2
            exit 1
          fi

    assert_pre_req:
      cmds:
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="date:41 sha256sum:42 base64:43 head:44 awk:12"
          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)
            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    update_apt:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          apt-get -o Acquire::Check-Valid-Until=false update -yq
      silent: true
      # apt will return an error if fails to update any of its sources. Ignore these errors and let the "install_infra" task fail.
      ignore_error: true

    input_assert:
      cmds:
        - |
          TRIES=0

          # Check Env Vars
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          NR_CLI_DB_HOSTNAME="{{.NR_CLI_DB_HOSTNAME}}"
          NR_CLI_DB_PORT="{{.NR_CLI_DB_PORT}}"
          NR_CLI_DB_USERNAME="{{.NR_CLI_DB_USERNAME}}"
          NR_CLI_DB_PASSWORD="{{.NR_CLI_DB_PASSWORD}}"
          NR_CLI_DATABASE="{{.NR_CLI_DATABASE}}"
          NR_CLI_SSL="{{.NR_CLI_SSL}}"
          NR_CLI_CLIENT_CERT_FILE="{{.NR_CLI_CLIENT_CERT_FILE}}"
          NR_CLI_CERT_KEY="{{.NR_CLI_CERT_KEY}}"
          NR_CLI_TRUST_SERVER_CERTIFICATE="{{.NR_CLI_TRUST_SERVER_CERTIFICATE}}"
          NR_CLI_CERT_AUTH_FILE="{{.NR_CLI_CERT_AUTH_FILE}}"

          # Set Defaults
          NR_CLI_DB_HOSTNAME=${NR_CLI_DB_HOSTNAME:-'localhost'}
          NR_CLI_DB_PORT=${NR_CLI_DB_PORT:-'5432'}
          NR_CLI_DATABASE=${NR_CLI_DATABASE:-'postgres'}
          NR_CLI_SSL=${NR_CLI_SSL:='false'}
          NR_CLI_TRUST_SERVER_CERTIFICATE=${NR_CLI_TRUST_SERVER_CERTIFICATE:-'false'}
          NR_CLI_DB_USERNAME=${NR_CLI_DB_USERNAME:-'newrelic'}
          GEN_PASSWORD=$(echo -n $(date +%s | sha256sum | base64 | head -c 16); echo "oO0$")
          NR_CLI_DB_PASSWORD=${NR_CLI_DB_PASSWORD:-"$GEN_PASSWORD"}

          # Check default connect
          CAN_CONNECT=$(curl $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
          CAN_CONNECT=${CAN_CONNECT:-0}

          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            while [[ $TRIES -lt {{.MAX_RETRIES}} && "$CAN_CONNECT" == "7" ]]; do
              printf "\nPlease enter the port number for your PostgreSQL instance: "
              read -r NR_CLI_DB_PORT
              ((TRIES++))
              CAN_CONNECT=$(curl $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
              CAN_CONNECT=${CAN_CONNECT:-0}

              if [ $CAN_CONNECT == "7" ]; then
                printf "\n\nUnable to connect your PostgreSQL instance using provided port.\n" >&2
                if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 7; fi
                echo "Please try again"
              fi
            done
          else 
            if [[ "$CAN_CONNECT" == "7" ]]; then 
              printf "\n\nUnable to connect your PostgreSQL instance using provided port.\n" >&2
              exit 7 
            fi
          fi
          
          # Script to insert required default NR user
          sql=$(cat <<EOT
          DO
          \$do\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE  rolname = 'newrelic') THEN
              CREATE ROLE newrelic LOGIN PASSWORD '$GEN_PASSWORD';
            END IF;
            ALTER USER newrelic WITH PASSWORD '$GEN_PASSWORD';
            GRANT SELECT ON pg_stat_database TO \"$NR_CLI_DB_USERNAME\";
            GRANT SELECT ON pg_stat_database_conflicts TO \"$NR_CLI_DB_USERNAME\";
            GRANT SELECT ON pg_stat_bgwriter TO \"$NR_CLI_DB_USERNAME\";
          END
          \$do\$;

          EOT
          )

          # if credentials are passed in, try it
          if [ -n "$POSTGRES_USERNAME" ]; then
            sudo PGPASSWORD=$POSTGRES_PASSWORD -u $POSTGRES_USERNAME psql -t -A -c "${sql}" > /dev/null 2>&1 || true
            sudo rm -f .nr_script.sql > /dev/null 2>&1
          elif [ "$NR_CLI_DB_USERNAME" == "newrelic" ] && [ "$NR_CLI_DB_PASSWORD" == "$GEN_PASSWORD" ]; then
            sudo -u postgres psql -t -A -c "${sql}" > /dev/null 2>&1 || true
            sudo rm -f .nr_script.sql > /dev/null 2>&1
          fi

          # Check if we can connect using NR user
          IS_DATABASE_VALID=$(PGPASSWORD=$NR_CLI_DB_PASSWORD psql -U $NR_CLI_DB_USERNAME -w $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "select version();" 2>&1 | grep -i PostgreSQL | grep -v grep | wc -l)
          IS_DATABASE_VALID=${IS_DATABASE_VALID:-0}

          # If it's automatic install, fail here if unable to connect using defaut/env account
          if [[ "$NEW_RELIC_ASSUME_YES" == "true" ]]; then
            if [[ $IS_DATABASE_VALID -le "0" ]]; then
              echo "Could not create required user $NR_CLI_DB_USERNAME on $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT, database $NR_CLI_DATABASE"
              exit 130
            fi
          fi

          if [[ $IS_DATABASE_VALID -le "0" ]]; then
            TRIES=0
            echo -e "\nPlease provide Postgres credentials to connect"
            # the while statement prompt user for postgresql password if required
            # user will have 3 chances to enter correct password
            while [[ $TRIES -lt {{.MAX_RETRIES}} ]]; do
              ((TRIES++))
              read -r -p "Postgres Username (Default postgres)? " POSTGRES_USERNAME
              POSTGRES_USERNAME=${POSTGRES_USERNAME:-postgres}
              stty -echo  # To securely read password; 'read -s $VAR' showed 'illegal -s option' when tried
              read -r -p "Postgres Password? " POSTGRES_PASSWORD
              stty echo
              echo ""

              sudo PGPASSWORD=$POSTGRES_PASSWORD -u $POSTGRES_USERNAME psql -t -A -c "${sql}" > /dev/null 2>&1 || true
              sudo rm -f .nr_script.sql > /dev/null 2>&1
              IS_DATABASE_VALID=$(PGPASSWORD=$NR_CLI_DB_PASSWORD psql -U $NR_CLI_DB_USERNAME -w $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "select version();" 2>&1 | grep -i PostgreSQL | grep -v grep | wc -l)
              IS_DATABASE_VALID=${IS_DATABASE_VALID:-0}

              if [[ $IS_DATABASE_VALID -gt "0" ]]; then 
                break
              else
                printf "\n\nUnable to create the required newrelic user.  PostgreSQL account information is required.  Please try again.\n\n" >&3
              fi
            done
          fi

          # if still unable to connect exit out
          if [[ $IS_DATABASE_VALID -eq "0" ]]; then
            exit 130
          fi

          if [ "$NR_CLI_DB_USERNAME" == "" ]; then
            EXIT130=" - NR_CLI_DB_USERNAME=<postgres_username>\n"
          fi
          if [ "$NR_CLI_DB_PASSWORD" == "" ]; then
            EXIT130="$EXIT130 - NR_CLI_DB_PASSWORD=<postgres_password>\n"
          fi

          if [ "$EXIT130" != "" ]; then
            printf "You did not provide all the required environment variables. Please set the following variable(s) and try again:\n\n$EXIT130\n"
            exit 130
          else
            printf "\n[OK] All checks passed. Installing Postgres Integration...\n\n"
          fi

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
          # Get latest definitions and skip any failure because of deprecation
          sudo apt-get install nri-postgresql -y
          if [ -f /etc/newrelic-infra/integrations.d/postgresql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/postgresql-config.yml;
          fi
          sudo touch /etc/newrelic-infra/integrations.d/postgresql-config.yml;

          if [ "$NR_CLI_SSL" == "true" ]; then
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-postgresql
              env:
                HOSTNAME: $NR_CLI_DB_HOSTNAME
                PORT: $NR_CLI_DB_PORT
                USERNAME: $NR_CLI_DB_USERNAME
                PASSWORD: '$NR_CLI_DB_PASSWORD'
                DATABASE: $NR_CLI_DATABASE
                COLLECTION_LIST: 'ALL'
                COLLECT_DB_LOCK_METRICS: false
                ENABLE_SSL: true
                TRUST_SERVER_CERTIFICATE: $NR_CLI_TRUST_SERVER_CERTIFICATE
                SSL_ROOT_CERT_LOCATION: $NR_CLI_CERT_AUTH_FILE
                SSL_CERT_LOCATION: $NR_CLI_CLIENT_CERT_FILE
                SSL_KEY_LOCATION: $NR_CLI_CERT_KEY
                TIMEOUT: 10
              inventory_source: config/postgresql
              interval: 15s
          EOT
          else
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-postgresql
              env:
                HOSTNAME: $NR_CLI_DB_HOSTNAME
                PORT: $NR_CLI_DB_PORT
                USERNAME: $NR_CLI_DB_USERNAME
                PASSWORD: '$NR_CLI_DB_PASSWORD'
                DATABASE: $NR_CLI_DATABASE
                COLLECTION_LIST: 'ALL'
                COLLECT_DB_LOCK_METRICS: false
                ENABLE_SSL: false
                TIMEOUT: 10
              inventory_source: config/postgresql
              interval: 15s
          EOT
          fi

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

postInstall:
  info: |2
      ⚙️  The PostgreSQL configuration file can be found in /etc/newrelic-infra/integrations.d/postgresql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#config
