name: postgres-open-source-integration
displayName: PostgreSQL Open Source Integration
description: New Relic install recipe for default Postgres Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-postgresql

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - postgres

# CLI runs process detection; this is used to filter recipes that are appropriate for matched processes
processMatch:
  - postgres

# Matches partial list of the Log forwarding parameters
logMatch:
  - name: postgresql
    file: /var/log/postgresql/postgresql*.log

validationNrql: "SELECT count(*) from PostgresqlDatabaseSample where hostname like '{{.HOSTNAME}}' FACET entityGuid SINCE 10 minutes ago"

inputVars:
  - name: "NR_CLI_USERNAME"
    prompt: "Postgres Username"
  - name: "NR_CLI_PASSWORD"
    prompt: "Postgres Password"
    secret: true
  - name: "NR_CLI_DB_HOSTNAME"
    prompt: "Postgres Hostname (default: localhost)"
    default: "localhost"
  - name: "NR_CLI_DATABASE"
    prompt: "Postgres Database (default: postgres)"
    default: "postgres"
  - name: "NR_CLI_PORT"
    prompt: "Postgres Port (default: 5432)"
    default: 5432
  - name: "NR_CLI_SSL"
    prompt: "Use SSL to connect? (false/true)"
    default: false
  - name: "NR_CLI_CLIENT_CERT_FILE"
    prompt: "Client Certificate file (if applicable)"
  - name: "NR_CLI_CERT_KEY"
    prompt: "PEM key file (if applicable)"
  - name: "NR_CLI_TRUST_SERVER_CERTIFICATE"
    prompt: "Trust certificate? (false/true)"
    default: false
  - name: "NR_CLI_CERT_AUTH_FILE"
    prompt: "Certificate Authority file (if applicable)"

preInstall:
  info: |2
      To capture data from the PostgreSQL integration, you'll first need to meet these prerequisites:
      - PostgreSQL version requirement (see https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req)
      - User with READ permissions
      
      To create a new user, use these commands as reference (Note: username, 
      password, and similar user-specific values must be replaced):
      
      > CREATE USER new_relic WITH PASSWORD 'PASSWORD';
      > GRANT SELECT ON pg_stat_database TO new_relic;
      > GRANT SELECT ON pg_stat_database_conflicts TO new_relic;
      > GRANT SELECT ON pg_stat_bgwriter TO new_relic;

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: setup
        - task: restart

    assert_pre_req:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/new-relic-guided-installation-overview" >> /dev/stderr
            exit 1
          fi
        - |
          IS_DATABASE_VALID=$(PGPASSWORD={{.NR_CLI_PASSWORD}} psql -U {{.NR_CLI_USERNAME}} -w {{.NR_CLI_DATABASE}} -h {{.NR_CLI_DB_HOSTNAME}} -p {{.NR_CLI_PORT}} -c "select version();" 2>&1 | grep -i PostgreSQL | grep -v grep | wc -l)
          if [ $IS_DATABASE_VALID -eq 0 ] ; then
            echo "[Error]: The provided database name is not accessible with the provided username and password and port. See https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req for more info." >> /dev/stderr
            exit 2
          fi
        - |
          if [ {{.NR_CLI_SSL}} == true ]; then
            if [ ! -f {{.NR_CLI_CLIENT_CERT_FILE}} ]; then
              echo "[Error]: SSL is true but no client certificate file exist at '{{.NR_CLI_CLIENT_CERT_FILE}}'. See https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req for more info." >> /dev/stderr
              exit 11
            fi
            if [ ! -f {{.NR_CLI_CERT_KEY}} ]; then
              echo "[Error]: SSL is true but no PEM key file exist at '{{.NR_CLI_CERT_KEY}}'. See https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req for more info." >> /dev/stderr
              exit 12
            fi
          fi
          if [ {{.NR_CLI_TRUST_SERVER_CERTIFICATE}} == true ]; then
            if [ ! -f {{.NR_CLI_CERT_AUTH_FILE}} ]; then
              echo "[Error]: Trust certificate is true but no certificate authority file exist at '{{.NR_CLI_CERT_AUTH_FILE}}'. See https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req for more info." >> /dev/stderr
              exit 13
            fi
          fi

    setup:
      label: "Installing PostgreSQL integration..."
      cmds:
        - |
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
        - |
          sudo apt-get update -yq
        - |
          sudo apt-get install nri-postgresql -y
        - |
          if [ -f /etc/newrelic-infra/integrations.d/postgresql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/postgresql-config.yml;
          fi
          sudo touch /etc/newrelic-infra/integrations.d/postgresql-config.yml;
        - |
          if [ {{.NR_CLI_SSL}} == true ]; then
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.postgresql
          instances:
            - name: postgres
              command: all_data
              arguments:
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                hostname: {{.NR_CLI_DB_HOSTNAME}}
                database: {{.NR_CLI_DATABASE}}
                port: {{.NR_CLI_PORT}}
                collection_list: 'ALL'
                collect_db_lock_metrics: false
                enable_ssl: true
                trust_server_certificate: {{.NR_CLI_TRUST_SERVER_CERTIFICATE}}
                ssl_root_cert_location: {{.NR_CLI_CERT_AUTH_FILE}}
                ssl_cert_location: {{.NR_CLI_CLIENT_CERT_FILE}}
                ssl_key_location: {{.NR_CLI_CERT_KEY}}
                timeout: 10
          EOT
          else
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.postgresql
          instances:
            - name: postgres
              command: all_data
              arguments:
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                hostname: {{.NR_CLI_DB_HOSTNAME}}
                database: {{.NR_CLI_DATABASE}}
                port: {{.NR_CLI_PORT}}
                collection_list: 'ALL'
                collect_db_lock_metrics: false
                enable_ssl: false
                timeout: 10
          EOT
          fi

    restart:
      cmds:
        - |
          if [ -f /etc/init.d/newrelic-infra ]; then
            sudo /etc/init.d/newrelic-infra restart > /dev/null;
          else
            sudo systemctl restart newrelic-infra.service
          fi

postInstall:
  info: |2
      ⚙️  The PostgreSQL configuration file can be found in /etc/newrelic-infra/integrations.d/postgresql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#config
