name: postgres-open-source-integration
displayName: PostgreSQL Integration
description: New Relic install recipe for default Postgres Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-postgresql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "amazon"
    platformVersion: "2"
  - type: host
    os: linux
    platform: "redhat"
  - type: host
    os: linux
    platform: "centos"
  - type: host
    os: linux
    platformFamily: rhel

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - postgres

# CLI runs process detection; this is used to filter recipes that are appropriate for matched processes
processMatch:
  - postgres

# Matches partial list of the Log forwarding parameters
logMatch:
  - name: postgresql
    file: /var/log/postgresql/postgresql*.log

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
validationIntegration: postgresql

# DEPRECATED
validationNrql: "SELECT count(*) from PostgresqlDatabaseSample FACET entityGuid SINCE 10 minutes ago WHERE reportingAgent = '{{.INFRA_KEY}}'"

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
      To capture data from the PostgreSQL integration, we need to create a new PostgreSQL user with specific permissions (READ).
      The installation will create a strong randomly generated password for that new user.
      This installation may prompt for your postgres user password in order to create this new user.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#comp-req

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: assert_pre_req
        - task: input_assert
          vars:
            MAX_RETRIES: 3
            EXIT130: ""
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview" >&2
            exit 1
          fi

    assert_pre_req:
      cmds:
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="date:41 sha256sum:42 base64:43 head:44 awk:12"
          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)
            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    input_assert:
      cmds:
        - |
          TRIES=0

          # Check Env Vars
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          NR_CLI_DB_HOSTNAME="{{.NR_CLI_DB_HOSTNAME}}"
          NR_CLI_DB_PORT="{{.NR_CLI_DB_PORT}}"
          NR_CLI_DB_USERNAME="{{.NR_CLI_DB_USERNAME}}"
          NR_CLI_DB_PASSWORD="{{.NR_CLI_DB_PASSWORD}}"
          NR_CLI_DATABASE="{{.NR_CLI_DATABASE}}"
          NR_CLI_DB_VERSION="{{.NR_CLI_DB_VERSION}}"
          NR_CLI_SSL="{{.NR_CLI_SSL}}"
          NR_CLI_CLIENT_CERT_FILE="{{.NR_CLI_CLIENT_CERT_FILE}}"
          NR_CLI_CERT_KEY="{{.NR_CLI_CERT_KEY}}"
          NR_CLI_TRUST_SERVER_CERTIFICATE="{{.NR_CLI_TRUST_SERVER_CERTIFICATE}}"
          NR_CLI_CERT_AUTH_FILE="{{.NR_CLI_CERT_AUTH_FILE}}"
          NR_CLI_SLOW_QUERY="{{.NR_CLI_SLOW_QUERY}}"

          # Set Defaults
          NR_CLI_DB_HOSTNAME=${NR_CLI_DB_HOSTNAME:-'localhost'}
          NR_CLI_DB_PORT=${NR_CLI_DB_PORT:-'5432'}
          NR_CLI_DATABASE=${NR_CLI_DATABASE:-'postgres'}
          NR_CLI_DB_VERSION=${NR_CLI_DB_VERSION:-'12'}
          NR_CLI_SSL=${NR_CLI_SSL:='false'}
          NR_CLI_TRUST_SERVER_CERTIFICATE=${NR_CLI_TRUST_SERVER_CERTIFICATE:-'false'}
          NR_CLI_DB_USERNAME=${NR_CLI_DB_USERNAME:-'newrelic'}
          GEN_PASSWORD=$(echo -n $(date +%s | sha256sum | base64 | head -c 16); echo "oO0$")
          NR_CLI_DB_PASSWORD=${NR_CLI_DB_PASSWORD:-"$GEN_PASSWORD"}

          # Check the Query monitoring status in previous installation
          QUERY_MONITORING_PREVIOUSLY_ENABLED=0
          if [[ -f /etc/newrelic-infra/integrations.d/postgresql-config.yml ]] && grep -qE '^\s*ENABLE_QUERY_MONITORING\s*:\s*true\s*$' /etc/newrelic-infra/integrations.d/postgresql-config.yml; then
            QUERY_MONITORING_PREVIOUSLY_ENABLED=1
          fi

          # Only execute the PostgreSQL version detection when NR_CLI_SLOW_QUERY is true
          if [[ "$NR_CLI_SLOW_QUERY" == "true" ]]; then
            # Check the host's PostgreSQL version
            HOST_PG_VERSION=""
            if command -v psql &> /dev/null; then
              # Get full PostgreSQL version but only keep the major version number (e.g., 16.8 -> 16)
              HOST_PG_VERSION=$(psql --version | awk '{print $3}' | cut -d. -f1 || echo "")
              if [[ -n "$HOST_PG_VERSION" ]]; then
                echo "[INFO] Detected PostgreSQL major version on host: $HOST_PG_VERSION"
                # Only update if not explicitly set by user
                if [[ "$NR_CLI_DB_VERSION" == "12" ]]; then
                  NR_CLI_DB_VERSION="$HOST_PG_VERSION"
                  echo "[INFO] Using detected host PostgreSQL major version: $NR_CLI_DB_VERSION"
                fi
              fi
            fi

            # If psql command not available, try to detect from installed packages
            if [[ -z "$HOST_PG_VERSION" ]]; then
              if command -v rpm &> /dev/null; then
                INSTALLED_PG=$(rpm -qa | grep postgresql-server | head -1 || echo "")
                if [[ -n "$INSTALLED_PG" ]]; then
                  # Extract only the major version number 
                  HOST_PG_VERSION=$(echo "$INSTALLED_PG" | grep -oP 'postgresql-server-\K[0-9]+' || echo "")
                  if [[ -n "$HOST_PG_VERSION" ]]; then
                    echo "[INFO] Detected PostgreSQL major version from installed packages: $HOST_PG_VERSION"
                    # Only update if not explicitly set by user
                    if [[ "$NR_CLI_DB_VERSION" == "12" ]]; then
                      NR_CLI_DB_VERSION="$HOST_PG_VERSION"
                      echo "[INFO] Using detected installed PostgreSQL major version: $NR_CLI_DB_VERSION"
                    fi
                  fi
                fi
              fi
            fi
          fi

          # Detect PostgreSQL version if not provided or confirm the user's choice
          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            # Instead of trying to detect version by connecting with newrelic user,
            # we'll check if postgres admin credentials were provided earlier and use those
            if [[ -n "$POSTGRES_USERNAME" && -n "$POSTGRES_PASSWORD" ]]; then
              DETECTED_VERSION=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USERNAME -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -t -c "SHOW server_version;" | awk '{print $1}' | cut -d'.' -f1 || echo "")
              
              if [[ -n "$DETECTED_VERSION" ]]; then
                echo "[INFO] Detected PostgreSQL major version: $DETECTED_VERSION"
                # Automatically use the detected version without prompting - using only major version number
                NR_CLI_DB_VERSION=$DETECTED_VERSION
                echo "[INFO] Using detected PostgreSQL major version: $NR_CLI_DB_VERSION"
              fi
            fi
          fi

          # Add to config debug output
          echo "[INFO] Using PostgreSQL version: $NR_CLI_DB_VERSION" | sudo tee -a {{.NEW_RELIC_CLI_LOG_FILE_PATH}} > /dev/null

          # Check default connect
          CAN_CONNECT=$(curl $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
          CAN_CONNECT=${CAN_CONNECT:-0}

          if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
            while [[ $TRIES -lt {{.MAX_RETRIES}} && "$CAN_CONNECT" == "7" ]]; do
              printf "\nPlease enter the port number for your PostgreSQL instance: "
              read -r NR_CLI_DB_PORT
              ((TRIES++))
              CAN_CONNECT=$(curl $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
              CAN_CONNECT=${CAN_CONNECT:-0}

              if [ $CAN_CONNECT == "7" ]; then
                printf "\n\nUnable to connect your PostgreSQL instance using provided port.\n" >&3
                if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 7; fi
                echo "Please try again"
              fi
            done
          else
            if [[ "$CAN_CONNECT" == "7" ]]; then
              printf "\n\nUnable to connect your PostgreSQL instance using provided port.\n" >&2
              exit 7
            fi
          fi

          # Script to insert required default NR user
          sql=$(cat <<EOT
          DO
          \$do\$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE  rolname = 'newrelic') THEN
              CREATE ROLE newrelic LOGIN PASSWORD '$GEN_PASSWORD';
            END IF;
            ALTER USER newrelic WITH PASSWORD '$GEN_PASSWORD';
            GRANT SELECT ON pg_stat_database TO \"$NR_CLI_DB_USERNAME\";
            GRANT SELECT ON pg_stat_database_conflicts TO \"$NR_CLI_DB_USERNAME\";
            GRANT SELECT ON pg_stat_bgwriter TO \"$NR_CLI_DB_USERNAME\";
          END
          \$do\$;

          EOT
          )

          # if credentials are passed in, try it
          if [ -n "$POSTGRES_USERNAME" ]; then
            sudo PGPASSWORD=$POSTGRES_PASSWORD -u $POSTGRES_USERNAME psql -t -A -c "${sql}" > /dev/null 2>&1 || true
            sudo rm -f .nr_script.sql > /dev/null 2>&1
          elif [ "$NR_CLI_DB_USERNAME" == "newrelic" ] && [ "$NR_CLI_DB_PASSWORD" == "$GEN_PASSWORD" ]; then
            sudo -u postgres psql -t -A -c "${sql}" > /dev/null 2>&1 || true
            sudo rm -f .nr_script.sql > /dev/null 2>&1
          fi

          # Check if we can connect using NR user
          IS_DATABASE_VALID=$(PGPASSWORD=$NR_CLI_DB_PASSWORD psql -U $NR_CLI_DB_USERNAME -w $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "select version();" 2>&1 | grep -i PostgreSQL | grep -v grep | wc -l)
          IS_DATABASE_VALID=${IS_DATABASE_VALID:-0}

          # If it's automatic install, fail here if unable to connect using defaut/env account
          if [[ "$NEW_RELIC_ASSUME_YES" == "true" ]]; then
            if [[ $IS_DATABASE_VALID -le "0" ]]; then
              echo "Could not create required user $NR_CLI_DB_USERNAME on $NR_CLI_DB_HOSTNAME:$NR_CLI_DB_PORT, database $NR_CLI_DATABASE"
              exit 130
            fi
          fi

          if [[ $IS_DATABASE_VALID -le "0" ]]; then
            TRIES=0
            echo -e "\nPlease provide Postgres credentials to connect"
            # the while statement prompt user for postgresql password if required
            # user will have 3 chances to enter correct password
            while [[ $TRIES -lt {{.MAX_RETRIES}} ]]; do
              ((TRIES++))
              read -r -p "Postgres Username (Default postgres)? " POSTGRES_USERNAME
              POSTGRES_USERNAME=${POSTGRES_USERNAME:-postgres}
              stty -echo  # To securely read password; 'read -s $VAR' showed 'illegal -s option' when tried
              read -r -p "Postgres Password? " POSTGRES_PASSWORD
              stty echo
              echo ""

              sudo PGPASSWORD=$POSTGRES_PASSWORD -u $POSTGRES_USERNAME psql -t -A -c "${sql}" > /dev/null 2>&1 || true
              sudo rm -f .nr_script.sql > /dev/null 2>&1
              IS_DATABASE_VALID=$(PGPASSWORD=$NR_CLI_DB_PASSWORD psql -U $NR_CLI_DB_USERNAME -w $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "select version();" 2>&1 | grep -i PostgreSQL | grep -v grep | wc -l)
              IS_DATABASE_VALID=${IS_DATABASE_VALID:-0}

              if [[ $IS_DATABASE_VALID -gt "0" ]]; then 
                break
              else
                printf "\n\nUnable to create the required newrelic user.  PostgreSQL account information is required.  Please try again.\n\n" >&3
              fi
            done
          fi

          # if still unable to connect exit out
          if [[ $IS_DATABASE_VALID -eq "0" ]]; then
            exit 130
          fi

          if [ "$NR_CLI_DB_USERNAME" == "" ]; then
            EXIT130=" - NR_CLI_DB_USERNAME=<postgres_username>\n"
          fi
          if [ "$NR_CLI_DB_PASSWORD" == "" ]; then
            EXIT130="$EXIT130 - NR_CLI_DB_PASSWORD=<postgres_password>\n"
          fi

          if [ "$EXIT130" != "" ]; then
            printf "You did not provide all the required environment variables. Please set the following variable(s) and try again:\n\n$EXIT130\n"
            exit 130
          else
            printf "\n[OK] All checks passed. Installing Postgres Integration...\n\n"
          fi

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
          sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
          sudo yum install nri-postgresql -y
          
          # Only install and configure pg_wait_sampling and pg_stat_monitor when slow query flag is enabled
          if [[ "$NR_CLI_SLOW_QUERY" == "true" ]]; then
            # Install pg_wait_sampling and pg_stat_monitor for PostgreSQL based on detected major version
            if [[ -n "$NR_CLI_DB_VERSION" ]]; then
              echo "[INFO] Installing pg_wait_sampling_${NR_CLI_DB_VERSION} package for PostgreSQL ${NR_CLI_DB_VERSION}"
              sudo dnf install -y pg_wait_sampling_${NR_CLI_DB_VERSION} || echo "[WARNING] Failed to install pg_wait_sampling_${NR_CLI_DB_VERSION}. This package may not be available in your repositories."
              
              echo "[INFO] Installing pg_stat_monitor_${NR_CLI_DB_VERSION} package for PostgreSQL ${NR_CLI_DB_VERSION}"
              sudo dnf install -y pg_stat_monitor_${NR_CLI_DB_VERSION} || echo "[WARNING] Failed to install pg_stat_monitor_${NR_CLI_DB_VERSION}. This package may not be available in your repositories."
            fi
            
            echo "[INFO] NR_CLI_SLOW_QUERY is enabled. Setting up PostgreSQL for query monitoring..."
            
            # Find PostgreSQL configuration directory and file
            PG_CONFIG_DIR="/var/lib/pgsql/${NR_CLI_DB_VERSION}/data"
            PG_CONFIG_FILE="${PG_CONFIG_DIR}/postgresql.conf"
            
            # If the standard path doesn't exist, try to find it
            if [ ! -d "$PG_CONFIG_DIR" ]; then
              echo "[INFO] Searching for PostgreSQL configuration directory..."
              # Try alternative locations
              for dir in /var/lib/pgsql/*/data /var/lib/postgresql/*/data; do
                if [ -d "$dir" ]; then
                  PG_CONFIG_DIR="$dir"
                  PG_CONFIG_FILE="${PG_CONFIG_DIR}/postgresql.conf"
                  echo "[INFO] Found PostgreSQL configuration directory: $PG_CONFIG_DIR"
                  break
                fi
              done
            fi
            
            if [ -f "$PG_CONFIG_FILE" ]; then
              echo "[INFO] Found PostgreSQL configuration file: $PG_CONFIG_FILE"
              
              # Create backup of the configuration file
              sudo cp "$PG_CONFIG_FILE" "$PG_CONFIG_FILE.bak"
              echo "[INFO] Created backup of PostgreSQL configuration at $PG_CONFIG_FILE.bak"
              
              # Check if shared_preload_libraries is already configured
              if grep -q "^shared_preload_libraries" "$PG_CONFIG_FILE"; then
                echo "[INFO] shared_preload_libraries already configured in $PG_CONFIG_FILE"
                # Check if it includes all the extensions we need
                if ! grep -q "shared_preload_libraries.*pg_stat_statements.*pg_wait_sampling.*pg_stat_monitor" "$PG_CONFIG_FILE"; then
                  echo "[INFO] Updating shared_preload_libraries to include all required extensions"
                  sudo sed -i 's/^shared_preload_libraries.*/shared_preload_libraries = '\''pg_stat_statements, pg_wait_sampling, pg_stat_monitor'\''/' "$PG_CONFIG_FILE"
                fi
              elif grep -q "^#shared_preload_libraries" "$PG_CONFIG_FILE"; then
                echo "[INFO] Uncommenting and setting shared_preload_libraries"
                sudo sed -i 's/^#shared_preload_libraries.*/shared_preload_libraries = '\''pg_stat_statements, pg_wait_sampling, pg_stat_monitor'\''/' "$PG_CONFIG_FILE"
              else
                echo "[INFO] Adding shared_preload_libraries configuration"
                echo "shared_preload_libraries = 'pg_stat_statements, pg_wait_sampling, pg_stat_monitor'" | sudo tee -a "$PG_CONFIG_FILE" > /dev/null
              fi
              
              # Add pg_stat_statements settings if not already present
              if ! grep -q "^pg_stat_statements.max" "$PG_CONFIG_FILE"; then
                echo "pg_stat_statements.max = 10000" | sudo tee -a "$PG_CONFIG_FILE" > /dev/null
                echo "[INFO] Added pg_stat_statements.max = 10000"
              fi
              
              if ! grep -q "^pg_stat_statements.track" "$PG_CONFIG_FILE"; then
                echo "pg_stat_statements.track = all" | sudo tee -a "$PG_CONFIG_FILE" > /dev/null
                echo "[INFO] Added pg_stat_statements.track = all"
              fi
              
              if ! grep -q "^pg_stat_statements.save" "$PG_CONFIG_FILE"; then
                echo "pg_stat_statements.save = on" | sudo tee -a "$PG_CONFIG_FILE" > /dev/null
                echo "[INFO] Added pg_stat_statements.save = on"
              fi
              
              # Notify user about the need to restart PostgreSQL
              echo -e "\n[IMPORTANT] PostgreSQL configuration has been updated. You need to restart PostgreSQL to apply these changes."
              echo "[INFO] You can restart PostgreSQL with: sudo systemctl restart postgresql-${NR_CLI_DB_VERSION}"
              
              # Offer to restart PostgreSQL
              if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]]; then
                printf "\nRestart your PostgreSQL instance to enable the query monitoring settings? (y/n): "
                read -r DB_RESTART
                DB_RESTART=${DB_RESTART:-y}
                
                if [ "$DB_RESTART" = "y" ]; then
                  echo "[INFO] Restarting PostgreSQL..."
                  if systemctl status postgresql-${NR_CLI_DB_VERSION} >/dev/null 2>&1; then
                    sudo systemctl restart postgresql-${NR_CLI_DB_VERSION}
                    echo "[INFO] PostgreSQL restarted using systemctl"
                  elif systemctl status postgresql >/dev/null 2>&1; then
                    sudo systemctl restart postgresql
                    echo "[INFO] PostgreSQL restarted using systemctl"
                  else
                    sudo service postgresql restart
                    echo "[INFO] PostgreSQL restarted using service command"
                  fi
                  PG_RESTART_DONE="true"
                else
                  echo "[INFO] Skipping PostgreSQL restart. Changes will apply after next restart."
                  PG_RESTART="n"
                fi
              fi
            else
              echo "[WARNING] Could not find PostgreSQL configuration file. Please manually update your PostgreSQL configuration."
              echo "[INFO] You need to add the following to your postgresql.conf file:"
              echo "shared_preload_libraries = 'pg_stat_statements, pg_wait_sampling, pg_stat_monitor'"
              echo "pg_stat_statements.max = 10000"
              echo "pg_stat_statements.track = all"
              echo "pg_stat_statements.save = on"
            fi
            
            # Create extensions in the database if we have admin access
            if [[ -n "$POSTGRES_USERNAME" && -n "$POSTGRES_PASSWORD" ]]; then
              echo "[INFO] Trying to create PostgreSQL extensions in database $NR_CLI_DATABASE..."
              
              # Create extensions using admin credentials
              EXTENSION_OUTPUT=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_stat_statements extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_stat_statements extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              EXTENSION_OUTPUT=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_wait_sampling;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_wait_sampling extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_wait_sampling extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              EXTENSION_OUTPUT=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_stat_monitor;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_stat_monitor extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_stat_monitor extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              # Grant additional permissions to the newrelic user
              echo "[INFO] Granting additional permissions to user $NR_CLI_DB_USERNAME..."
              PERMISSION_OUTPUT=$(PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "GRANT pg_read_all_stats TO $NR_CLI_DB_USERNAME;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully granted pg_read_all_stats to $NR_CLI_DB_USERNAME"
              else
                echo -e "\033[0;33m[WARNING] Could not grant pg_read_all_stats to $NR_CLI_DB_USERNAME: $PERMISSION_OUTPUT\033[0m" >&2
              fi
            else
              # Connect to PostgreSQL and enable extensions in the database
              echo "[INFO] Trying to enable PostgreSQL extensions in database $NR_CLI_DATABASE..."
              
              # Use postgres admin credentials to create extensions
              echo "Please provide PostgreSQL admin credentials to create extensions"
              printf "PostgreSQL Admin Username (Default postgres)? "
              read -r ADMIN_USERNAME
              ADMIN_USERNAME=${ADMIN_USERNAME:-postgres}
              
              stty -echo
              printf "Enter PostgreSQL Admin Password: "
              read -r ADMIN_PASSWORD
              stty echo
              printf "\n"
              
              # Create extensions using admin credentials
              EXTENSION_OUTPUT=$(PGPASSWORD=$ADMIN_PASSWORD psql -U $ADMIN_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_stat_statements extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_stat_statements extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              EXTENSION_OUTPUT=$(PGPASSWORD=$ADMIN_PASSWORD psql -U $ADMIN_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_wait_sampling;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_wait_sampling extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_wait_sampling extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              EXTENSION_OUTPUT=$(PGPASSWORD=$ADMIN_PASSWORD psql -U $ADMIN_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "CREATE EXTENSION IF NOT EXISTS pg_stat_monitor;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully created pg_stat_monitor extension"
              else
                echo -e "\033[0;33m[WARNING] Could not create pg_stat_monitor extension: $EXTENSION_OUTPUT\033[0m" >&2
              fi
              
              # Try to provide additional permissions if possible
              echo "[INFO] Trying to grant additional permissions to user $NR_CLI_DB_USERNAME..."
              PERMISSION_OUTPUT=$(PGPASSWORD=$ADMIN_PASSWORD psql -U $ADMIN_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "GRANT pg_read_all_stats TO $NR_CLI_DB_USERNAME;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully granted pg_read_all_stats to $NR_CLI_DB_USERNAME"
              else
                echo -e "\033[0;33m[WARNING] Could not grant pg_read_all_stats to $NR_CLI_DB_USERNAME: $PERMISSION_OUTPUT\033[0m" >&2
              fi
              
              PERMISSION_OUTPUT=$(PGPASSWORD=$ADMIN_PASSWORD psql -U $ADMIN_USERNAME -d $NR_CLI_DATABASE -h $NR_CLI_DB_HOSTNAME -p $NR_CLI_DB_PORT -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO $NR_CLI_DB_USERNAME;" 2>&1)
              if [ $? -eq 0 ]; then
                echo "[INFO] Successfully granted SELECT permissions to $NR_CLI_DB_USERNAME"
              else
                echo -e "\033[0;33m[WARNING] Could not grant table SELECT permissions to $NR_CLI_DB_USERNAME: $PERMISSION_OUTPUT\033[0m" >&2
              fi
            fi
          fi
          
          if [ -f /etc/newrelic-infra/integrations.d/postgresql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/postgresql-config.yml;
          fi
          sudo touch /etc/newrelic-infra/integrations.d/postgresql-config.yml;

          # Conditionally enable query monitoring
          ENABLE_QUERY_MONITORING=""
          if [[ "$NR_CLI_SLOW_QUERY" == "true" || $QUERY_MONITORING_PREVIOUSLY_ENABLED -eq 1 ]]; then
            ENABLE_QUERY_MONITORING="ENABLE_QUERY_MONITORING: true"
            
            if [[ "$QUERY_MONITORING_PREVIOUSLY_ENABLED" -eq 1 ]]; then
              echo -e "\033[0;33m[Warning] Query monitoring was previously enabled. This guided install will keep this setting, but cannot safely turn these off if needed. Please find details of what was enabled in a previous guided install in the log file /root/.newrelic/newrelic-cli.log. These details need to be manually reverted, if so desired.\033[0m" >&2
            fi
          fi

          if [ "$NR_CLI_SSL" == "true" ]; then
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-postgresql
              env:
                HOSTNAME: $NR_CLI_DB_HOSTNAME
                PORT: $NR_CLI_DB_PORT
                USERNAME: $NR_CLI_DB_USERNAME
                PASSWORD: '$NR_CLI_DB_PASSWORD'
                DATABASE: $NR_CLI_DATABASE
                COLLECTION_LIST: 'ALL'
                COLLECT_DB_LOCK_METRICS: false
                ENABLE_SSL: true
                TRUST_SERVER_CERTIFICATE: $NR_CLI_TRUST_SERVER_CERTIFICATE
                SSL_ROOT_CERT_LOCATION: $NR_CLI_CERT_AUTH_FILE
                SSL_CERT_LOCATION: $NR_CLI_CLIENT_CERT_FILE
                SSL_KEY_LOCATION: $NR_CLI_CERT_KEY
                TIMEOUT: 10
                $ENABLE_QUERY_MONITORING
              inventory_source: config/postgresql
              interval: 15s
          EOT
          else
            sudo tee -a /etc/newrelic-infra/integrations.d/postgresql-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-postgresql
              env:
                HOSTNAME: $NR_CLI_DB_HOSTNAME
                PORT: $NR_CLI_DB_PORT
                USERNAME: $NR_CLI_DB_USERNAME
                PASSWORD: '$NR_CLI_DB_PASSWORD'
                DATABASE: $NR_CLI_DATABASE
                COLLECTION_LIST: 'ALL'
                COLLECT_DB_LOCK_METRICS: false
                ENABLE_SSL: false
                TIMEOUT: 10
                $ENABLE_QUERY_MONITORING
              inventory_source: config/postgresql
              interval: 15s
          EOT
          fi

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

postInstall:
  info: |2
      ⚙️  The PostgreSQL configuration file can be found in /etc/newrelic-infra/integrations.d/postgresql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration#config
