# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: mssql-server-integration-installer
displayName: Microsoft/SqlServer Integration
description: New Relic install recipe for the Microsoft SqlServer Integration
repository: https://github.com/newrelic/nri-mssql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: windows

keywords:
  - Integration
  - SqlServer
  - Windows

processMatch: []

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
validationIntegration: mssql

# DEPRECATED
validationNrql: "SELECT count(*) from MssqlInstanceSample FACET entityGuid SINCE 10 minutes ago WHERE reportingAgent = '{{.INFRA_KEY}}'"

preInstall:
  requireAtDiscovery: |
      powershell -command '
      if ($env:NEW_RELIC_AZURE_DEPLOYMENT_TYPE -eq "AZURE_SQL_MANAGED_INSTANCE") {
          Write-Host "Azure SQL Managed Instance deployment type detected."

          $azureHostname = if ($env:NEW_RELIC_MSSQL_DB_HOSTNAME) { $env:NEW_RELIC_MSSQL_DB_HOSTNAME } else { $env:NR_CLI_DB_HOSTNAME }
          if ([string]::IsNullOrWhiteSpace($azureHostname)) {
              Write-Error "ERROR: NEW_RELIC_AZURE_DEPLOYMENT_TYPE is AZURE_SQL_MANAGED_INSTANCE but NEW_RELIC_MSSQL_DB_HOSTNAME or NR_CLI_DB_HOSTNAME is not set."
              exit 5 # Exit code for missing hostname
          }

          $azurePort = if ($env:NEW_RELIC_MSSQL_DB_PORT) { $env:NEW_RELIC_MSSQL_DB_PORT } else { $env:NR_CLI_DB_PORT }
          if ([string]::IsNullOrWhiteSpace($azurePort)) {
              $azurePort = "1433"
          }
          $connectionString = "${azureHostname},${azurePort}"

          $azureAuthMode = $env:NEW_RELIC_MSSQL_AZURE_AUTH_MODE
          if ([string]::IsNullOrWhiteSpace($azureAuthMode)) {
              $azureAuthMode = "SQL" # Default to SQL authentication
          }
          Write-Host "Azure Authentication Mode: $azureAuthMode"

          # Fetch username commonly needed by several auth modes
          $sqlUsername = $env:NEW_RELIC_MSSQL_SQL_USERNAME

          # Validate sqlUsername if the selected auth mode requires it
          if (($azureAuthMode -eq "SQL") -and [string]::IsNullOrWhiteSpace($sqlUsername)) {
              Write-Error "ERROR: NEW_RELIC_MSSQL_SQL_USERNAME environment variable must be set when NEW_RELIC_MSSQL_AZURE_AUTH_MODE is '$azureAuthMode'."
              exit 10 # New exit code for missing username when required by the selected mode
          }

          $fullSqlCommandToExecute = ""

          Switch ($azureAuthMode) {
              "SQL" {
                  $sqlPassword = $env:NEW_RELIC_MSSQL_SQL_PASSWORD
                  if ([string]::IsNullOrWhiteSpace($sqlPassword)) {
                      Write-Error "ERROR: For SQL Authentication (mode 'SQL'), NEW_RELIC_MSSQL_SQL_PASSWORD environment variable must be set."
                      exit 6 # Exit code for missing SQL password
                  }
                  Write-Host "Using SQL Authentication with User: $sqlUsername"
                  $fullSqlCommandToExecute = "sqlcmd -S ""$connectionString"" -U ""$sqlUsername"" -P ""$sqlPassword"" -Q ""SELECT @@SERVERNAME"" -l 1 -W -w 200 -b"
              }
              Default {
                  Write-Error "ERROR: Invalid NEW_RELIC_MSSQL_AZURE_AUTH_MODE: '$azureAuthMode'. Supported modes: SQL Authentication."
                  exit 8 # Exit code for invalid authentication mode
              }
          }

          $outputLines = Invoke-Expression $fullSqlCommandToExecute
          $sqlCmdExitCode = $LASTEXITCODE

          if ($sqlCmdExitCode -eq 0 -and $outputLines -and $outputLines.Count -ge 3) {
              $serviceName = $outputLines[2].ToString().Trim()
              if (-not [string]::IsNullOrWhiteSpace($serviceName) -and $serviceName -notlike "Msg*" -and $serviceName -notlike "Sqlcmd: Error*") {
                  Write-Host "SUCCESS: Successfully connected to Azure SQL Managed Instance ($connectionString) and retrieved service name: $serviceName"
                  exit 0
              } else {
                  Write-Error "ERROR: Connected to Azure SQL Managed Instance ($connectionString) but failed to retrieve a valid service name."
                  exit 4 
              }
          } else {
              Write-Error "ERROR: Failed to connect or execute query on Azure SQL Managed Instance ($connectionString). sqlcmd exit code: $sqlCmdExitCode."
              exit 4 
          }
      } else {
        $loginModes = (Get-ItemProperty -path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\*\*" -name "LoginMode" -ErrorAction SilentlyContinue | Where-Object -Property loginMode -eq -Value "2")

        $instances = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server").InstalledInstances

        $NEW_RELIC_MSSQL_DB_HOSTNAME = if ($env:NEW_RELIC_MSSQL_DB_HOSTNAME) { $env:NEW_RELIC_MSSQL_DB_HOSTNAME } else { $env:NR_CLI_DB_HOSTNAME };
        if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_HOSTNAME)) {$NEW_RELIC_MSSQL_DB_HOSTNAME = hostname}
        
        $NEW_RELIC_MSSQL_DB_PORT = if ($env:NEW_RELIC_MSSQL_DB_PORT) { $env:NEW_RELIC_MSSQL_DB_PORT } else { $env:NR_CLI_DB_PORT };
        if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_PORT)) {$NEW_RELIC_MSSQL_DB_PORT = "1433"}

        # Loop on each instance names to see if we can connect
        foreach ($instance in $instances) {
          $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME}\${instance},${NEW_RELIC_MSSQL_DB_PORT}"
          $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
          If ($name.Length -ge 3) {
            $actualName = $name[2].ToString().Trim();
            If ($actualName -eq $instance) {
              $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
              if (-Not ($canLogin -eq $null)) {
                Write-Host "Found at least 1 instance connecting on default port"
                exit 0
              }
            }
          }

          $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME}\${instance}"
          $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
          If ($name.Length -ge 3) {
            $actualName = $name[2].ToString().Trim();
            If ($actualName -eq $instance) {
              $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
              if (-Not ($canLogin -eq $null)) {
                Write-Host "# Found at least 1 instance connecting"
                exit 0
              }
            }
          }

          $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME},${NEW_RELIC_MSSQL_DB_PORT}"
          $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
          If ($name.Length -ge 3) {
            $actualName = $name[2].ToString().Trim();
            If ($actualName -eq $instance) {
              $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
              if (-Not ($canLogin -eq $null)) {
                Write-Host "# Found at least 1 instance connecting"
                exit 0
              }
            }
          }

        }
        exit 3 
      }
      '
  info: |
      To capture data from the Microsoft SqlServer integration, we need to create a new SqlServer user with specific permissions (CONNECT, VIEW SERVER STATE, READ).
      The installation will create a strong randomly generated password for that new user.
      Note, this installation requires Sql Server Authentication, also referenced as Mixed mode.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#about

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: stop_infra
        - task: input_install


    assert_infra:
      cmds:
        - |
          powershell -command '
          $output = Get-Service "newrelic-infra"
          if ( -not ($output -like "*newrelic-infra*") ) {
            Write-Host -ForegroundColor Red "The newrelic-infra agent service is not installed on the host, but is required to install this integration. Please install the newrelic infrastructure agent."
            Exit 1
          }
          '

    stop_infra:
      cmds:
        - |
          powershell -command '
          Stop-Service newrelic-infra
          '

    input_install:
      cmds:
        - |
          powershell -command '
          $TRIES=0
          $MAX_RETRIES=3

          # Check Env Vars
          $NEW_RELIC_MSSQL_DB_HOSTNAME = if ($env:NEW_RELIC_MSSQL_DB_HOSTNAME) { $env:NEW_RELIC_MSSQL_DB_HOSTNAME } else { $env:NR_CLI_DB_HOSTNAME };
          if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_HOSTNAME)) {$NEW_RELIC_MSSQL_DB_HOSTNAME = hostname}

          $NEW_RELIC_MSSQL_DB_PORT = if ($env:NEW_RELIC_MSSQL_DB_PORT) { $env:NEW_RELIC_MSSQL_DB_PORT } else { $env:NR_CLI_DB_PORT };
          if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_PORT)) {$NEW_RELIC_MSSQL_DB_PORT = "1433"}

          $NEW_RELIC_MSSQL_DB_USERNAME = if ($env:NEW_RELIC_MSSQL_DB_USERNAME) { $env:NEW_RELIC_MSSQL_DB_USERNAME } else { $env:NR_CLI_DB_USERNAME };
          if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_USERNAME)) {$NEW_RELIC_MSSQL_DB_USERNAME = "newrelic"}

          $NEW_RELIC_MSSQL_DB_PASSWORD = if ($env:NEW_RELIC_MSSQL_DB_PASSWORD) { $env:NEW_RELIC_MSSQL_DB_PASSWORD } else { $env:NR_CLI_DB_PASSWORD };
          if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_PASSWORD)) {
            Add-Type -AssemblyName System.Web;
            $NEW_RELIC_MSSQL_DB_PASSWORD = [System.Web.Security.Membership]::GeneratePassword(20,2).replace("-","");
          }
          $NEW_RELIC_MSSQL_SQL_PASSWORD = if ($env:NEW_RELIC_MSSQL_SQL_PASSWORD) { $env:NEW_RELIC_MSSQL_SQL_PASSWORD } else { $env:NR_CLI_SQL_PASSWORD };
          $NEW_RELIC_MSSQL_SQL_USERNAME = if ($env:NEW_RELIC_MSSQL_SQL_USERNAME) { $env:NEW_RELIC_MSSQL_SQL_USERNAME } else { $env:NR_CLI_SQL_USERNAME };
          $NR_ENABLE_BUFFER_METRICS = if ($env:NEW_RELIC_MSSQL_ENABLE_BUFFER_METRICS) { $env:NEW_RELIC_MSSQL_ENABLE_BUFFER_METRICS } else { $env:NR_CLI_ENABLE_BUFFER_METRICS };
          $NR_ENABLE_DATABASE_RESERVE_METRICS = if ($env:NEW_RELIC_MSSQL_ENABLE_RESERVE_METRICS) { $env:NEW_RELIC_MSSQL_ENABLE_RESERVE_METRICS } else { $env:NR_CLI_ENABLE_RESERVE_METRICS };

          # Azure Deployment Type Flag
          $NEW_RELIC_AZURE_DEPLOYMENT_TYPE = $env:NEW_RELIC_AZURE_DEPLOYMENT_TYPE
          $NEW_RELIC_MSSQL_AZURE_AUTH_MODE = $env:NEW_RELIC_MSSQL_AZURE_AUTH_MODE
          if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_AZURE_AUTH_MODE)) {
              $NEW_RELIC_MSSQL_AZURE_AUTH_MODE = "SQL" # Default to SQL authentication
          }
          $NR_CLI_SLOW_QUERY = $env:NR_CLI_SLOW_QUERY
          if ([string]::IsNullOrWhiteSpace($NR_CLI_SLOW_QUERY)) {$NR_CLI_SLOW_QUERY = "false"}

          $OhiConfig = "C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml";
          $CreateConfig=1

          # Write config function
          function Write-OhiConfig {
            param (
              [Parameter(Mandatory=$false, Position=0)]
              [string] $InstanceName,
              [Parameter(Mandatory=$false, Position=1)]
              [string] $Port
            )

            if($CreateConfig){
            # Remove any previous config
            if (Test-Path $OhiConfig) { Remove-Item $OhiConfig };

           Add-Content -Path $OhiConfig -Value @"
          integrations:
          "@ -Force | Out-Null;
              $CreateConfig=0
            }

            Add-Content -Path $OhiConfig -Value "  - name`:` nri-mssql" -Force | Out-Null;
            Add-Content -Path $OhiConfig -Value "    env`:` " -Force | Out-Null;
            Add-Content -Path $OhiConfig -Value "      HOSTNAME`:` ${NEW_RELIC_MSSQL_DB_HOSTNAME}" -Force | Out-Null;
            Add-Content -Path $OhiConfig -Value "      USERNAME`:` ${NEW_RELIC_MSSQL_DB_USERNAME}" -Force | Out-Null;
            Add-Content -Path $OhiConfig -Value "      PASSWORD`:` `"${NEW_RELIC_MSSQL_DB_PASSWORD}`"" -Force | Out-Null;

            if ($NR_ENABLE_BUFFER_METRICS -eq "0") {
            Add-Content -Path $OhiConfig -Value "      ENABLE_BUFFER_METRICS`:` false" -Force | Out-Null;
            }

            if ($NR_ENABLE_DATABASE_RESERVE_METRICS -eq "0") {
            Add-Content -Path $OhiConfig -Value "      ENABLE_DATABASE_RESERVE_METRICS`:` false" -Force | Out-Null;
            }

            if ([string]::IsNullOrWhiteSpace($Port)) {
              Add-Content -Path $OhiConfig -Value "      INSTANCE`:` ${InstanceName}" -Force | Out-Null;
            } else {
              Add-Content -Path $OhiConfig -Value "      PORT`:` ${Port}" -Force | Out-Null;
            }

            if ($NR_CLI_SLOW_QUERY -eq "true") {
            Add-Content -Path $OhiConfig -Value "      ENABLE_QUERY_MONITORING`:` true" -Force | Out-Null;
            }

            Add-Content -Path $OhiConfig -Value "    inventory_source`:` config/mssql" -Force | Out-Null;
            Add-Content -Path $OhiConfig -Value "    interval`:` 15" -Force | Out-Null;
          }

          # Enable Query Store function
          function Enable-QueryStore {
            param (
              [Parameter(Mandatory=$true, Position=0)]
              [string] $connection,
              [Parameter(Mandatory=$false, Position=1)]
              [string] $InstanceName,
              [Parameter(Mandatory=$false, Position=2)]
              [string] $Port
            )

            Write-Host "Attempting to enable Query Store for all non default databases..."
            Write-Host "Using SQL Server connection target: $connection"

            $SQL=@"
          SET QUOTED_IDENTIFIER OFF;
          DECLARE @name SYSNAME
          DECLARE db_user_cursor CURSOR
          READ_ONLY FORWARD_ONLY
          FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN (`"master`",`"msdb`",`"tempdb`",`"model`",`"rdsadmin`",`"distribution`") and state != 6
          OPEN db_user_cursor
          FETCH NEXT FROM db_user_cursor INTO @name WHILE @@FETCH_STATUS = 0
          BEGIN
            BEGIN TRY
              EXECUTE(`"USE [`" + @name + `"]; ALTER DATABASE [`" + @name + `"] SET QUERY_STORE = ON ( QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900 );`")
            END TRY
            BEGIN CATCH
            END CATCH
              FETCH next FROM db_user_cursor INTO @name
          END
          CLOSE db_user_cursor
          DEALLOCATE db_user_cursor
          "@

            $NriSqlFile = "$env:TEMP\nri-sql.sql"

            # Delete user and login if exist
            # Then create new login and user
            if (Test-Path $NriSqlFile) { Remove-Item $NriSqlFile }
            Add-Content -Path $NriSqlFile -Value $SQL -Force 2>&1
            $sqlCmdExitCode = -1 # Initialize

            # Attempt with explicit SQL credentials if NEW_RELIC_MSSQL_AZURE_AUTH_MODE is SQL and credentials are provided
            if ($env:NEW_RELIC_MSSQL_SQL_USERNAME -and $env:NEW_RELIC_MSSQL_SQL_PASSWORD -and $NEW_RELIC_MSSQL_AZURE_AUTH_MODE -eq "SQL") {
              Write-Host "Attempting to enable Query Store using SQL credentials."
              $SqlOutput=(sqlcmd -U $NEW_RELIC_MSSQL_SQL_USERNAME -P $NEW_RELIC_MSSQL_SQL_PASSWORD -S $connection -i $NriSqlFile 2>&1)
              $sqlCmdExitCode = $LASTEXITCODE
            }

            if ([string]::IsNullOrWhiteSpace($env:NEW_RELIC_MSSQL_SQL_USERNAME)){
              Write-Host "Attempting to enable Query Store using SQL with no credentials."
              $SqlOutput=(sqlcmd -S $connection -i $NriSqlFile 2>&1)
              $sqlCmdExitCode = $LASTEXITCODE
            }

            if (Test-Path $NriSqlFile) { Remove-Item $NriSqlFile }

            if ($sqlCmdExitCode -eq 0) {
              Write-Host "SUCCESS: Query Store enabled for all non default databases."
            } else {
              Write-Error "FAILURE: Failed to enable Query Store for databases. Exit Code: $sqlCmdExitCode."
              return $false
            }
            return $true
          }

          # Create SQL user function
          function Create-SqlUser {
            param (
              [Parameter(Mandatory=$true, Position=0)]
              [string] $connection,
              [Parameter(Mandatory=$false, Position=1)]
              [string] $InstanceName,
              [Parameter(Mandatory=$false, Position=2)]
              [string] $Port
            )

            Write-Host "Using SQL Server connection target: $connection"

            $SQL=@"
          SET QUOTED_IDENTIFIER OFF;
          DECLARE @name SYSNAME
          DECLARE db_user_cursor CURSOR
          READ_ONLY FORWARD_ONLY
          FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN (`"master`",`"msdb`",`"tempdb`",`"model`",`"rdsadmin`",`"distribution`") and state != 6
          OPEN db_user_cursor
          FETCH NEXT FROM db_user_cursor INTO @name WHILE @@FETCH_STATUS = 0
          BEGIN
            BEGIN TRY
              EXECUTE(`"USE [`" + @name + `"]; IF EXISTS(select top 1 name from sys.syslogins where name = `"`"${NEW_RELIC_MSSQL_DB_USERNAME}`"`") DROP USER ${NEW_RELIC_MSSQL_DB_USERNAME};`" )
            END TRY
            BEGIN CATCH
            END CATCH
              FETCH next FROM db_user_cursor INTO @name
          END
          CLOSE db_user_cursor
          DEALLOCATE db_user_cursor

          IF EXISTS(select top 1 name from sys.syslogins where name = `"${NEW_RELIC_MSSQL_DB_USERNAME}`")
          BEGIN
            DECLARE @session_id INT
            DECLARE db_login_cursor CURSOR
            READ_ONLY FORWARD_ONLY
            FOR SELECT session_id FROM sys.dm_exec_sessions WHERE login_name = `"${NEW_RELIC_MSSQL_DB_USERNAME}`"
            OPEN db_login_cursor
            FETCH NEXT FROM db_login_cursor  INTO @session_id WHILE @@FETCH_STATUS = 0
            BEGIN
                EXECUTE(`"KILL `" + @session_id )
                FETCH next FROM db_login_cursor  INTO @session_id
            END
            CLOSE db_login_cursor
            DEALLOCATE db_login_cursor

            DROP LOGIN ${NEW_RELIC_MSSQL_DB_USERNAME}
          END

          CREATE LOGIN ${NEW_RELIC_MSSQL_DB_USERNAME} WITH PASSWORD = `"${NEW_RELIC_MSSQL_DB_PASSWORD}`"

          GRANT CONNECT SQL, VIEW SERVER STATE, VIEW ANY DEFINITION TO ${NEW_RELIC_MSSQL_DB_USERNAME}
          DECLARE db_create_cursor CURSOR
          READ_ONLY FORWARD_ONLY
          FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN (`"master`",`"msdb`",`"tempdb`",`"model`",`"rdsadmin`",`"distribution`") and state !=6
          OPEN db_create_cursor
          FETCH NEXT FROM db_create_cursor INTO @name WHILE @@FETCH_STATUS = 0
          BEGIN
            BEGIN TRY
              EXECUTE(`"USE [`" + @name + `"]; IF NOT EXISTS(SELECT name from sys.database_principals where name = `"`"${NEW_RELIC_MSSQL_DB_USERNAME}`"`") BEGIN CREATE USER ${NEW_RELIC_MSSQL_DB_USERNAME} FOR LOGIN ${NEW_RELIC_MSSQL_DB_USERNAME}; END`" )
            END TRY
            BEGIN CATCH
            END CATCH
              FETCH next FROM db_create_cursor INTO @name
          END
          CLOSE db_create_cursor
          DEALLOCATE db_create_cursor

          select name from sys.syslogins where name = `"${NEW_RELIC_MSSQL_DB_USERNAME}`"
          "@

            $NriSqlFile = "$env:TEMP\nri-sql.sql"

            # Delete user and login if exist
            # Then create new login and user
            if (Test-Path $NriSqlFile) { Remove-Item $NriSqlFile }
            Add-Content -Path $NriSqlFile -Value $SQL -Force 2>&1
             # Try with env if passed in
            if ($NEW_RELIC_MSSQL_SQL_USERNAME -and $NEW_RELIC_MSSQL_SQL_PASSWORD -and $NEW_RELIC_MSSQL_AZURE_AUTH_MODE -eq "SQL") {
               Write-Host "sqlcmd with credentials"
               $SqlOutput=(sqlcmd -U $NEW_RELIC_MSSQL_SQL_USERNAME -P $NEW_RELIC_MSSQL_SQL_PASSWORD -S $connection -i $NriSqlFile 2>&1)
            }
            # Env failed or blank, try with default
            if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_SQL_USERNAME) -or ($SqlOutput.Length -lt 3)){
               Write-Host "sqlcmd with no credentials"
               $SqlOutput=(sqlcmd -S $connection -i $NriSqlFile 2>&1)
            }

            if (Test-Path $NriSqlFile) { Remove-Item $NriSqlFile }
            try {
              $LogOutput=(Add-Content -Path "{{.NEW_RELIC_CLI_LOG_FILE_PATH}}" -Value "SqlOutput`:` ${SqlOutput}" -Force 2>&1)
            }
            catch { }

            If ($SqlOutput.Length -ge 3) {
              $userName = $SqlOutput[2].ToString().Trim();
              If ($userName -eq ${NEW_RELIC_MSSQL_DB_USERNAME}) {
                # User created successfully
                return $true
              }
            }
            return $false
          }

          $setupCount = 0

          # Check deployment type
          if ($NEW_RELIC_AZURE_DEPLOYMENT_TYPE -eq "AZURE_SQL_MANAGED_INSTANCE") {
            Write-Host "Azure SQL Managed Instance deployment type detected."
            
            # Validate necessary environment variables for Azure SQL MI
            if (($NEW_RELIC_MSSQL_DB_HOSTNAME -eq (hostname)) -or [string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_HOSTNAME)) {
                Write-Error "Error: NEW_RELIC_MSSQL_DB_HOSTNAME must be set to the FQDN of the Azure SQL Managed Instance and cannot be the local machine hostname."
                Exit 132 
            }
            if ([string]::IsNullOrWhiteSpace($NEW_RELIC_MSSQL_DB_PORT) -and $NEW_RELIC_MSSQL_DB_HOSTNAME -eq (hostname) ) {
                Write-Error "Error: NEW_RELIC_MSSQL_DB_PORT must not be null for Azure SQL Managed Instance."
                Exit 133 
            }

            # using instanceName as empty because AzureSQL ManagedInstance supports SQL user/password authentication.
            $instanceName = ""
            $connectionString = "${NEW_RELIC_MSSQL_DB_HOSTNAME},${NEW_RELIC_MSSQL_DB_PORT}"

            Write-Host "Configuring New Relic for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}:${NEW_RELIC_MSSQL_DB_PORT}"
            $isCreated = Create-SqlUser -connection $connectionString -InstanceName $instanceName -Port $NEW_RELIC_MSSQL_DB_PORT
            if ($NR_CLI_SLOW_QUERY -eq "true") {
              $isQueryStoreEnabled = Enable-QueryStore -connection $connectionString -InstanceName $instanceName -Port $NEW_RELIC_MSSQL_DB_PORT
              if($isQueryStoreEnabled -ne $true) {
                Write-Error "Failed to enable QueryStore for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}. Check SQL connectivity and admin credentials."
                Exit 134 
              }
            }

            if ($isCreated) {  
                Write-OhiConfig -InstanceName $instanceName -Port $NEW_RELIC_MSSQL_DB_PORT
                $setupCount++
                Write-Host "Successfully configured New Relic for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}"
            } else {
                Write-Warning "Failed to set up New Relic for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}. Check SQL connectivity and admin credentials."
            }

          } else {
            # Original logic for on-premise SQL Server instances
            Write-Host "Processing local SQL Server instances."

            # Create user for all DBs
            $instances = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server").InstalledInstances
            $loginModes = (Get-ItemProperty -path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\*\*" -name "LoginMode" -ErrorAction SilentlyContinue | Where-Object -Property loginMode -eq -Value "2")

            foreach ($instance in $instances) {

              $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME}\${instance},${NEW_RELIC_MSSQL_DB_PORT}"
              $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
              If ($name.Length -ge 3) {
                $actualName = $name[2].ToString().Trim();
                If ($actualName -eq $instance) {
                  # Was able to connect with port
                  $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
                  if (-Not ($canLogin -eq $null)) {
                    $isCreated = (Create-SqlUser -connection $connection -InstanceName $instance -Port $NEW_RELIC_MSSQL_DB_PORT)

                    if ($NR_CLI_SLOW_QUERY -eq "true") {
                      $isQueryStoreEnabled = Enable-QueryStore -connection $connection -InstanceName $instance -Port $NEW_RELIC_MSSQL_DB_PORT
                      if($isQueryStoreEnabled -ne $true) {
                        Write-Error "Failed to enable QueryStore for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}. Check SQL connectivity and admin credentials."
                        Exit 139 
                      }
                    }

                    if ($isCreated) {
                      Write-OhiConfig -InstanceName $instance -Port $NEW_RELIC_MSSQL_DB_PORT
                      $setupCount++
                    }
                  }
                  continue
                }
              }

              $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME}\${instance}"
              $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
              If ($name.Length -ge 3) {
                $actualName = $name[2].ToString().Trim();
                If ($actualName -eq $instance) {
                  # Was able to connect with instance name
                  $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
                  if (-Not ($canLogin -eq $null)) {
                    $isCreated = (Create-SqlUser -connection $connection -InstanceName $instance)

                    if ($NR_CLI_SLOW_QUERY -eq "true") {
                      $isQueryStoreEnabled = Enable-QueryStore -connection $connection -InstanceName $instance
                      if($isQueryStoreEnabled -ne $true) {
                        Write-Error "Failed to enable QueryStore for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}. Check SQL connectivity and admin credentials."
                        Exit 135 
                      }
                    }

                    if ($isCreated) {
                      Write-OhiConfig -InstanceName $instance
                      $setupCount++
                    }
                  }
                  continue
                }
              }

              $connection = "${NEW_RELIC_MSSQL_DB_HOSTNAME},${NEW_RELIC_MSSQL_DB_PORT}"
              $name=(sqlcmd -S $connection -Q "SELECT @@SERVICENAME" -l 1 2>&1)
              If ($name.Length -ge 3) {
                $actualName = $name[2].ToString().Trim();
                If ($actualName -eq $instance) {
                  # Was able to connect with instance name
                  $canLogin=($loginModes | Where-Object -Property PSPath -like -Value "*${actualName}*")
                  if (-Not ($canLogin -eq $null)) {
                    $isCreated = (Create-SqlUser -connection $connection -InstanceName $instance)

                    if ($NR_CLI_SLOW_QUERY -eq "true") {
                      $isQueryStoreEnabled = Enable-QueryStore -connection $connection -InstanceName $instance
                      if($isQueryStoreEnabled -ne $true) {
                        Write-Error "Failed to enable QueryStore for Azure SQL Managed Instance: ${NEW_RELIC_MSSQL_DB_HOSTNAME}. Check SQL connectivity and admin credentials."
                        Exit 135 
                      }
                    }

                    if ($isCreated) {
                      Write-OhiConfig -InstanceName $instance
                      $setupCount++
                    }
                  }
                  continue
                }
              }
            }
          }

          if ($setupCount -eq 0) {
            Write-Host "No SQL Server instances instrumented, unable to create the required SQL account, please check your credentials"
            Exit 131
          }

          #Remove previous versions
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              $keyData = Get-Item -Path HKLM:\$key
              $name = $keyData.GetValue("DisplayName")
              if ($name -and $name -match $Match) {
                $keyId = Split-Path $key -Leaf
                $uninstallIds.Add($keyId) | Out-Null
              }
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "nri-mssql"
          foreach ($uninstallId in $uninstallIds) {
            $uninstallCommand = "msiexec /x """ + $uninstallId + """ /qn"
            Invoke-Expression $uninstallCommand
            # wait here to allow uninstall command to complete since it returns without waiting
            Start-Sleep -s 15
          }

          # Installing MSSql Integration
          $WebClient = New-Object System.Net.WebClient
          if ($env:HTTPS_PROXY) {
            $WebClient.Proxy = New-Object System.Net.WebProxy($env:HTTPS_PROXY, $true)
          }
          $WebClient.DownloadFile("https://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi", "$env:TEMP\nri-mssql-amd64.msi");
          msiexec.exe /qn /i "$env:TEMP\nri-mssql-amd64.msi" | Out-Null;

          Restart-Service newrelic-infra
          '

postInstall:
  info: |2
      ⚙️  The Microsoft SQL Server configuration file can be found in C:\Program Files\New Relic\newrelic-infra\integrations.d\mssql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration#config
