# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: mysql-open-source-integration
displayName: MySQL Integration
description: New Relic install recipe for default MySQL Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-mysql

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "amazon"
    platformVersion: "2"
  - type: host
    os: linux
    platform: "redhat"
  - type: host
    os: linux
    platform: "centos"
    platformVersion: "((7|8)\\.?.*)"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - mysql

# Examine Infrastructure events for correlated data
processMatch:
  - mysqld

preInstall:
  requireAtDiscovery: |
      isMysqlInstalled=$(sudo which mysql 2>&1 || true)
      if [[ -n "$isMysqlInstalled" ]]; then
        exit 0
      fi
      exit 1
  info: |2
      To capture data from the MySQL integration, we need to create a new MySql user with specific permissions (REPLICATION, SELECT).
      The installation will create a strong randomly generated password for that new user.
      This installation may prompt for your MySql root user password in order to create this new user.
      More information regarding the prerequisites can be found at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#req

# Matches partial list of the Log forwarding parameters
# https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
logMatch:
  - name: mysql
    file: /var/log/mysqld.log

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
validationIntegration: mysql

# DEPRECATED
validationNrql: "SELECT count(*) from MysqlSample FACET entityGuid SINCE 10 minutes ago WHERE reportingAgent = '{{.INFRA_KEY}}'"

successLinkConfig:
  type: EXPLORER

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: assert_pre_req
        - task: collect_meta
        - task: input_assert
          vars:
            MAX_RETRIES: 3
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview" >&2
            exit 1
          fi

    assert_pre_req:
      cmds:
        - |
          # Map of tool names to the associated error code
          required_tools_and_error_codes="date:41 sha256sum:42 base64:43 head:44"

          for tuple in $required_tools_and_error_codes; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)

            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    input_assert:
      cmds:
        - |
          # Check Env Vars
          NEW_RELIC_ASSUME_YES="{{.NEW_RELIC_ASSUME_YES}}"
          NEW_RELIC_MYSQL_PORT="{{.NEW_RELIC_MYSQL_PORT}}"
          NEW_RELIC_MYSQL_USERNAME="{{.NEW_RELIC_MYSQL_USERNAME}}"
          NEW_RELIC_MYSQL_PASSWORD="{{.NEW_RELIC_MYSQL_PASSWORD}}"
          NEW_RELIC_MYSQL_ROOT_PASSWORD="{{.NEW_RELIC_MYSQL_ROOT_PASSWORD}}"

          # Set Defaults
          # only localhost is supported
          NEW_RELIC_MYSQL_HOSTNAME="localhost"
          NEW_RELIC_MYSQL_PORT=${NEW_RELIC_MYSQL_PORT:-3306}
          NEW_RELIC_MYSQL_USERNAME=${NEW_RELIC_MYSQL_USERNAME:-newrelic}
          if [[ "$NEW_RELIC_MYSQL_PASSWORD" == "" ]]; then
            NEW_RELIC_MYSQL_PASSWORD=$(echo -n $(date +%s | sha256sum | base64 | head -c 16); echo "oO0$")
          fi
          
          # Check the Query monitoring status in previous installation
          QUERY_MONITORING_PREVIOUSLY_ENABLED=0
          if [[ -f /etc/newrelic-infra/integrations.d/mysql-config.yml ]] && grep -qE '^\s*ENABLE_QUERY_MONITORING\s*:\s*true\s*$' /etc/newrelic-infra/integrations.d/mysql-config.yml; then
            QUERY_MONITORING_PREVIOUSLY_ENABLED=1
          fi

          if [[ "$NR_CLI_SLOW_QUERY" == "true" ]]; then
          CONFIG_FILES=(
            "/etc/my.cnf"
            "/etc/mysql/my.cnf"
            "/etc/my.cnf.d/mysql-server.cnf"
          )
          
          # Iterate through each configuration file path and update if it exists
            FILE_FOUND=0
            for config in "${CONFIG_FILES[@]}"; do
              # Check if the file exists
              if [[ -f "$config" ]]; then
                echo "Found MySQL configuration file at $config."
                FILE_FOUND=1
                break
              fi
            done
          elif [[ "$QUERY_MONITORING_PREVIOUSLY_ENABLED" -eq 1 ]]; then
            echo -e "\033[0;33m[Warning] This guided install can enable the performance schema of your DB system, but it cannot safely turn these off. Please find details of what was enabled in a previous guided install in the log file /root/.newrelic/newrelic-cli.log. These details need to be manually reverted, if so desired.\033[0m" >&2
          fi

          # Check to see if default port works, or prompt if non-interactive
          CAN_CONNECT=$(curl $NEW_RELIC_MYSQL_HOSTNAME:$NEW_RELIC_MYSQL_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
          CAN_CONNECT=${CAN_CONNECT:-0}
          if [[ "$CAN_CONNECT" == "6" ]] || [[ "$CAN_CONNECT" == "7" ]] ; then
            if [[ "$NEW_RELIC_ASSUME_YES" != "true" ]] ; then
              # Get and validate Port
              TRIES=0
              while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
                printf "Enter the MySQL port (default: 3306): "
                read -r NEW_RELIC_MYSQL_PORT
                NEW_RELIC_MYSQL_PORT=${NEW_RELIC_MYSQL_PORT:-3306}
                ((TRIES++))
                CAN_CONNECT=$(curl $NEW_RELIC_MYSQL_HOSTNAME:$NEW_RELIC_MYSQL_PORT 2>&1 1>/dev/null -s -S | awk -F'[()]' '{print $2}')
                CAN_CONNECT=${CAN_CONNECT:-0}

                if [[ "$CAN_CONNECT" == "6" ]]; then
                  printf "\nThe MySql instance on localhost cannot be reached.\nThis installation must be run on the host running MySql\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config for more info.\n" >&2
                  exit 131;
                fi
                if [[ "$CAN_CONNECT" == "7" ]]; then
                  printf "\nThe connections for the MySql instance using the port ($NEW_RELIC_MYSQL_PORT) are being refused.\nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config for more info.\n" >&2
                  if [ ! $TRIES -lt {{.MAX_RETRIES}} ]; then exit 131; fi
                  echo "Please try again"
                else
                  break
                fi
              done
            else
              printf "\nThe connections for the MySql instance using the port ($NEW_RELIC_MYSQL_PORT) are being refused.\nPlease re-run this installation and enter a valid port for the MySql instance when prompted.\n" >&2
              exit 131;
            fi
          fi

          # Attempt to create required user
          SQL_CHECK_AUTH=$(echo "SELECT USER FROM mysql.user where USER in ('"$NEW_RELIC_MYSQL_USERNAME"')")
          MYSQL_ROOT_PASSWORD=$(eval sudo mysql -u root --port $NEW_RELIC_MYSQL_PORT -ne \"$SQL_CHECK_AUTH\" 2>&1 | grep "ERROR" | wc -l)
          if [ $MYSQL_ROOT_PASSWORD -gt 0 ] ; then
            if [[ "$NEW_RELIC_ASSUME_YES" == "true" && -z "$NEW_RELIC_MYSQL_ROOT_PASSWORD" ]]; then
              # non-interactive mode, need a valid root password
              printf "\nThis installation requires the MySql DB root password to create the newrelic user. Please run this installation in interactive mode.\n" >&2
              exit 131
            fi
          fi

          # Create new user with needed permissions, delete any previous user if exists
          sudo tee /tmp/sql-drop-user.sql > /dev/null <<"EOT"
          DROP USER 'NEW_RELIC_MYSQL_USERNAME'@'localhost';
          EOT

          sudo tee /tmp/sql-create-user.sql > /dev/null <<"EOT"
          CREATE USER 'NEW_RELIC_MYSQL_USERNAME'@'localhost' IDENTIFIED BY 'NEW_RELIC_MYSQL_PASSWORD';
          GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost';
          GRANT SELECT ON *.* TO 'newrelic'@'localhost';
          EOT
          
          # Conditionally append the GRANT PROCESS command if NR_CLI_SLOW_QUERY is true
          if [[ "$NR_CLI_SLOW_QUERY" == "true" && $FILE_FOUND -eq 1 ]]; then
            echo "GRANT PROCESS ON *.* TO 'newrelic'@'localhost';" | sudo tee -a /tmp/sql-create-user.sql > /dev/null
          fi

          sudo sed -i 's/NEW_RELIC_MYSQL_USERNAME/'$NEW_RELIC_MYSQL_USERNAME'/g' /tmp/sql-drop-user.sql
          sudo sed -i 's/NEW_RELIC_MYSQL_USERNAME/'$NEW_RELIC_MYSQL_USERNAME'/g' /tmp/sql-create-user.sql
          sudo sed -i 's/NEW_RELIC_MYSQL_PASSWORD/'$NEW_RELIC_MYSQL_PASSWORD'/g' /tmp/sql-create-user.sql

          if [[ $MYSQL_ROOT_PASSWORD -gt 0 && "$NEW_RELIC_ASSUME_YES" != "true" ]] ; then
            TRIES=0
            printf "MySql credential with permission to create user, and grant select/replication permission is required, please enter it below when prompted\n"
            SQL_OUTPUT_ERROR=1

            while [ $TRIES -lt {{.MAX_RETRIES}} ] && [ $SQL_OUTPUT_ERROR -gt 0 ] ;
            do
              if [ $TRIES -gt 0 ]; then printf "\nPlease try again\n"; fi

              printf "\nPlease enter your username for MySql (default: root): "
              read -r USERNAME
              USERNAME=${USERNAME:-root}
          
              printf "Enter password: "
              stty -echo
              read -r NEW_RELIC_MYSQL_ROOT_PASSWORD
              stty echo
              printf "\n"
              
              sudo mysql -u $USERNAME --port $NEW_RELIC_MYSQL_PORT -p$NEW_RELIC_MYSQL_ROOT_PASSWORD < /tmp/sql-drop-user.sql &> /dev/null ||:
              EXEC_OUTPUT=$(eval sudo mysql -u $USERNAME --port $NEW_RELIC_MYSQL_PORT -p$NEW_RELIC_MYSQL_ROOT_PASSWORD < /tmp/sql-create-user.sql 2>&1)
              echo "MySqlOutput:"$EXEC_OUTPUT | sudo tee -a {{.NEW_RELIC_CLI_LOG_FILE_PATH}} > /dev/null
              SQL_OUTPUT_ERROR=$(echo -n $EXEC_OUTPUT | grep "ERROR" | wc -l)
              ((TRIES++))
            done

            # if failed after max retries
            if [ $SQL_OUTPUT_ERROR -gt 0 ] ; then
              printf "\n\nThis installation was unable to create the required newrelic user.\nWe attempted to create the user with the SQL statement below.\nPerhaps the MySql root DB password is incorrect.\nPlease either re-run the installation with the correct root DB password, or follow the manual installation steps documented at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration/ \n\n" >&2
              sudo cat /tmp/sql-create-user.sql
              sudo rm -f /tmp/sql-create-user.sql
              sudo rm -f /tmp/sql-drop-user.sql
              printf "\n"
              echo -e "detail:"$EXEC_OUTPUT
              printf "\n"
              exit 131
            fi
          else
            if [[ -z "$NEW_RELIC_MYSQL_ROOT_PASSWORD" ]]; then
              sudo mysql -u root --port $NEW_RELIC_MYSQL_PORT < /tmp/sql-drop-user.sql &> /dev/null ||:
              EXEC_OUTPUT=$(eval sudo mysql -u root --port $NEW_RELIC_MYSQL_PORT < /tmp/sql-create-user.sql 2>&1)
            else
              sudo mysql -u root --port $NEW_RELIC_MYSQL_PORT -p$NEW_RELIC_MYSQL_ROOT_PASSWORD < /tmp/sql-drop-user.sql &> /dev/null ||:
              EXEC_OUTPUT=$(eval sudo mysql -u root --port $NEW_RELIC_MYSQL_PORT -p$NEW_RELIC_MYSQL_ROOT_PASSWORD < /tmp/sql-create-user.sql 2>&1)
            fi
            echo "MySqlOutput:"$EXEC_OUTPUT | sudo tee -a {{.NEW_RELIC_CLI_LOG_FILE_PATH}} > /dev/null
            SQL_OUTPUT_ERROR=$(echo -n $EXEC_OUTPUT | grep -v "[Warning] Using a password" | grep "ERROR" | wc -l)
            if [ $SQL_OUTPUT_ERROR -gt 0 ] ; then
              printf "\n\nThis installation was unable to create the required newrelic user.\nWe attempted to create the user with the SQL statement below.\nPlease follow the manual installation steps documented at https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration/\n\n" >&2
              sudo cat /tmp/sql-create-user.sql
              sudo rm -f /tmp/sql-create-user.sql
              sudo rm -f /tmp/sql-drop-user.sql
              printf "\n"
              echo -e "detail:"$EXEC_OUTPUT
              printf "\n"
              exit 131
            fi
          fi
          sudo rm -f /tmp/sql-create-user.sql
          sudo rm -f /tmp/sql-drop-user.sql

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
          sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
          sudo yum install nri-mysql -y
          if [ -f /etc/newrelic-infra/integrations.d/mysql-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/mysql-config.yml;
          fi
          
          sudo cp /etc/newrelic-infra/integrations.d/mysql-config.yml.sample /etc/newrelic-infra/integrations.d/mysql-config.yml;  
          
          # Defining the common config for mysql-config.yml file
          common_config=$(cat <<EOT
          integrations:
            - name: nri-mysql
              env:
                HOSTNAME: $NEW_RELIC_MYSQL_HOSTNAME
                PORT: $NEW_RELIC_MYSQL_PORT
                USERNAME: $NEW_RELIC_MYSQL_USERNAME
                PASSWORD: '$NEW_RELIC_MYSQL_PASSWORD'
                DATABASE:
                EXTENDED_METRICS: true
                EXTENDED_INNODB_METRICS: true
                EXTENDED_MYISAM_METRICS: true
                REMOTE_MONITORING: true
              inventory_source: config/mysql
              interval: 30s
          EOT
          )

          # Write the common config to the file
          echo "$common_config" | sudo tee /etc/newrelic-infra/integrations.d/mysql-config.yml > /dev/null

          # Enable slow query monitoring if selected by user or enabled in previous installation.
          if [[ ("$NR_CLI_SLOW_QUERY" == "true" && $FILE_FOUND -eq 1) || $QUERY_MONITORING_PREVIOUSLY_ENABLED -eq 1 ]]; then
            sudo sed -i '/env:/a \ \ \ \ \ \ ENABLE_QUERY_MONITORING: true' /etc/newrelic-infra/integrations.d/mysql-config.yml
          fi
          
          # Function to update or append the performance_schema and init-file properties
          update_mysql_config() {
              local config_file="$1"
              backup_log="[NR_CLI_SLOW_QUERY] Created /etc/my.cnf.bak backup file"
          
              # Check if the [mysqld] section is present
              if ! grep -qE '^\[mysqld\]' "$config_file"; then
                # Append the [mysqld] section with the properties if not present
                cp "$config_file" "$config_file.bak"
                echo "$backup_log"
                echo -e "\n[mysqld]\nperformance_schema=ON\ninit-file=/etc/my.cnf.d/init.sql" >> "$config_file"
                echo "[NR_CLI_SLOW_QUERY] Successfully added the [mysqld] section with performance_schema=ON and init-file=/etc/my.cnf.d/init.sql to $config_file."
              else
                # Handle performance_schema property
                if grep -qE '^\s*performance_schema\s*=\s*ON\s*$' "$config_file"; then
                  echo "[NR_CLI_SLOW_QUERY] The performance_schema is already set to ON in $config_file. No changes made."
                elif grep -qE '^\s*performance_schema\s*=' "$config_file"; then
                  # Update any other value to ON
                  sed -i.bak 's/^\s*performance_schema\s*=.*$/performance_schema=ON/' "$config_file"
                  echo "$backup_log"
                  echo "[NR_CLI_SLOW_QUERY] Updated performance_schema to ON in $config_file."
                else
                  # Append the property below the [mysqld] section if not present
                  sed -i.bak '/\[mysqld\]/a\performance_schema=ON' "$config_file"
                    echo "$backup_log"  
                    echo "[NR_CLI_SLOW_QUERY] Appended performance_schema=ON to $config_file."
                  fi
                  # Handle init-file property
                  if grep -qE '^\s*init-file\s*=\s*/etc/my.cnf.d/init.sql\s*$' "$config_file"; then
                    echo "[NR_CLI_SLOW_QUERY] The init-file is already set to /etc/my.cnf.d/init.sql in $config_file. No changes made."
                  elif grep -qE '^\s*init-file\s*=' "$config_file"; then
                    # Update any other value to /etc/my.cnf.d/init.sql
                    sed -i 's|^\s*init-file\s*=.*$|init-file=/etc/my.cnf.d/init.sql|' "$config_file"
                    echo "[NR_CLI_SLOW_QUERY] Updated init-file to /etc/my.cnf.d/init.sql in $config_file."
                  else
                    # Append the property below the [mysqld] section if not present
                    sed -i '/\[mysqld\]/a\init-file=/etc/my.cnf.d/init.sql' "$config_file"
                    echo "[NR_CLI_SLOW_QUERY] Appended init-file=/etc/my.cnf.d/init.sql to $config_file."
                  fi
                fi
            }
          
          create_init_sql() {       
          # Create init.sql file with required SQL commands
          local INIT_FILE="/etc/my.cnf.d/init.sql"
          
          cat <<EOF | sudo tee "$INIT_FILE" > /dev/null
          -- Enable required Performance Schema instruments
          UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE 'wait/%';
          -- Enable CPU Instruments
          UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE 'statement/%';
          -- Enable Collection of Current Data Lock Waits
          UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE '%lock%';
          -- Enable required Performance Schema consumers
          UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME IN ('events_waits_current', 'events_waits_history_long', 'events_waits_history', 'events_statements_history_long');
          -- Enable required Performance Schema consumers for CPU metrics
          UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME IN ('events_statements_history', 'events_statements_current', 'events_statements_cpu');
          UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME LIKE 'events_waits_current%' OR NAME LIKE 'events_statements_current%';
          SET GLOBAL innodb_lock_wait_timeout = 120; -- Increase to 2 minutes
          EOF
          
          echo "[NR_CLI_SLOW_QUERY] Created $INIT_FILE with necessary SQL commands."
          
          printf "\nRestart your MySQL instance to enable the performance schema settings now? (y/n): "
          read -r APPLICATION_RESTART
          APPLICATION_RESTART=${APPLICATION_RESTART:-y}
          
          if [ "$APPLICATION_RESTART" = "y" ]; then
            # Restart MySQL service using systemd
            sudo systemctl restart mysqld
            echo -e "\n[NR_CLI_SLOW_QUERY] MySQL server restarted to apply changes."
          else  
            echo -e "\n\033[0;33m[Warning] The Performance Schema configuration changes of the database will become active the next time you restart your MySQL server. Without those changes, the New Relic integration will not be able to collect SQL query level details.\033[0m" >&2
            printf "\n"
          fi     
          }
          
          if [[ "$NR_CLI_SLOW_QUERY" == "true" ]]; then
            if [[ $FILE_FOUND -eq 1 ]]; then
              echo -e "\n--- Checking MySQL configuration settings"
              echo "[NR_CLI_SLOW_QUERY] Granted PROCESS privilege to the $NEW_RELIC_MYSQL_USERNAME user."
              echo -e "[NR_CLI_SLOW_QUERY] Updated \`ENABLE_QUERY_MONITORING: true\` in /etc/newrelic-infra/integrations.d/mysql-config.yml."
              update_mysql_config "$config"
              create_init_sql
            else
              echo -e "\033[0;33m[Warning] The database settings could not be checked or amended to enable the required Performance Schema. The rest of the installation will continue, to make sure we collect the basic telemetry data for MySQL, but these database configuration steps will need to be done manually. Instructions can be found (soon) on the documentation page for the MySQL Integration.\033[0m" >&2
            fi
          fi
          echo "You can find the CLI logs in this path: /root/.newrelic/newrelic-cli.log"
    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

    collect_meta:
      cmds:
        - |
          user=$(type whoami &>/dev/null && whoami)
          version=$(type mysqld &>/dev/null && mysqld --version)
          echo {\"Metadata\": {\"user\":\"$user\", \"version\":\"$version\"}} | tee {{.NR_CLI_OUTPUT}} > /dev/null

postInstall:
  info: |2
      ⚙️  The MySQL configuration file can be found in /etc/newrelic-infra/integrations.d/mysql-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration#config
