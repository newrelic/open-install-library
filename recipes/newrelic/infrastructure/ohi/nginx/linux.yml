# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: nginx-open-source-integration
displayName: NGINX Integration
description: New Relic install recipe for default NGINX Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-nginx

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"
  - type: host
    os: linux
    platform: "amazon"
    platformVersion: "2"
  - type: host
    os: linux
    platform: "redhat"
  - type: host
    os: linux
    platform: "centos"

keywords:
  - Infrastructure
  - Integration
  - nginx

processMatch:
  - nginx

logMatch:
  - name: nginx
    file: /var/log/nginx/access.log* # assumes log rotation like access.log.0, access.log.1, etc.
    attributes:
      logtype: nginx
  - name: nginx
    file: /var/log/nginx/error.log* # assumes log rotation like error.log.0, error.log.1, etc.
    attributes:
      logtype: nginx-error

validationNrql: "SELECT count(*) from NginxSample where hostname like '{{.HOSTNAME}}%' FACET entityGuid SINCE 10 minutes ago"

successLinkConfig:
  type: EXPLORER

preInstall:
  info: |2
      To capture data from the NGINX integration, you'll first need to enable
      and configure the applicable extension module:
      - For NGINX Open Source: HTTP stub status module
      - See https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration#config for more info.

  requireAtDiscovery: |
    # determine whether NGINX status url setting is enabled
    stub_status_enabled=$(nginx -V 2>&1 | grep -o "with-http_stub_status_module")
    if [ "$stub_status_enabled" == "" ]; then
      exit 1
    fi

install:
  version: "3"
  silent: true
  tasks:
    default:
      cmds:
        - task: assert_infra
        - task: input_assert
        - task: restart

    assert_infra:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here:  https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview" >&2
            exit 1
          fi

    input_assert:
      cmds:
        - |
          stub_location=$(sudo nginx -T 2>&1 | grep -ozP "(?s:.*\s)\Klocation(?s).*stub_status" | grep -aoP "\/([^\s]+)")
          if [ "$stub_location" == "" ]; then
            # ask the user if we can add it. if yes proceed, if no exit as unsupported
            echo -n "An nginx status stub location is required to proceed. Add default status location of /status? Y/N (default: Y)? "
            read answer
            echo ""
            NEW_RELIC_CONTINUE=$(echo "${answer^^}" | cut -c1-1)
            if [[ -z "$NEW_RELIC_CONTINUE" ]]; then
              NEW_RELIC_CONTINUE="Y"
            fi
            if [[ "$NEW_RELIC_CONTINUE" == "N" ]]; then
              echo "Exiting the installation"
              exit 1
            fi

            # determine which config file we need to add the include into
            config_location=$(sudo nginx -V 2>&1 | grep -ozP "conf-path=((/*[a-z]*\.*)*)" | cut -d "=" -f 2-)
            config_directory=$(dirname $config_location)

            # include our newrelic.conf file in the existing config's server block
            cd $config_directory
            sudo cp $config_location $config_location.back
            sudo awk -v config_directory=$config_directory -F "~" '/server ?{.*$/ {if(count++ == 0)$0=$0"\n        # Load configuration files for the New Relic required config. \n        include " config_directory "/newrelic.d/newrelic.conf;\n"} 1' $config_location.back | sudo tee $config_location > /dev/null
            sudo rm $config_location.back

            # create newrelic.conf file with our new default status block
            sudo mkdir newrelic.d -p
            sudo bash -c 'printf "location = /status {\n      stub_status;\n      allow 127.0.0.1;    # only allow requests from localhost\n      deny all;           # deny all other hosts  \n}\n" > newrelic.d/newrelic.conf'

            # reload nginx and check again for the stub location
            sudo systemctl restart nginx
            stub_location=$(sudo nginx -T 2>&1 | grep -ozP "(?s:.*\s)\Klocation(?s).*stub_status" | grep -aoP "\/([^\s]+)")
            if [ "$stub_location" == "" ]; then
              printf "\n[Error]: Failed to add status location to nginx configuration. Ensure your configuration matches the requirements for New Relic monitoring. \nSee https://docs.newrelic.com/docs/infrastructure/host-integrations/host-integrations-list/nginx/nginx-integration/#enable-instance for more information. \n" >&2
              exit 1
            fi
          fi

          port=""
          curledPorts=""
          statusStubOK=false
          sudo nginx -T | grep listen | while read -r line ; do
            # we check the line is not commented
            if ! echo $line | grep -aoPq "#"; then
              port=$(echo $line | grep -aoP "\d+")

              # we set this port variable with the surrounded by the hash symbol so we can distinct 20 from 200
              currentPort="#{$port}#"

              # then we check if it doesn't exist on our curledPorts var
              if ! echo $curledPorts | grep -qw "$currentPort"; then
                code=$(curl -I "http://127.0.0.1:${port}${stub_location}" -w %{response_code} -so '/dev/null')
                if [ $code == "200" ]; then
                  statusStubOK=true
                  break
                fi
                curledPorts+=${currentPort}
              fi
            fi
          done

          # exit with failed status if the status stub location port is not in our curledPorts var
          if [ "$statusStubOK" = false ]; then
            printf "\n[Error]: Failed to find status stub. Ensure your configuration matches the requirements for New Relic monitoring. \nSee https://docs.newrelic.com/docs/infrastructure/host-integrations/host-integrations-list/nginx/nginx-integration/#enable-instance for more information. \n" >&2
            exit 1
          fi

          # Set Defaults
          NR_CLI_STUB_STATUS_URL="http://127.0.0.1:${port}${stub_location}"

          STATUS_RESPONSE=$(curl $NR_CLI_STUB_STATUS_URL -s | iconv -f utf-8 -t utf-8 -c)
          if [ ! $(echo $STATUS_RESPONSE | grep "Active connections:" | wc -l) -eq 0 ] ; then
            NR_CLI_STATUS_MODULE="ngx_http_stub_status_module"
          elif [ ! $(echo $STATUS_RESPONSE | grep '"nginx_version"' | wc -l) -eq 0 ] ; then
            NR_CLI_STATUS_MODULE="ngx_http_status_module"
          elif [ ! $(echo $STATUS_RESPONSE | grep '"nginx"' | wc -l) -eq 0 ] ; then
            NR_CLI_STATUS_MODULE="ngx_http_api_module"
          else
            printf "The endpoint provided is not an NGINX status endpoint. \nSee https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration#config for more info.\n" >&2
            exit 3
          fi
          printf "\n[OK] All checks passed. Installing Nginx Integration...\n\n"

          # Install the integration
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"

          # Get latest definitions and skip any failure because of deprecation
          isYumInstalled=$(which yum 2>&1 || true)

          if [[ -n "$isYumInstalled" ]]; then
            # rhel
            sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
            sudo yum install nri-nginx -y -q
          else
            # debian
            sudo apt-get -o Acquire::Check-Valid-Until=false update -yq
            sudo apt-get install nri-nginx -y
          fi

          if [ -f /etc/newrelic-infra/integrations.d/nginx-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/nginx-config.yml;
          fi
          sudo touch /etc/newrelic-infra/integrations.d/nginx-config.yml;
          sudo tee -a /etc/newrelic-infra/integrations.d/nginx-config.yml > /dev/null <<EOT
          integrations:
            - name: nri-nginx
              env:
                METRICS: true
                # If you're using ngx_http_api_module be certain to use the full path up to and including the version number
                STATUS_URL: $NR_CLI_STUB_STATUS_URL

                # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module
                STATUS_MODULE: $NR_CLI_STATUS_MODULE

                # New users should leave this property as 'true', to identify the
                # monitored entities as 'remote'. Setting this property to 'false' (the
                # default value) is deprecated and will be removed soon, disallowing
                # entities that are identified as 'local';.
                # Please check the documentation to get more information about local
                # versus remote entities:
                # https://github.com/newrelic/infra-integrations-sdk/blob/master/docs/entity-definition.md
                REMOTE_MONITORING: true

                # default true. If the status URL is HTTPS with a self-signed certificate, set this to false if you want to avoid certificate validation
                # VALIDATE_CERTS: true
              interval: 30

            - name: nri-nginx
              env:
                INVENTORY: true
                CONFIG_PATH: /etc/nginx/nginx.conf

                # New users should leave this property as 'true', to identify the
                # monitored entities as 'remote'. Setting this property to 'false' (the
                # default value) is deprecated and will be removed soon, disallowing
                # entities that are identified as 'local'.
                # Please check the documentation to get more information about local
                # versus remote entities:
                # https://github.com/newrelic/infra-integrations-sdk/blob/master/docs/entity-definition.md
                REMOTE_MONITORING: true #new users should leave remote_monitoring = true

                # status_url is used to identify the monitored entity to which the inventory will be attached.
                STATUS_URL: $NR_CLI_STUB_STATUS_URL
              inventory_source: config/nginx
              interval: 60

          EOT

    restart:
      cmds:
        - |
          if [ {{.IS_SYSTEMCTL}} -gt 0 ]; then
            sudo systemctl restart newrelic-infra
          else
            if [ {{.IS_INITCTL}} -gt 0 ]; then
              sudo initctl restart newrelic-infra
            else
              sudo /etc/init.d/newrelic-infra restart
            fi
          fi
      vars:
        IS_SYSTEMCTL:
          sh: command -v systemctl | wc -l
        IS_INITCTL:
          sh: command -v initctl | wc -l

postInstall:
  info: |2
      ⚙️  The Nginx configuration file can be found in /etc/newrelic-infra/integrations.d/nginx-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration#config
