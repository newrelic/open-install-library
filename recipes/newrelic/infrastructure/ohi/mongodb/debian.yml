# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition
name: mongodb-open-source-integration
displayName: MongoDB Integration
description: New Relic install recipe for default MongoDB Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/newrelic-prometheus-exporters-packages/

dependencies:
  - infrastructure-agent-installer

installTargets:
  - type: host
    os: linux
    platform: "debian"
  - type: host
    os: linux
    platform: "ubuntu"

# keyword convention for dealing with search terms that could land someone on this instrumentation project
keywords:
  - Infrastructure
  - Integration
  - mongodb
  - Prometheus
  - Exporter

# Examine Infrastructure events for correlated data
processMatch:
  - mongodb
  - mongod

# Matches partial list of the Log forwarding parameters
# https://docs.newrelic.com/docs/logs/enable-log-management-new-relic/enable-log-monitoring-new-relic/forward-your-logs-using-infrastructure-agent#parameters
logMatch:
  - name: MongoDB log
    file: /var/log/mongodb/mongod.log

# The newrelic-cli will use this integration name to check the config file(s)
# that were setup during the installation to ensure the integration
# runs properly with the defined environment variables
# validationIntegration: mongodb3

# DEPRECATED
validationNrql: "SELECT count(*) FROM Metric WHERE entity.type = 'MONGODB_INSTANCE' SINCE 10 minutes ago WHERE targetName LIKE '{{.INFRA_KEY}}%'"

preInstall:
  info: |2
      To capture data from the MongoDB integration, you'll first need to meet these prerequisites:

      - MongoDB 4.0 or higher.
      - MongoDB user account with 'clusterMonitor' and 'readAnyDatabase' roles.

      For a complete list of requirements, go to:
      https://docs.newrelic.com/docs/infrastructure/host-integrations/host-integrations-list/mongodb/mongodb-monitoring-integration-new/#req

      MongoDB User Account Setup
      In the MongoDB shell, execute the following commands to create a
      new user and assign the clusterMonitor and readAnyDatabase roles to it.
      Note: username, password, and similar values are user-specific values must be replaced.

      Switch to the admin database:

      > use admin

      Use the following command to create a new user and assign clusterMonitor and readAnyDatabase 
      roles to the user (adjust the username and password as required):

      > db.createUser(
          {
            user: "username",
            pwd:  "password",
            roles: [ 
              { role: "clusterMonitor", db: "admin" },
              { role: 'readAnyDatabase', db: 'admin' }
            ]
          }
        )

  requireAtDiscovery: |
    IS_MONGO_SHELL_INSTALLED=$(which mongosh | wc -l)
    if [ $IS_MONGO_SHELL_INSTALLED -eq 0 ]; then
      echo "Mongo shell is required to run the newrelic install" 
      exit 132
    fi

install:
  version: "3"
  silent: true

  env:
    NEW_RELIC_ASSUME_YES: '{{.NEW_RELIC_ASSUME_YES}}'
    NR_CLI_DB_HOSTNAME: '{{.NR_CLI_DB_HOSTNAME | default "localhost"}}'
    NR_CLI_DB_PORT: '{{.NR_CLI_DB_PORT | default "27017"}}'
    NR_CLI_DB_USERNAME: '{{.NR_CLI_DB_USERNAME | default "newrelic"}}'
    NR_CLI_DB_PASSWORD:
      sh: if [ -z {{.NR_CLI_DB_PASSWORD}} ]; then echo -n $(date +%s | sha256sum | base64 | head -c 16)oO0; else echo {{.NR_CLI_DB_PASSWORD}}; fi
    NR_CLI_DB_CLUSTERNAME: '{{.NR_CLI_DB_CLUSTERNAME | default "mongocluster"}}'
    NR_CLI_DB_AUTH: '{{.NR_CLI_DB_AUTH | default "admin"}}'
    NR_CLI_DB_EXPORTER_PORT: '{{.NR_CLI_DB_EXPORTER_PORT | default "9126"}}'
    NR_CLI_SSL: '{{.NR_CLI_SSL}}'
    NR_CLI_CLIENT_CERT_FILE: '{{.NR_CLI_CLIENT_CERT_FILE}}'
    NR_CLI_CERT_AUTH_FILE: '{{.NR_CLI_CERT_AUTH_FILE}}'

  tasks:
    default:
      cmds:
        - task: assert_pre_req
        - task: update_apt
        - task: setup_no_auth
        - task: setup_auth_scram
          vars:
            MAX_RETRIES: 3
        - task: setup_auth_ssl
          vars:
            MAX_RETRIES: 3
        - task: cleanup

    assert_pre_req:
      cmds:
        - |
          IS_INFRA_INSTALLED=$(sudo ps aux | grep newrelic-infra-service | grep -v grep | wc -l)
          if [ $IS_INFRA_INSTALLED -eq 0 ] ; then
            echo "The infrastructure agent is required to install this integration, we recommend going through our guided install path for this pre-requisite which can be found here: https://docs.newrelic.com/docs/infrastructure/host-integrations/installation/new-relic-guided-install-overview/" >&2
            exit 1
          fi
        - |
          # Map of tool names to the associated error code
          REQUIRED_TOOLS_AND_ERROR_CODES="date:41 sha256sum:42 base64:43 head:44"

          for tuple in $REQUIRED_TOOLS_AND_ERROR_CODES; do
            tool=$(echo ${tuple} |cut -d':' -f1)
            code=$(echo ${tuple} |cut -d':' -f2)

            IS_TOOL_INSTALLED=$(which ${tool} | wc -l)
            if [ "$IS_TOOL_INSTALLED" -eq 0 ]
            then
              echo -e "{{.RED}}This installation requires '${tool}' to be installed.{{.NOCOLOR}}" >> /dev/stderr
              exit ${code}
            fi
          done

    update_apt:
      cmds:
        - |
          # Get latest definitions and skip any failure because of deprecation
          apt-get -o Acquire::Check-Valid-Until=false update -yq
      silent: true
      # Ignore errors returned by 'apt-get' if it fails to update any of its sources
      ignore_error: true

    setup_no_auth:
      cmds:
        - |
          mkdir -p "/etc/newrelic-infra/integrations.d"
          apt-get install nri-mongodb3 -y

          # Mongodb config file for New Relic Agent
          tee /etc/newrelic-infra/integrations.d/mongodb3-config.yml > /dev/null <<-EOT
          integrations:
            - name: nri-mongodb3
              config:
                # User-defined name to uniquely identify the cluster being monitored. Required.
                mongodb_cluster_name: {{.NR_CLI_DB_CLUSTERNAME}}

                # MongoDB connection URI. If used overwrites all other connection parameters.
                mongodb_uri: mongodb://{{.NR_CLI_DB_HOSTNAME}}:{{.NR_CLI_DB_PORT}}

                # MongoDB direct connect. Whether or not a direct connect should be made.
                # Direct connections are not valid if multiple hosts are specified or an SRV URI is used, for example for mongoDB Atlas.
                mongodb_direct_connect: true

                # List of comma separated databases.collections to retrieve collection stats.
                collection_filters:

                # List of comma separated databases.collections to retrieve index stats.
                index_filters:

                # Enable/Disable collection of Database metrics
                database_stats: true

                # Enable/Disable collection of Collections metrics
                collection_stats: true

                # Enable/Disable collection of Index metrics
                index_stats: true

                # Enable/Disable collection of Replica Set metrics
                replicaset_stats: true

                # Enable/Disable collection of Top Admin metrics
                top_stats: true

                # Enable/Disable collection of Diagnostic metrics
                diagnostic_stats: true

                # Port to expose scrape endpoint on, if this is not provided a random port will be used to launch the exporter
                exporter_port: {{.NR_CLI_DB_EXPORTER_PORT}}

                # How long until a scrape request times-out (defaults to 5s)
                # scrape_timeout: 5s

                # transformations:
                #   - description: "General processing rules"
                #     ignore_metrics:
                #     - prefixes:
                #       - "go_"
                #       - "process_"
          EOT

          tee /tmp/mongo-user.js > /dev/null <<-EOT
            use admin
            db.createUser(
              {
                user: "{{.NR_CLI_DB_USERNAME}}",
                pwd:  "{{.NR_CLI_DB_PASSWORD}}",
                roles: [ 
                  { role: "clusterMonitor", db: "admin" },
                  { role: 'readAnyDatabase', db: 'admin' }
                ]
              }
            )
          EOT

          # Check open mongodb and check/configure requirements
          CAN_CONNECT=$(mongosh --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} --eval 'db.adminCommand( { listDatabases: 1 } )' 2> /dev/null \
                      | grep 'ok: 1' | wc -l)

          if [ $CAN_CONNECT -gt 0 ]; then
            MONGO_MONITORING_USER_EXISTS=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} \
                                        --eval "db.getUser('{{.NR_CLI_DB_USERNAME}}')" \
                                        | grep "_id: '{{.NR_CLI_DB_AUTH}}.{{.NR_CLI_DB_USERNAME}}'" | wc -l)

            if [ $MONGO_MONITORING_USER_EXISTS -gt 0 ]; then
              echo "Required user already present, attempting to update its password"

              USER_UPDATE_FAILED=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} \
                                --eval "db.changeUserPassword('{{.NR_CLI_DB_USERNAME}}', '{{.NR_CLI_DB_PASSWORD}}')" \
                                | grep 'ok: 1' | wc -l)

              if [ $USER_UPDATE_FAILED -eq 0 ]; then
                echo "Could not update password for {{.NR_CLI_DB_USERNAME}}"
                exit 131
              fi
            else 
              SETUP_MONGO_MONITORING_USER=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} < /tmp/mongo-user.js \
                                         | grep "ok: 1" | wc -l)

              if [ $SETUP_MONGO_MONITORING_USER -gt 0 ]; then
                echo "Required user created: {{.NR_CLI_DB_USERNAME}}"
              else
                echo "Could not create required user on {{.NR_CLI_DB_HOSTNAME}}:{{.NR_CLI_DB_PORT}}, database {{.NR_CLI_DB_AUTH}}"
                exit 131
              fi
            fi

            # let other tasks know this one was successful
            touch /tmp/mongo_ok
          fi

    setup_auth_scram:
      cmds:
        - |
          # If previous no-auth setup task was successful, skip this one
          if [ -f /tmp/mongo_ok ]; then
            exit 0
          fi

          if [ ${NEW_RELIC_ASSUME_YES,,} == "true" ]; then
            exit 131
          fi

          echo ""
          read -r -p "Using regular SCRAM Username/Password authentication to connect to MongoDB? (Y/N) " USING_SCRAM

          if [[ ${USING_SCRAM,,} =~ "^(y|ye|yes)$" ]]; then
            # SCRAM Use Case
            TRIES=0
            echo -e "\nPlease provide MongoDB SCRAM credentials"
            while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
              ((TRIES++))
              read -r -p "MongoDB Username? " MONGO_USERNAME
              stty -echo  # To securely read password; 'read -s $VAR' showed 'illegal -s option' when tried
              read -r -p "MongoDB Password? " MONGO_PASSWORD
              stty echo
              echo ""

              CAN_CONNECT=$(mongosh --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} --username $MONGO_USERNAME \
                          --password $MONGO_PASSWORD --authenticationDatabase {{.NR_CLI_DB_AUTH}} --eval "db.adminCommand( { listDatabases: 1 } )" 2> /dev/null \
                          | grep 'ok: 1' | wc -l)

              if [ $CAN_CONNECT -eq 0 ]; then
                echo "Could not connect to {{.NR_CLI_DB_HOSTNAME}}:{{.NR_CLI_DB_PORT}}, db {{.NR_CLI_DB_AUTH}}"
              else
                echo "Connected!"
                break
              fi
            done

            if [ $TRIES -eq {{.MAX_RETRIES}} ]; then
              echo "Max connection attempts reached"
              exit 131
            else
              MONGO_MONITORING_USER_EXISTS=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} --username $MONGO_USERNAME \
                                           --password $MONGO_PASSWORD --authenticationDatabase {{.NR_CLI_DB_AUTH}} --eval "db.getUser('{{.NR_CLI_DB_USERNAME}}')" \
                                           | grep "_id: '{{.NR_CLI_DB_AUTH}}.{{.NR_CLI_DB_USERNAME}}'" | wc -l)

              if [ $MONGO_MONITORING_USER_EXISTS -gt 0 ]; then
                echo "Required user already present, attempting to update its password"

                USER_UPDATE_FAILED=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} --username $MONGO_USERNAME \
                                   --password $MONGO_PASSWORD --authenticationDatabase {{.NR_CLI_DB_AUTH}} \
                                   --eval "db.changeUserPassword('{{.NR_CLI_DB_USERNAME}}', '{{.NR_CLI_DB_PASSWORD}}')" \
                                   | grep 'ok: 1' | wc -l)

                if [ $USER_UPDATE_FAILED -eq 0 ]; then
                  echo "Could not update password for {{.NR_CLI_DB_USERNAME}}"
                  exit 131
                fi
              else 
                SETUP_MONGO_MONITORING_USER=$(mongosh {{.NR_CLI_DB_AUTH}} --host {{.NR_CLI_DB_HOSTNAME}} --port {{.NR_CLI_DB_PORT}} --username $MONGO_USERNAME \
                                           --password $MONGO_PASSWORD --authenticationDatabase {{.NR_CLI_DB_AUTH}} < /tmp/mongo-user.js \
                                           | grep "ok: 1" | wc -l)

                if [ $SETUP_MONGO_MONITORING_USER -gt 0 ]; then
                  echo "Required user created"
                else
                  echo "Could not create required user on {{.NR_CLI_DB_HOSTNAME}}:{{.NR_CLI_DB_PORT}}, db {{.NR_CLI_DB_AUTH}}"
                  exit 131
                fi
              fi

              tee /etc/newrelic-infra/integrations.d/mongodb3-config.yml > /dev/null <<-EOT
              integrations:
                - name: nri-mongodb3
                  config:
                    # User-defined name to uniquely identify the cluster being monitored. Required.
                    mongodb_cluster_name: {{.NR_CLI_DB_CLUSTERNAME}}

                    # MongoDB connection URI. If used overwrites all other connection parameters.
                    mongodb_uri: mongodb://{{.NR_CLI_DB_USERNAME}}:{{.NR_CLI_DB_PASSWORD}}@{{.NR_CLI_DB_HOSTNAME}}:{{.NR_CLI_DB_PORT}}/{{.NR_CLI_DB_AUTH}}

                    # MongoDB direct connect. Whether or not a direct connect should be made.
                    # Direct connections are not valid if multiple hosts are specified or an SRV URI is used, for example for mongoDB Atlas.
                    mongodb_direct_connect: true

                    # List of comma separated databases.collections to retrieve collection stats.
                    collection_filters:

                    # List of comma separated databases.collections to retrieve index stats.
                    index_filters:

                    # Enable/Disable collection of Database metrics
                    database_stats: true

                    # Enable/Disable collection of Collections metrics
                    collection_stats: true

                    # Enable/Disable collection of Index metrics
                    index_stats: true

                    # Enable/Disable collection of Replica Set metrics
                    replicaset_stats: true

                    # Enable/Disable collection of Top Admin metrics
                    top_stats: true

                    # Enable/Disable collection of Diagnostic metrics
                    diagnostic_stats: true

                    # Port to expose scrape endpoint on, if this is not provided a random port will be used to launch the exporter
                    exporter_port: {{.NR_CLI_DB_EXPORTER_PORT}}

                    # How long until a scrape request times-out (defaults to 5s)
                    # scrape_timeout: 5s

                    # transformations:
                    #   - description: "General processing rules"
                    #     ignore_metrics:
                    #     - prefixes:
                    #       - "go_"
                    #       - "process_"
          EOT
              # Let other tasks know this one was successful
              touch /tmp/mongo_scram_ok
            fi
          fi

    setup_auth_ssl:
      cmds:
        - |
          # If previous no-auth setup task was successful, skip this one
          if [ -f /tmp/mongo_ok ] || [ -f /tmp/mongo_scram_ok ]; then
            exit 0
          fi

          if [ ${NEW_RELIC_ASSUME_YES,,} == "true" ]; then
            exit 131
          fi

          read -r -p "Using SSL/TLS authentication to connect to MongoDB? (Y/N) " USING_SSL

          if [[ ${USING_SSL,,} =~ "^(y|ye|yes)$" ]]; then
            # SSL/TLS Use Case
            TRIES=0
            while [ $TRIES -lt {{.MAX_RETRIES}} ]; do
              ((TRIES++))
              read -r -p "Localhost's Certificate Hostname? " HOST
              HOST=${HOST:-localhost}
              read -r -p "SSL CA Certificate Path? " CA_CERT_PATH
              read -r -p "Client Certificate PEM file Path? " CLIENT_CERT_PATH

              if [[ -z $HOST || -z {{.NR_CLI_DB_PORT}} || -z $CA_CERT_PATH || -z $CLIENT_CERT_PATH ]]; then
                echo "Please provide all the required certificate information"
              else
                CAN_CONNECT=$(mongosh --tls --host $HOST:{{.NR_CLI_DB_PORT}} --tlsCertificateKeyFile $CLIENT_CERT_PATH --tlsCAFile $CA_CERT_PATH \
                           --eval "db.runCommand({ connectionStatus: 1 })" | grep 'ok: 1' | wc -l)

                if [ $CAN_CONNECT -gt 0 ]; then
                  echo "Connected!"
                  break
                fi
              fi
            done

            if [ $TRIES -eq {{.MAX_RETRIES}} ]; then
              echo "Max connection attempts reached"
              exit 131
            else
              # SSL-based integration setup: Re-write mongodb3-config.yml to include SSL-related fields
              tee /etc/newrelic-infra/integrations.d/mongodb3-config.yml > /dev/null <<-EOT
              integrations:
                - name: nri-mongodb3
                  config:
                    # User-defined name to uniquely identify the cluster being monitored. Required.
                    mongodb_cluster_name: {{.NR_CLI_DB_CLUSTERNAME}}

                    # MongoDB connection URI. If used overwrites all other connection parameters.
                    mongodb_uri: mongodb://$HOST:{{.NR_CLI_DB_PORT}}/{{.NR_CLI_DB_AUTH}}?tls=true&tlsCertificateKeyFile=$CLIENT_CERT_PATH&tlsAllowInvalidCertificates=true&tlsCAFile=$CA_CERT_PATH

                    # MongoDB direct connect. Whether or not a direct connect should be made.
                    # Direct connections are not valid if multiple hosts are specified or an SRV URI is used, for example for mongoDB Atlas.
                    mongodb_direct_connect: true

                    # List of comma separated databases.collections to retrieve collection stats.
                    collection_filters:

                    # List of comma separated databases.collections to retrieve index stats.
                    index_filters:

                    # Enable/Disable collection of Database metrics
                    database_stats: true

                    # Enable/Disable collection of Collections metrics
                    collection_stats: true

                    # Enable/Disable collection of Index metrics
                    index_stats: true

                    # Enable/Disable collection of Replica Set metrics
                    replicaset_stats: true

                    # Enable/Disable collection of Top Admin metrics
                    top_stats: true

                    # Enable/Disable collection of Diagnostic metrics
                    diagnostic_stats: true

                    # Port to expose scrape endpoint on, if this is not provided a random port will be used to launch the exporter
                    exporter_port: {{.NR_CLI_DB_EXPORTER_PORT}}

                    # How long until a scrape request times-out (defaults to 5s)
                    # scrape_timeout: 5s

                    # transformations:
                    #   - description: "General processing rules"
                    #     ignore_metrics:
                    #     - prefixes:
                    #       - "go_"
                    #       - "process_"
          EOT
            fi
          fi

    cleanup:
      cmds:
        - |
          files=( "/tmp/mongo-user.js" "/tmp/mongo_ok" "/tmp/mongo_scram_ok" )
          for f in "${files[@]}"; do
            rm -f $f
          done

postInstall:
  info: |2
      ⚙️  The MongoDB configuration file can be found in /etc/newrelic-infra/integrations.d/mongodb3-config.yml
      Edit this file to make changes or configure advanced features for this integration. See the docs for options:
      https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/mongodb-monitoring-integration#config
