
name: mongodb-open-source-integration
displayName: MongoDB Open Source Integration
description: New Relic install recipe for default MongoDB Open Source on-host integration (via Infra-Agent)
repository: https://github.com/newrelic/nri-mongodb

installTargets:
  - type: host
    os: linux
    platform: "amazon"
    platformVersion: "2"
  - type: host
    os: linux
    platform: "redhat"
  - type: host
    os: linux
    platform: "centos"

keywords:
  - Infrastructure
  - Integration
  - mongodb

processMatch:
  - mongodb
  - mongod

logMatch:
  - name: MongoDB log
    file: /var/log/mongodb/mongod.log

validationNrql: "SELECT count(*) from MongoSample where hostname like '{{.HOSTNAME}}%' FACET entityGuid SINCE 10 minutes ago"

inputVars:
  - name: "NR_CLI_USERNAME"
    prompt: "Please enter your MongoDb username below."
  - name: "NR_CLI_CLUSTERNAME"
    prompt: "Please enter your MongoDb culster name below."
  - name: "NR_CLI_PASSWORD"
    prompt: "Please enter your MongoDb password below."
    secret: true
  - name: "NR_CLI_AUTH"
    prompt: "Please confirm auth source for MongoDb below."
    default: "admin"
  - name: "NR_CLI_HOSTNAME"
    prompt: "Please enter your MongoDb hostname below. If none is provided the default value: localhost will be used."
    default: "localhost"
  - name: "NR_CLI_PORT"
    prompt: "Please enter your MonogDb PORT below. If none is provided the default value: 27017 will be used."
    default: 27017
  - name: "NR_CLI_SSL"
    prompt: "Are you using SSL? (y/n)"
  - name: "NR_CLI_CERT_AUTH_FILE"
    prompt: "Please enter the path to your Certificate Authority file."
  - name: "NR_CLI_SKIP_SSL_VERIFY"
    prompt: "Would you like to verify the certificate sent by the host? (y/n)"
  - name: "NR_CLI_CLIENT_CERT_FILE"
    prompt: "Please enter the path to your Client Certificate file, if required."
  - name: "NR_CLI_CERT_PASSPHRASE"
    prompt: "Please enter your passphrase to decrypt the PEM key file, if required."

install:

  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: create_user_notification
        - task: setup
        - task: restart
        
    create_user_notification:
      cmds:
        - |
          echo "_ Note: These steps must be completed in order for the MongoDB integration to function properly.
          In the MongoDB shell, enter use admin.
          Use the following command to create the listCollections role.
          db.createRole({role: "listCollections", privileges: [{ resource: {db:"",collection:""}, actions: ["listCollections"] }], roles: []})
          Use the following commands to create a new user, and assign clusterMonitor and listCollections roles to the user:
          db.createUser({ user: "username", pwd: "password", roles: [ "clusterMonitor", "listCollections" ]})"
    assert_pre_req:
      cmds:
        - |
          SERVICE_EXIST=$(sudo systemctl status newrelic-infra.service | grep "Active" | wc -l)
          if [ $SERVICE_EXIST -eq 0 ]; then
            echo "The newrelic-infra agent service is NOT installed on the host, but is required to install this integration." >> /dev/stderr
            exit 1
          fi
    setup:
      label: "Installing mongodb integration..."
      cmds:
        - |
          sudo mkdir -p "/etc/newrelic-infra/integrations.d"
        - |
          sudo yum update -y
        - |
          sudo yum install nri-mongodb -y
        - |
          if [ -f /etc/newrelic-infra/integrations.d/mongodb-config.yml ]; then
            sudo rm /etc/newrelic-infra/integrations.d/mongodb-config.yml;
          fi
          sudo cp /etc/newrelic-infra/integrations.d/mongodb-config.yml.sample /etc/newrelic-infra/integrations.d/mongodb-config.yml;
        - | 
          if [ "{{.NR_CLI_SSL}}" == "y" ]; then
            if [ "{{.NR_CLI_SKIP_SSL_VERIFY}}" == "n" ]; then
              sudo tee /etc/newrelic-infra/integrations.d/mongodb-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.mongodb
          instances: 
            - name: all
              command: all
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: false
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                pem_key_file: {{.NR_CLI_CLIENT_CERT_FILE}}
                passphrase: {{.NR_CLI_CERT_PASSPHRASE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: metrics
              command: metrics
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: false
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                pem_key_file: {{.NR_CLI_CLIENT_CERT_FILE}}
                passphrase: {{.NR_CLI_CERT_PASSPHRASE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: inventory
              command: inventory
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: false
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                pem_key_file: {{.NR_CLI_CLIENT_CERT_FILE}}
                passphrase: {{.NR_CLI_CERT_PASSPHRASE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
          EOT
            else
              sudo tee /etc/newrelic-infra/integrations.d/mongodb-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.mongodb
          instances: 
            - name: all
              command: all
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: true
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: metrics
              command: metrics
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: true
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: inventory
              command: inventory
              arguments:
                # The mongos to connect to
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: true
                ssl_insecure_skip_verify: true
                ssl_ca_certs: {{.NR_CLI_CERT_AUTH_FILE}}
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
          EOT
            fi
            else
              sudo tee /etc/newrelic-infra/integrations.d/mongodb-config.yml > /dev/null <<"EOT"
          integration_name: com.newrelic.mongodb
          instances: 
            - name: all
              command: all
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: false
                ssl_insecure_skip_verify: false
                ssl_ca_certs: /sample/path/to/ca_certs
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: metrics
              command: metrics
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: false
                ssl_insecure_skip_verify: false
                ssl_ca_certs: /sample/path/to/ca_certs
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
            - name: inventory
              command: inventory
              arguments:
                host: {{.NR_CLI_HOSTNAME}}
                port: {{.NR_CLI_PORT}}
                username: {{.NR_CLI_USERNAME}}
                password: {{.NR_CLI_PASSWORD}}
                auth_source: {{.NR_CLI_AUTH}}
                cluster_name: {{.NR_CLI_CLUSTERNAME}}
                ssl: false
                ssl_insecure_skip_verify: false
                ssl_ca_certs: /sample/path/to/ca_certs
                filters: '{"db1":null,"db2":null,"db3":null}'
                concurrent_collections: 50
          EOT
          fi
    restart:
      cmds:
        - sudo systemctl restart newrelic-infra.service