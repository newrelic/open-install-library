name: Validate Recipes
on: [pull_request, workflow_dispatch]

jobs:
  log-context:
    runs-on: [ubuntu-latest]
    steps:
      # Dump all contexts
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

  validate-schema:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Install dependencies
        run: npm --prefix validator install

      - name: Validate
        run: npm --prefix validator run check

  # Job to get recipe that's being tested
  # Assumption: This validation workflow is running (1) recipe and (2) its test definition file
  #   > Need to determine which recipes are being tested from git context
  #     > From the recipe, get its test definition file
  # get-recipe-and-TDF:
  #   name: Get Recipe and Test Definition File
  #   runs-on: ubuntu-latest
  #   steps:
  #     # 1) Check for all incoming changes to files under `recipes` directory
  #     # 2) Use yq to pull the test definition file from the recipe yaml

  test-deploy-recipe:
    name: Test Deploy Recipe
    needs: [validate-schema]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # 1) Check for all incoming changes to files under `recipes` directory
      - name: Get Changed Files
        id: getfile
        run: |
          RECIPES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "recipes" || true)

          if [ -z "$RECIPES" ]; then
            echo "No recipe files detected."
          else
            echo "RECIPES=$RECIPES" >> $GITHUB_ENV
          fi

      # 2) Use javascript action / yq to pull the test definition file from the recipe yaml
      - name: Get Test Definition Files
        id: get-test-definition-files
        if: env.RECIPES != ''
        uses: actions/github-script@v3
        with:
          script: |
            const fsp = require('fs').promises;
            const path = require('path');

            const recipeFiles = process.env.RECIPES ? process.env.RECIPES.split(' ') : null
            console.log(`Detected Recipe Files: ${JSON.stringify(recipeFiles, null, 2)}`)

            const deployConfigsPath = path.join(process.env.GITHUB_WORKSPACE, 'test/definitions');
            const deployConfigs = await fsp.readdir(deployConfigsPath);
            console.log("deployConfigs:", deployConfigs);

            // Build up list of Deploy Config Recipes w/ their recipe params
            const dcRecipes = deployConfigs.reduce((p, c) => {
              const contents = require(`${process.env.GITHUB_WORKSPACE}/test/definitions/${c}`);
              return p.concat([{ fileName: c, recipeNames: contents.instrumentations.resources[0].params.recipe_content_url }])
            }, [])
            console.log("dcRecipes:", dcRecipes);
            // let dcRecipes = []
            // for (file in deployConfigs) {
            //   console.log(file);
            //   const contents = require(`${process.env.GITHUB_WORKSPACE}/${file}`);
            //
            //   dcRecipes.push({ fileName: file, recipeNames: content.instrumentations.resources[0].params.recipe_content_url });
            // }

            if (recipeFiles) {
              const testDefinitionFilesToRun = recipeFiles
                .reduce((p, c) => {
                  return p.concat(
                    dcRecipes.filter((r) => r.recipeNames.filter((rn) => rn.includes(c)).length > 0)
                  );
                }, [])
                .map((r) => r.fileName);

              console.log('testDefinitionFilesToRun', testDefinitionFilesToRun);
              return testDefinitionFilesToRun;
            }

      - name: Write AWS Certificate to File
        env:
          AWS_PEM: ${{ secrets.GIT_DEPLOYER_CANADA_AWS_PEM }}
        run: |
          mkdir -p configs
          rm -f configs/gitdeployerCanada.pem
          echo "$AWS_PEM" > configs/gitdeployerCanada.pem
          sudo chmod 400 configs/gitdeployerCanada.pem

      - name: Write Test Definition File JSON to file
        env:
          USER_JSON: ${{ secrets.GIT_DEPLOYER_DOCKER_USER_CONFIG }}
        run: |
          echo "$USER_JSON" > configs/gitusdkr{{ github.run_id }}.json

      - name: Pull Deployer image
        run: |
          docker pull ghcr.io/newrelic/deployer:latest
          docker images ghcr.io/newrelic/deployer:latest

      - name: Run deployer
        run: |
          echo ${{ steps.get-test-definition-files.outputs.result }}
      # - name: Teardown any previous deployment
      #   if: always()
      #   run: |
      #     docker run -i\
      #       -v $HOME/configs/:/mnt/deployer/configs/\
      #       --entrypoint ruby deployer main.rb -c configs/gitusdkr{{ github.run_id }}.json -d test/definitions/awslinux2-infra.json -t
  # slack-notify:
  #   runs-on: ubuntu-latest
  #   needs: [test-deploy-recipe]
  #   if: always() && github.event_name == 'push'
  #   steps:
  #     - name: Build Result Slack Notification
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         author_name: GitHub Actions
  #         status: custom
  #         fields: commit,repo,ref,author,eventName,message,workflow
  #         custom_payload: |
  #           {
  #             username: "GitHub Actions",
  #             icon_emoji: ":octocat:",
  #             attachments: [{
  #               color: ${{
  #                 needs.test-deploy-recipe.result == 'success'
  #               }} === true ? '#43cc11' : '#e05d44',
  #               blocks: [
  #                 {
  #                   type: "section",
  #                   text: {
  #                     type: "mrkdwn",
  #                     text: `Build for ${process.env.AS_REPO}`
  #                   }
  #                 },
  #                 {
  #                   type: "section",
  #                   fields: [
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Commit:*\n${process.env.AS_COMMIT}`
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Author:*\n${process.env.AS_AUTHOR}`
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Branch:*\n${process.env.AS_REF}`
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Message:*\n${process.env.AS_MESSAGE}`
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Type:*\n${process.env.AS_EVENT_NAME}`
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: "*PR:*\n${{ github.event.pull_request.html_url }}"
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: `*Workflow:*\n${ process.env.AS_WORKFLOW }`
  #                     }
  #                   ]
  #                 },
  #                 {
  #                   type: "section",
  #                   text: {
  #                     type: "mrkdwn",
  #                     text: [
  #                       "*Result:*",
  #                       `• ${ ${{ needs.test-deploy-recipe.result == 'success' }} === true ? '✅' : '❌' } AWS cloud provider test: ${{ needs.test-deploy-recipe.result }}`
  #                     ].join('\n')
  #                   }
  #                 },
  #                 {
  #                   type: "context",
  #                   elements: [
  #                     {
  #                       type: "image",
  #                       image_url: "https://avatars2.githubusercontent.com/in/15368",
  #                       alt_text: "Github Actions"
  #                     },
  #                     {
  #                       type: "mrkdwn",
  #                       text: "This message was created automatically by GitHub Actions."
  #                     }
  #                   ]
  #                 }
  #               ]
  #             }]
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
